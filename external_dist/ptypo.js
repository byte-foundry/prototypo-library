(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Ptypo"] = factory();
	else
		root["Ptypo"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 114);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(2)
  , core      = __webpack_require__(24)
  , hide      = __webpack_require__(11)
  , redefine  = __webpack_require__(12)
  , ctx       = __webpack_require__(25)
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var store      = __webpack_require__(48)('wks')
  , uid        = __webpack_require__(31)
  , Symbol     = __webpack_require__(2).Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(3)(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var anObject       = __webpack_require__(1)
  , IE8_DOM_DEFINE = __webpack_require__(86)
  , toPrimitive    = __webpack_require__(21)
  , dP             = Object.defineProperty;

exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(30)
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(19);
module.exports = function(it){
  return Object(defined(it));
};

/***/ }),
/* 10 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(7)
  , createDesc = __webpack_require__(28);
module.exports = __webpack_require__(6) ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(2)
  , hide      = __webpack_require__(11)
  , has       = __webpack_require__(10)
  , SRC       = __webpack_require__(31)('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

__webpack_require__(24).inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(45)
  , defined = __webpack_require__(19);
module.exports = function(it){
  return IObject(defined(it));
};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0)
  , fails   = __webpack_require__(3)
  , defined = __webpack_require__(19)
  , quot    = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S  = String(defined(string))
    , p1 = '<' + tag;
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec){
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function(){
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var pIE            = __webpack_require__(46)
  , createDesc     = __webpack_require__(28)
  , toIObject      = __webpack_require__(14)
  , toPrimitive    = __webpack_require__(21)
  , has            = __webpack_require__(10)
  , IE8_DOM_DEFINE = __webpack_require__(86)
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = __webpack_require__(10)
  , toObject    = __webpack_require__(9)
  , IE_PROTO    = __webpack_require__(62)('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

/***/ }),
/* 18 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};

/***/ }),
/* 19 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(3);

module.exports = function(method, arg){
  return !!method && fails(function(){
    arg ? method.call(null, function(){}, 1) : method.call(null);
  });
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(4);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(0)
  , core    = __webpack_require__(24)
  , fails   = __webpack_require__(3);
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = __webpack_require__(25)
  , IObject  = __webpack_require__(45)
  , toObject = __webpack_require__(9)
  , toLength = __webpack_require__(8)
  , asc      = __webpack_require__(206);
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),
/* 24 */
/***/ (function(module, exports) {

var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(13);
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if(__webpack_require__(6)){
  var LIBRARY             = __webpack_require__(32)
    , global              = __webpack_require__(2)
    , fails               = __webpack_require__(3)
    , $export             = __webpack_require__(0)
    , $typed              = __webpack_require__(57)
    , $buffer             = __webpack_require__(85)
    , ctx                 = __webpack_require__(25)
    , anInstance          = __webpack_require__(38)
    , propertyDesc        = __webpack_require__(28)
    , hide                = __webpack_require__(11)
    , redefineAll         = __webpack_require__(39)
    , toInteger           = __webpack_require__(30)
    , toLength            = __webpack_require__(8)
    , toIndex             = __webpack_require__(34)
    , toPrimitive         = __webpack_require__(21)
    , has                 = __webpack_require__(10)
    , same                = __webpack_require__(92)
    , classof             = __webpack_require__(47)
    , isObject            = __webpack_require__(4)
    , toObject            = __webpack_require__(9)
    , isArrayIter         = __webpack_require__(77)
    , create              = __webpack_require__(35)
    , getPrototypeOf      = __webpack_require__(17)
    , gOPN                = __webpack_require__(36).f
    , getIterFn           = __webpack_require__(79)
    , uid                 = __webpack_require__(31)
    , wks                 = __webpack_require__(5)
    , createArrayMethod   = __webpack_require__(23)
    , createArrayIncludes = __webpack_require__(49)
    , speciesConstructor  = __webpack_require__(82)
    , ArrayIterators      = __webpack_require__(81)
    , Iterators           = __webpack_require__(42)
    , $iterDetect         = __webpack_require__(53)
    , setSpecies          = __webpack_require__(37)
    , arrayFill           = __webpack_require__(80)
    , arrayCopyWithin     = __webpack_require__(101)
    , $DP                 = __webpack_require__(7)
    , $GOPD               = __webpack_require__(16)
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var Map     = __webpack_require__(104)
  , $export = __webpack_require__(0)
  , shared  = __webpack_require__(48)('metadata')
  , store   = shared.store || (shared.store = new (__webpack_require__(107)));

var getOrCreateMetadataMap = function(target, targetKey, create){
  var targetMetadata = store.get(target);
  if(!targetMetadata){
    if(!create)return undefined;
    store.set(target, targetMetadata = new Map);
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if(!keyMetadata){
    if(!create)return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map);
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey){
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
    , keys        = [];
  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
  return keys;
};
var toMetaKey = function(it){
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O){
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var META     = __webpack_require__(31)('meta')
  , isObject = __webpack_require__(4)
  , has      = __webpack_require__(10)
  , setDesc  = __webpack_require__(7).f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !__webpack_require__(3)(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};

/***/ }),
/* 30 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),
/* 31 */
/***/ (function(module, exports) {

var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = false;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = __webpack_require__(88)
  , enumBugKeys = __webpack_require__(63);

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(30)
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = __webpack_require__(1)
  , dPs         = __webpack_require__(89)
  , enumBugKeys = __webpack_require__(63)
  , IE_PROTO    = __webpack_require__(62)('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(60)('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(65).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = __webpack_require__(88)
  , hiddenKeys = __webpack_require__(63).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global      = __webpack_require__(2)
  , dP          = __webpack_require__(7)
  , DESCRIPTORS = __webpack_require__(6)
  , SPECIES     = __webpack_require__(5)('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};

/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(12);
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(7).f
  , has = __webpack_require__(10)
  , TAG = __webpack_require__(5)('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0)
  , defined = __webpack_require__(19)
  , fails   = __webpack_require__(3)
  , spaces  = __webpack_require__(67)
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(5)('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(11)(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var ctx         = __webpack_require__(25)
  , call        = __webpack_require__(99)
  , isArrayIter = __webpack_require__(77)
  , anObject    = __webpack_require__(1)
  , toLength    = __webpack_require__(8)
  , getIterFn   = __webpack_require__(79)
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(18);
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),
/* 46 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(18)
  , TAG = __webpack_require__(5)('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2)
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(14)
  , toLength  = __webpack_require__(8)
  , toIndex   = __webpack_require__(34);
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

/***/ }),
/* 50 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 51 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(4)
  , cof      = __webpack_require__(18)
  , MATCH    = __webpack_require__(5)('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR     = __webpack_require__(5)('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(1);
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hide     = __webpack_require__(11)
  , redefine = __webpack_require__(12)
  , fails    = __webpack_require__(3)
  , defined  = __webpack_require__(19)
  , wks      = __webpack_require__(5);

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global            = __webpack_require__(2)
  , $export           = __webpack_require__(0)
  , redefine          = __webpack_require__(12)
  , redefineAll       = __webpack_require__(39)
  , meta              = __webpack_require__(29)
  , forOf             = __webpack_require__(44)
  , anInstance        = __webpack_require__(38)
  , isObject          = __webpack_require__(4)
  , fails             = __webpack_require__(3)
  , $iterDetect       = __webpack_require__(53)
  , setToStringTag    = __webpack_require__(40)
  , inheritIfRequired = __webpack_require__(68);

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2)
  , hide   = __webpack_require__(11)
  , uid    = __webpack_require__(31)
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(32)|| !__webpack_require__(3)(function(){
  var K = Math.random();
  // In FF throws only define methods
  __defineSetter__.call(null, K, function(){ /* empty */});
  delete __webpack_require__(2)[K];
});

/***/ }),
/* 59 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4)
  , document = __webpack_require__(2).document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var global         = __webpack_require__(2)
  , core           = __webpack_require__(24)
  , LIBRARY        = __webpack_require__(32)
  , wksExt         = __webpack_require__(87)
  , defineProperty = __webpack_require__(7).f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(48)('keys')
  , uid    = __webpack_require__(31);
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),
/* 63 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(18);
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2).document && document.documentElement;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(4)
  , anObject = __webpack_require__(1);
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = __webpack_require__(25)(Function.call, __webpack_require__(16).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

/***/ }),
/* 67 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var isObject       = __webpack_require__(4)
  , setPrototypeOf = __webpack_require__(66).set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(30)
  , defined   = __webpack_require__(19);

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};

/***/ }),
/* 70 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

/***/ }),
/* 71 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(30)
  , defined   = __webpack_require__(19);
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY        = __webpack_require__(32)
  , $export        = __webpack_require__(0)
  , redefine       = __webpack_require__(12)
  , hide           = __webpack_require__(11)
  , has            = __webpack_require__(10)
  , Iterators      = __webpack_require__(42)
  , $iterCreate    = __webpack_require__(74)
  , setToStringTag = __webpack_require__(40)
  , getPrototypeOf = __webpack_require__(17)
  , ITERATOR       = __webpack_require__(5)('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create         = __webpack_require__(35)
  , descriptor     = __webpack_require__(28)
  , setToStringTag = __webpack_require__(40)
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(11)(IteratorPrototype, __webpack_require__(5)('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(52)
  , defined  = __webpack_require__(19);

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(5)('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators  = __webpack_require__(42)
  , ITERATOR   = __webpack_require__(5)('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(7)
  , createDesc      = __webpack_require__(28);

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(47)
  , ITERATOR  = __webpack_require__(5)('iterator')
  , Iterators = __webpack_require__(42);
module.exports = __webpack_require__(24).getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(9)
  , toIndex  = __webpack_require__(34)
  , toLength = __webpack_require__(8);
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(43)
  , step             = __webpack_require__(102)
  , Iterators        = __webpack_require__(42)
  , toIObject        = __webpack_require__(14);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(73)(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = __webpack_require__(1)
  , aFunction = __webpack_require__(13)
  , SPECIES   = __webpack_require__(5)('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var ctx                = __webpack_require__(25)
  , invoke             = __webpack_require__(51)
  , html               = __webpack_require__(65)
  , cel                = __webpack_require__(60)
  , global             = __webpack_require__(2)
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(__webpack_require__(18)(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(2)
  , macrotask = __webpack_require__(83).set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = __webpack_require__(18)(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global         = __webpack_require__(2)
  , DESCRIPTORS    = __webpack_require__(6)
  , LIBRARY        = __webpack_require__(32)
  , $typed         = __webpack_require__(57)
  , hide           = __webpack_require__(11)
  , redefineAll    = __webpack_require__(39)
  , fails          = __webpack_require__(3)
  , anInstance     = __webpack_require__(38)
  , toInteger      = __webpack_require__(30)
  , toLength       = __webpack_require__(8)
  , gOPN           = __webpack_require__(36).f
  , dP             = __webpack_require__(7).f
  , arrayFill      = __webpack_require__(80)
  , setToStringTag = __webpack_require__(40)
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(6) && !__webpack_require__(3)(function(){
  return Object.defineProperty(__webpack_require__(60)('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(5);

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var has          = __webpack_require__(10)
  , toIObject    = __webpack_require__(14)
  , arrayIndexOf = __webpack_require__(49)(false)
  , IE_PROTO     = __webpack_require__(62)('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var dP       = __webpack_require__(7)
  , anObject = __webpack_require__(1)
  , getKeys  = __webpack_require__(33);

module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(14)
  , gOPN      = __webpack_require__(36).f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = __webpack_require__(33)
  , gOPS     = __webpack_require__(50)
  , pIE      = __webpack_require__(46)
  , toObject = __webpack_require__(9)
  , IObject  = __webpack_require__(45)
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(3)(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;

/***/ }),
/* 92 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction  = __webpack_require__(13)
  , isObject   = __webpack_require__(4)
  , invoke     = __webpack_require__(51)
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(2).parseInt
  , $trim     = __webpack_require__(41).trim
  , ws        = __webpack_require__(67)
  , hex       = /^[\-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(2).parseFloat
  , $trim       = __webpack_require__(41).trim;

module.exports = 1 / $parseFloat(__webpack_require__(67) + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim(String(str), 3)
    , result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(18);
module.exports = function(it, msg){
  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
  return +it;
};

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(4)
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

/***/ }),
/* 98 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(1);
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(13)
  , toObject  = __webpack_require__(9)
  , IObject   = __webpack_require__(45)
  , toLength  = __webpack_require__(8);

module.exports = function(that, callbackfn, aLen, memo, isRight){
  aFunction(callbackfn);
  var O      = toObject(that)
    , self   = IObject(O)
    , length = toLength(O.length)
    , index  = isRight ? length - 1 : 0
    , i      = isRight ? -1 : 1;
  if(aLen < 2)for(;;){
    if(index in self){
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if(isRight ? index < 0 : length <= index){
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(9)
  , toIndex  = __webpack_require__(34)
  , toLength = __webpack_require__(8);

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};

/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = function(done, value){
  return {value: value, done: !!done};
};

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if(__webpack_require__(6) && /./g.flags != 'g')__webpack_require__(7).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(54)
});

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(105);

// 23.1 Map Objects
module.exports = __webpack_require__(56)('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP          = __webpack_require__(7).f
  , create      = __webpack_require__(35)
  , redefineAll = __webpack_require__(39)
  , ctx         = __webpack_require__(25)
  , anInstance  = __webpack_require__(38)
  , defined     = __webpack_require__(19)
  , forOf       = __webpack_require__(44)
  , $iterDefine = __webpack_require__(73)
  , step        = __webpack_require__(102)
  , setSpecies  = __webpack_require__(37)
  , DESCRIPTORS = __webpack_require__(6)
  , fastKey     = __webpack_require__(29).fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(105);

// 23.2 Set Objects
module.exports = __webpack_require__(56)('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each         = __webpack_require__(23)(0)
  , redefine     = __webpack_require__(12)
  , meta         = __webpack_require__(29)
  , assign       = __webpack_require__(91)
  , weak         = __webpack_require__(108)
  , isObject     = __webpack_require__(4)
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(56)('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll       = __webpack_require__(39)
  , getWeak           = __webpack_require__(29).getWeak
  , anObject          = __webpack_require__(1)
  , isObject          = __webpack_require__(4)
  , anInstance        = __webpack_require__(38)
  , forOf             = __webpack_require__(44)
  , createArrayMethod = __webpack_require__(23)
  , $has              = __webpack_require__(10)
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN     = __webpack_require__(36)
  , gOPS     = __webpack_require__(50)
  , anObject = __webpack_require__(1)
  , Reflect  = __webpack_require__(2).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(8)
  , repeat   = __webpack_require__(69)
  , defined  = __webpack_require__(19);

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength || fillStr == '')return S;
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(33)
  , toIObject = __webpack_require__(14)
  , isEnum    = __webpack_require__(46).f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(47)
  , from    = __webpack_require__(113);
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(44);

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(115);
module.exports = __webpack_require__(298);


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__(116);

__webpack_require__(294);

__webpack_require__(295);

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(59)))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(117);
__webpack_require__(120);
__webpack_require__(121);
__webpack_require__(122);
__webpack_require__(123);
__webpack_require__(124);
__webpack_require__(125);
__webpack_require__(126);
__webpack_require__(127);
__webpack_require__(128);
__webpack_require__(129);
__webpack_require__(130);
__webpack_require__(131);
__webpack_require__(132);
__webpack_require__(133);
__webpack_require__(134);
__webpack_require__(135);
__webpack_require__(136);
__webpack_require__(137);
__webpack_require__(138);
__webpack_require__(139);
__webpack_require__(140);
__webpack_require__(141);
__webpack_require__(142);
__webpack_require__(143);
__webpack_require__(144);
__webpack_require__(145);
__webpack_require__(146);
__webpack_require__(147);
__webpack_require__(148);
__webpack_require__(149);
__webpack_require__(150);
__webpack_require__(151);
__webpack_require__(152);
__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(155);
__webpack_require__(156);
__webpack_require__(157);
__webpack_require__(158);
__webpack_require__(159);
__webpack_require__(160);
__webpack_require__(161);
__webpack_require__(162);
__webpack_require__(163);
__webpack_require__(164);
__webpack_require__(165);
__webpack_require__(166);
__webpack_require__(167);
__webpack_require__(168);
__webpack_require__(169);
__webpack_require__(170);
__webpack_require__(171);
__webpack_require__(172);
__webpack_require__(173);
__webpack_require__(174);
__webpack_require__(175);
__webpack_require__(176);
__webpack_require__(177);
__webpack_require__(178);
__webpack_require__(179);
__webpack_require__(180);
__webpack_require__(181);
__webpack_require__(182);
__webpack_require__(183);
__webpack_require__(184);
__webpack_require__(185);
__webpack_require__(186);
__webpack_require__(187);
__webpack_require__(188);
__webpack_require__(189);
__webpack_require__(190);
__webpack_require__(191);
__webpack_require__(192);
__webpack_require__(193);
__webpack_require__(194);
__webpack_require__(195);
__webpack_require__(196);
__webpack_require__(197);
__webpack_require__(199);
__webpack_require__(200);
__webpack_require__(201);
__webpack_require__(202);
__webpack_require__(203);
__webpack_require__(204);
__webpack_require__(205);
__webpack_require__(208);
__webpack_require__(209);
__webpack_require__(210);
__webpack_require__(211);
__webpack_require__(212);
__webpack_require__(213);
__webpack_require__(214);
__webpack_require__(215);
__webpack_require__(216);
__webpack_require__(217);
__webpack_require__(218);
__webpack_require__(219);
__webpack_require__(220);
__webpack_require__(81);
__webpack_require__(221);
__webpack_require__(222);
__webpack_require__(103);
__webpack_require__(223);
__webpack_require__(224);
__webpack_require__(225);
__webpack_require__(226);
__webpack_require__(227);
__webpack_require__(104);
__webpack_require__(106);
__webpack_require__(107);
__webpack_require__(228);
__webpack_require__(229);
__webpack_require__(230);
__webpack_require__(231);
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(235);
__webpack_require__(236);
__webpack_require__(237);
__webpack_require__(238);
__webpack_require__(239);
__webpack_require__(240);
__webpack_require__(241);
__webpack_require__(242);
__webpack_require__(243);
__webpack_require__(244);
__webpack_require__(245);
__webpack_require__(246);
__webpack_require__(247);
__webpack_require__(248);
__webpack_require__(249);
__webpack_require__(250);
__webpack_require__(251);
__webpack_require__(252);
__webpack_require__(253);
__webpack_require__(254);
__webpack_require__(255);
__webpack_require__(256);
__webpack_require__(257);
__webpack_require__(258);
__webpack_require__(259);
__webpack_require__(260);
__webpack_require__(261);
__webpack_require__(262);
__webpack_require__(263);
__webpack_require__(264);
__webpack_require__(265);
__webpack_require__(266);
__webpack_require__(267);
__webpack_require__(268);
__webpack_require__(269);
__webpack_require__(270);
__webpack_require__(271);
__webpack_require__(272);
__webpack_require__(273);
__webpack_require__(274);
__webpack_require__(275);
__webpack_require__(276);
__webpack_require__(277);
__webpack_require__(278);
__webpack_require__(279);
__webpack_require__(280);
__webpack_require__(281);
__webpack_require__(282);
__webpack_require__(283);
__webpack_require__(284);
__webpack_require__(285);
__webpack_require__(286);
__webpack_require__(287);
__webpack_require__(288);
__webpack_require__(289);
__webpack_require__(292);
__webpack_require__(293);
module.exports = __webpack_require__(24);

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global         = __webpack_require__(2)
  , has            = __webpack_require__(10)
  , DESCRIPTORS    = __webpack_require__(6)
  , $export        = __webpack_require__(0)
  , redefine       = __webpack_require__(12)
  , META           = __webpack_require__(29).KEY
  , $fails         = __webpack_require__(3)
  , shared         = __webpack_require__(48)
  , setToStringTag = __webpack_require__(40)
  , uid            = __webpack_require__(31)
  , wks            = __webpack_require__(5)
  , wksExt         = __webpack_require__(87)
  , wksDefine      = __webpack_require__(61)
  , keyOf          = __webpack_require__(118)
  , enumKeys       = __webpack_require__(119)
  , isArray        = __webpack_require__(64)
  , anObject       = __webpack_require__(1)
  , toIObject      = __webpack_require__(14)
  , toPrimitive    = __webpack_require__(21)
  , createDesc     = __webpack_require__(28)
  , _create        = __webpack_require__(35)
  , gOPNExt        = __webpack_require__(90)
  , $GOPD          = __webpack_require__(16)
  , $DP            = __webpack_require__(7)
  , $keys          = __webpack_require__(33)
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  __webpack_require__(36).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(46).f  = $propertyIsEnumerable;
  __webpack_require__(50).f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !__webpack_require__(32)){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(11)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(33)
  , toIObject = __webpack_require__(14);
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(33)
  , gOPS    = __webpack_require__(50)
  , pIE     = __webpack_require__(46);
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0)
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: __webpack_require__(35)});

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperty: __webpack_require__(7).f});

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperties: __webpack_require__(89)});

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = __webpack_require__(14)
  , $getOwnPropertyDescriptor = __webpack_require__(16).f;

__webpack_require__(22)('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = __webpack_require__(9)
  , $getPrototypeOf = __webpack_require__(17);

__webpack_require__(22)('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(9)
  , $keys    = __webpack_require__(33);

__webpack_require__(22)('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(22)('getOwnPropertyNames', function(){
  return __webpack_require__(90).f;
});

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(4)
  , meta     = __webpack_require__(29).onFreeze;

__webpack_require__(22)('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(4)
  , meta     = __webpack_require__(29).onFreeze;

__webpack_require__(22)('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(4)
  , meta     = __webpack_require__(29).onFreeze;

__webpack_require__(22)('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(4);

__webpack_require__(22)('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(4);

__webpack_require__(22)('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(4);

__webpack_require__(22)('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', {assign: __webpack_require__(91)});

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(0);
$export($export.S, 'Object', {is: __webpack_require__(92)});

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(0);
$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(66).set});

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(47)
  , test    = {};
test[__webpack_require__(5)('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  __webpack_require__(12)(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(0);

$export($export.P, 'Function', {bind: __webpack_require__(93)});

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(7).f
  , createDesc = __webpack_require__(28)
  , has        = __webpack_require__(10)
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';

var isExtensible = Object.isExtensible || function(){
  return true;
};

// 19.2.4.2 name
NAME in FProto || __webpack_require__(6) && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    try {
      var that = this
        , name = ('' + that).match(nameRE)[1];
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
      return name;
    } catch(e){
      return '';
    }
  }
});

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject       = __webpack_require__(4)
  , getPrototypeOf = __webpack_require__(17)
  , HAS_INSTANCE   = __webpack_require__(5)('hasInstance')
  , FunctionProto  = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))__webpack_require__(7).f(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
  return false;
}});

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var $export   = __webpack_require__(0)
  , $parseInt = __webpack_require__(94);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var $export     = __webpack_require__(0)
  , $parseFloat = __webpack_require__(95);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global            = __webpack_require__(2)
  , has               = __webpack_require__(10)
  , cof               = __webpack_require__(18)
  , inheritIfRequired = __webpack_require__(68)
  , toPrimitive       = __webpack_require__(21)
  , fails             = __webpack_require__(3)
  , gOPN              = __webpack_require__(36).f
  , gOPD              = __webpack_require__(16).f
  , dP                = __webpack_require__(7).f
  , $trim             = __webpack_require__(41).trim
  , NUMBER            = 'Number'
  , $Number           = global[NUMBER]
  , Base              = $Number
  , proto             = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF        = cof(__webpack_require__(35)(proto)) == NUMBER
  , TRIM              = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for(var keys = __webpack_require__(6) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++){
    if(has(Base, key = keys[j]) && !has($Number, key)){
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(12)(global, NUMBER, $Number);
}

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export      = __webpack_require__(0)
  , toInteger    = __webpack_require__(30)
  , aNumberValue = __webpack_require__(96)
  , repeat       = __webpack_require__(69)
  , $toFixed     = 1..toFixed
  , floor        = Math.floor
  , data         = [0, 0, 0, 0, 0, 0]
  , ERROR        = 'Number.toFixed: incorrect invocation!'
  , ZERO         = '0';

var multiply = function(n, c){
  var i  = -1
    , c2 = c;
  while(++i < 6){
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(n){
  var i = 6
    , c = 0;
  while(--i >= 0){
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function(){
  var i = 6
    , s = '';
  while(--i >= 0){
    if(s !== '' || i === 0 || data[i] !== 0){
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function(x, n, acc){
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x){
  var n  = 0
    , x2 = x;
  while(x2 >= 4096){
    n += 12;
    x2 /= 4096;
  }
  while(x2 >= 2){
    n  += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128..toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(3)(function(){
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits){
    var x = aNumberValue(this, ERROR)
      , f = toInteger(fractionDigits)
      , s = ''
      , m = ZERO
      , e, z, j, k;
    if(f < 0 || f > 20)throw RangeError(ERROR);
    if(x != x)return 'NaN';
    if(x <= -1e21 || x >= 1e21)return String(x);
    if(x < 0){
      s = '-';
      x = -x;
    }
    if(x > 1e-21){
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if(e > 0){
        multiply(0, z);
        j = f;
        while(j >= 7){
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while(j >= 23){
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if(f > 0){
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export      = __webpack_require__(0)
  , $fails       = __webpack_require__(3)
  , aNumberValue = __webpack_require__(96)
  , $toPrecision = 1..toPrecision;

$export($export.P + $export.F * ($fails(function(){
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function(){
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision){
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
  }
});

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(0);

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export   = __webpack_require__(0)
  , _isFinite = __webpack_require__(2).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {isInteger: __webpack_require__(97)});

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export   = __webpack_require__(0)
  , isInteger = __webpack_require__(97)
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var $export     = __webpack_require__(0)
  , $parseFloat = __webpack_require__(95);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var $export   = __webpack_require__(0)
  , $parseInt = __webpack_require__(94);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(0)
  , log1p   = __webpack_require__(98)
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(0)
  , $asinh  = Math.asinh;

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0 
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(0)
  , $atanh  = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0 
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(0)
  , sign    = __webpack_require__(70);

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(0)
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(0)
  , $expm1  = __webpack_require__(71);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export   = __webpack_require__(0)
  , sign      = __webpack_require__(70)
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(0)
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(0)
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(3)(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {log1p: __webpack_require__(98)});

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {sign: __webpack_require__(70)});

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(0)
  , expm1   = __webpack_require__(71)
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(3)(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(0)
  , expm1   = __webpack_require__(71)
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

var $export        = __webpack_require__(0)
  , toIndex        = __webpack_require__(34)
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

var $export   = __webpack_require__(0)
  , toIObject = __webpack_require__(14)
  , toLength  = __webpack_require__(8);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(41)('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at  = __webpack_require__(72)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(73)(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0)
  , $at     = __webpack_require__(72)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export   = __webpack_require__(0)
  , toLength  = __webpack_require__(8)
  , context   = __webpack_require__(75)
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(76)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export  = __webpack_require__(0)
  , context  = __webpack_require__(75)
  , INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(76)(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(69)
});

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export     = __webpack_require__(0)
  , toLength    = __webpack_require__(8)
  , context     = __webpack_require__(75)
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(76)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(15)('anchor', function(createHTML){
  return function anchor(name){
    return createHTML(this, 'a', 'name', name);
  }
});

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(15)('big', function(createHTML){
  return function big(){
    return createHTML(this, 'big', '', '');
  }
});

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(15)('blink', function(createHTML){
  return function blink(){
    return createHTML(this, 'blink', '', '');
  }
});

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(15)('bold', function(createHTML){
  return function bold(){
    return createHTML(this, 'b', '', '');
  }
});

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(15)('fixed', function(createHTML){
  return function fixed(){
    return createHTML(this, 'tt', '', '');
  }
});

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(15)('fontcolor', function(createHTML){
  return function fontcolor(color){
    return createHTML(this, 'font', 'color', color);
  }
});

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(15)('fontsize', function(createHTML){
  return function fontsize(size){
    return createHTML(this, 'font', 'size', size);
  }
});

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(15)('italics', function(createHTML){
  return function italics(){
    return createHTML(this, 'i', '', '');
  }
});

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(15)('link', function(createHTML){
  return function link(url){
    return createHTML(this, 'a', 'href', url);
  }
});

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(15)('small', function(createHTML){
  return function small(){
    return createHTML(this, 'small', '', '');
  }
});

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(15)('strike', function(createHTML){
  return function strike(){
    return createHTML(this, 'strike', '', '');
  }
});

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(15)('sub', function(createHTML){
  return function sub(){
    return createHTML(this, 'sub', '', '');
  }
});

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(15)('sup', function(createHTML){
  return function sup(){
    return createHTML(this, 'sup', '', '');
  }
});

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(0);

$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export     = __webpack_require__(0)
  , toObject    = __webpack_require__(9)
  , toPrimitive = __webpack_require__(21);

$export($export.P + $export.F * __webpack_require__(3)(function(){
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
}), 'Date', {
  toJSON: function toJSON(key){
    var O  = toObject(this)
      , pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(0)
  , fails   = __webpack_require__(3)
  , getTime = Date.prototype.getTime;

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto    = Date.prototype
  , INVALID_DATE = 'Invalid Date'
  , TO_STRING    = 'toString'
  , $toString    = DateProto[TO_STRING]
  , getTime      = DateProto.getTime;
if(new Date(NaN) + '' != INVALID_DATE){
  __webpack_require__(12)(DateProto, TO_STRING, function toString(){
    var value = getTime.call(this);
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(5)('toPrimitive')
  , proto        = Date.prototype;

if(!(TO_PRIMITIVE in proto))__webpack_require__(11)(proto, TO_PRIMITIVE, __webpack_require__(198));

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject    = __webpack_require__(1)
  , toPrimitive = __webpack_require__(21)
  , NUMBER      = 'number';

module.exports = function(hint){
  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(0);

$export($export.S, 'Array', {isArray: __webpack_require__(64)});

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx            = __webpack_require__(25)
  , $export        = __webpack_require__(0)
  , toObject       = __webpack_require__(9)
  , call           = __webpack_require__(99)
  , isArrayIter    = __webpack_require__(77)
  , toLength       = __webpack_require__(8)
  , createProperty = __webpack_require__(78)
  , getIterFn      = __webpack_require__(79);

$export($export.S + $export.F * !__webpack_require__(53)(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export        = __webpack_require__(0)
  , createProperty = __webpack_require__(78);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(3)(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export   = __webpack_require__(0)
  , toIObject = __webpack_require__(14)
  , arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(45) != Object || !__webpack_require__(20)(arrayJoin)), 'Array', {
  join: function join(separator){
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export    = __webpack_require__(0)
  , html       = __webpack_require__(65)
  , cof        = __webpack_require__(18)
  , toIndex    = __webpack_require__(34)
  , toLength   = __webpack_require__(8)
  , arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(3)(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export   = __webpack_require__(0)
  , aFunction = __webpack_require__(13)
  , toObject  = __webpack_require__(9)
  , fails     = __webpack_require__(3)
  , $sort     = [].sort
  , test      = [1, 2, 3];

$export($export.P + $export.F * (fails(function(){
  // IE8-
  test.sort(undefined);
}) || !fails(function(){
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(20)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn){
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export  = __webpack_require__(0)
  , $forEach = __webpack_require__(23)(0)
  , STRICT   = __webpack_require__(20)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */){
    return $forEach(this, callbackfn, arguments[1]);
  }
});

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(207);

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4)
  , isArray  = __webpack_require__(64)
  , SPECIES  = __webpack_require__(5)('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0)
  , $map    = __webpack_require__(23)(1);

$export($export.P + $export.F * !__webpack_require__(20)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */){
    return $map(this, callbackfn, arguments[1]);
  }
});

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0)
  , $filter = __webpack_require__(23)(2);

$export($export.P + $export.F * !__webpack_require__(20)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */){
    return $filter(this, callbackfn, arguments[1]);
  }
});

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0)
  , $some   = __webpack_require__(23)(3);

$export($export.P + $export.F * !__webpack_require__(20)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */){
    return $some(this, callbackfn, arguments[1]);
  }
});

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0)
  , $every  = __webpack_require__(23)(4);

$export($export.P + $export.F * !__webpack_require__(20)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */){
    return $every(this, callbackfn, arguments[1]);
  }
});

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0)
  , $reduce = __webpack_require__(100);

$export($export.P + $export.F * !__webpack_require__(20)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0)
  , $reduce = __webpack_require__(100);

$export($export.P + $export.F * !__webpack_require__(20)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export       = __webpack_require__(0)
  , $indexOf      = __webpack_require__(49)(false)
  , $native       = [].indexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(20)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export       = __webpack_require__(0)
  , toIObject     = __webpack_require__(14)
  , toInteger     = __webpack_require__(30)
  , toLength      = __webpack_require__(8)
  , $native       = [].lastIndexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(20)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
    // convert -0 to +0
    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
    if(index < 0)index = length + index;
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
    return -1;
  }
});

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', {copyWithin: __webpack_require__(101)});

__webpack_require__(43)('copyWithin');

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', {fill: __webpack_require__(80)});

__webpack_require__(43)('fill');

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(0)
  , $find   = __webpack_require__(23)(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(43)(KEY);

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(0)
  , $find   = __webpack_require__(23)(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(43)(KEY);

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(37)('Array');

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

var global            = __webpack_require__(2)
  , inheritIfRequired = __webpack_require__(68)
  , dP                = __webpack_require__(7).f
  , gOPN              = __webpack_require__(36).f
  , isRegExp          = __webpack_require__(52)
  , $flags            = __webpack_require__(54)
  , $RegExp           = global.RegExp
  , Base              = $RegExp
  , proto             = $RegExp.prototype
  , re1               = /a/g
  , re2               = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW       = new $RegExp(re1) !== re1;

if(__webpack_require__(6) && (!CORRECT_NEW || __webpack_require__(3)(function(){
  re2[__webpack_require__(5)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var tiRE = this instanceof $RegExp
      , piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function(key){
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  };
  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(12)(global, 'RegExp', $RegExp);
}

__webpack_require__(37)('RegExp');

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(103);
var anObject    = __webpack_require__(1)
  , $flags      = __webpack_require__(54)
  , DESCRIPTORS = __webpack_require__(6)
  , TO_STRING   = 'toString'
  , $toString   = /./[TO_STRING];

var define = function(fn){
  __webpack_require__(12)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if(__webpack_require__(3)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
  define(function toString(){
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if($toString.name != TO_STRING){
  define(function toString(){
    return $toString.call(this);
  });
}

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

// @@match logic
__webpack_require__(55)('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

// @@replace logic
__webpack_require__(55)('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

// @@search logic
__webpack_require__(55)('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

// @@split logic
__webpack_require__(55)('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = __webpack_require__(52)
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY            = __webpack_require__(32)
  , global             = __webpack_require__(2)
  , ctx                = __webpack_require__(25)
  , classof            = __webpack_require__(47)
  , $export            = __webpack_require__(0)
  , isObject           = __webpack_require__(4)
  , aFunction          = __webpack_require__(13)
  , anInstance         = __webpack_require__(38)
  , forOf              = __webpack_require__(44)
  , speciesConstructor = __webpack_require__(82)
  , task               = __webpack_require__(83).set
  , microtask          = __webpack_require__(84)()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[__webpack_require__(5)('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(39)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
__webpack_require__(40)($Promise, PROMISE);
__webpack_require__(37)(PROMISE);
Wrapper = __webpack_require__(24)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(53)(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(108);

// 23.4 WeakSet Objects
__webpack_require__(56)('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export      = __webpack_require__(0)
  , $typed       = __webpack_require__(57)
  , buffer       = __webpack_require__(85)
  , anObject     = __webpack_require__(1)
  , toIndex      = __webpack_require__(34)
  , toLength     = __webpack_require__(8)
  , isObject     = __webpack_require__(4)
  , ArrayBuffer  = __webpack_require__(2).ArrayBuffer
  , speciesConstructor = __webpack_require__(82)
  , $ArrayBuffer = buffer.ArrayBuffer
  , $DataView    = buffer.DataView
  , $isView      = $typed.ABV && ArrayBuffer.isView
  , $slice       = $ArrayBuffer.prototype.slice
  , VIEW         = $typed.VIEW
  , ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it){
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(3)(function(){
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end){
    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
    var len    = anObject(this).byteLength
      , first  = toIndex(start, len)
      , final  = toIndex(end === undefined ? len : end, len)
      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
      , viewS  = new $DataView(this)
      , viewT  = new $DataView(result)
      , index  = 0;
    while(first < final){
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(37)(ARRAY_BUFFER);

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
$export($export.G + $export.W + $export.F * !__webpack_require__(57).ABV, {
  DataView: __webpack_require__(85).DataView
});

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(26)('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export   = __webpack_require__(0)
  , aFunction = __webpack_require__(13)
  , anObject  = __webpack_require__(1)
  , rApply    = (__webpack_require__(2).Reflect || {}).apply
  , fApply    = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(3)(function(){
  rApply(function(){});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    var T = aFunction(target)
      , L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export    = __webpack_require__(0)
  , create     = __webpack_require__(35)
  , aFunction  = __webpack_require__(13)
  , anObject   = __webpack_require__(1)
  , isObject   = __webpack_require__(4)
  , fails      = __webpack_require__(3)
  , bind       = __webpack_require__(93)
  , rConstruct = (__webpack_require__(2).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function(){
  function F(){}
  return !(rConstruct(function(){}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function(){
  rConstruct(function(){});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      switch(args.length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = __webpack_require__(7)
  , $export     = __webpack_require__(0)
  , anObject    = __webpack_require__(1)
  , toPrimitive = __webpack_require__(21);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(3)(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = __webpack_require__(0)
  , gOPD     = __webpack_require__(16).f
  , anObject = __webpack_require__(1);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export  = __webpack_require__(0)
  , anObject = __webpack_require__(1);
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
__webpack_require__(74)(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = __webpack_require__(16)
  , getPrototypeOf = __webpack_require__(17)
  , has            = __webpack_require__(10)
  , $export        = __webpack_require__(0)
  , isObject       = __webpack_require__(4)
  , anObject       = __webpack_require__(1);

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = __webpack_require__(16)
  , $export  = __webpack_require__(0)
  , anObject = __webpack_require__(1);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = __webpack_require__(0)
  , getProto = __webpack_require__(17)
  , anObject = __webpack_require__(1);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export       = __webpack_require__(0)
  , anObject      = __webpack_require__(1)
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {ownKeys: __webpack_require__(109)});

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export            = __webpack_require__(0)
  , anObject           = __webpack_require__(1)
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = __webpack_require__(7)
  , gOPD           = __webpack_require__(16)
  , getPrototypeOf = __webpack_require__(17)
  , has            = __webpack_require__(10)
  , $export        = __webpack_require__(0)
  , createDesc     = __webpack_require__(28)
  , anObject       = __webpack_require__(1)
  , isObject       = __webpack_require__(4);

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = __webpack_require__(0)
  , setProto = __webpack_require__(66);

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export   = __webpack_require__(0)
  , $includes = __webpack_require__(49)(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(43)('includes');

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(0)
  , $at     = __webpack_require__(72)(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0)
  , $pad    = __webpack_require__(110);

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0)
  , $pad    = __webpack_require__(110);

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(41)('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
}, 'trimStart');

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(41)('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
}, 'trimEnd');

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export     = __webpack_require__(0)
  , defined     = __webpack_require__(19)
  , toLength    = __webpack_require__(8)
  , isRegExp    = __webpack_require__(52)
  , getFlags    = __webpack_require__(54)
  , RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function(regexp, string){
  this._r = regexp;
  this._s = string;
};

__webpack_require__(74)($RegExpStringIterator, 'RegExp String', function next(){
  var match = this._r.exec(this._s);
  return {value: match, done: match === null};
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp){
    defined(this);
    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
    var S     = String(this)
      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(61)('asyncIterator');

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(61)('observable');

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export        = __webpack_require__(0)
  , ownKeys        = __webpack_require__(109)
  , toIObject      = __webpack_require__(14)
  , gOPD           = __webpack_require__(16)
  , createProperty = __webpack_require__(78);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key;
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
    return result;
  }
});

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0)
  , $values = __webpack_require__(111)(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export  = __webpack_require__(0)
  , $entries = __webpack_require__(111)(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export         = __webpack_require__(0)
  , toObject        = __webpack_require__(9)
  , aFunction       = __webpack_require__(13)
  , $defineProperty = __webpack_require__(7);

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(6) && $export($export.P + __webpack_require__(58), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter){
    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
  }
});

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export         = __webpack_require__(0)
  , toObject        = __webpack_require__(9)
  , aFunction       = __webpack_require__(13)
  , $defineProperty = __webpack_require__(7);

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(6) && $export($export.P + __webpack_require__(58), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter){
    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
  }
});

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export                  = __webpack_require__(0)
  , toObject                 = __webpack_require__(9)
  , toPrimitive              = __webpack_require__(21)
  , getPrototypeOf           = __webpack_require__(17)
  , getOwnPropertyDescriptor = __webpack_require__(16).f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(6) && $export($export.P + __webpack_require__(58), 'Object', {
  __lookupGetter__: function __lookupGetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.get;
    } while(O = getPrototypeOf(O));
  }
});

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export                  = __webpack_require__(0)
  , toObject                 = __webpack_require__(9)
  , toPrimitive              = __webpack_require__(21)
  , getPrototypeOf           = __webpack_require__(17)
  , getOwnPropertyDescriptor = __webpack_require__(16).f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(6) && $export($export.P + __webpack_require__(58), 'Object', {
  __lookupSetter__: function __lookupSetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.set;
    } while(O = getPrototypeOf(O));
  }
});

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = __webpack_require__(0);

$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(112)('Map')});

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = __webpack_require__(0);

$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(112)('Set')});

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-global
var $export = __webpack_require__(0);

$export($export.S, 'System', {global: __webpack_require__(2)});

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(0)
  , cof     = __webpack_require__(18);

$export($export.S, 'Error', {
  isError: function isError(it){
    return cof(it) === 'Error';
  }
});

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  imulh: function imulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >> 16
      , v1 = $v >> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  umulh: function umulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >>> 16
      , v1 = $v >>> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

var metadata                  = __webpack_require__(27)
  , anObject                  = __webpack_require__(1)
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
}});

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

var metadata               = __webpack_require__(27)
  , anObject               = __webpack_require__(1)
  , toMetaKey              = metadata.key
  , getOrCreateMetadataMap = metadata.map
  , store                  = metadata.store;

metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
  if(metadataMap.size)return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
}});

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

var metadata               = __webpack_require__(27)
  , anObject               = __webpack_require__(1)
  , getPrototypeOf         = __webpack_require__(17)
  , ordinaryHasOwnMetadata = metadata.has
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

var ordinaryGetMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

var Set                     = __webpack_require__(106)
  , from                    = __webpack_require__(113)
  , metadata                = __webpack_require__(27)
  , anObject                = __webpack_require__(1)
  , getPrototypeOf          = __webpack_require__(17)
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

var ordinaryMetadataKeys = function(O, P){
  var oKeys  = ordinaryOwnMetadataKeys(O, P)
    , parent = getPrototypeOf(O);
  if(parent === null)return oKeys;
  var pKeys  = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

var metadata               = __webpack_require__(27)
  , anObject               = __webpack_require__(1)
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

var metadata                = __webpack_require__(27)
  , anObject                = __webpack_require__(1)
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

var metadata               = __webpack_require__(27)
  , anObject               = __webpack_require__(1)
  , getPrototypeOf         = __webpack_require__(17)
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

var ordinaryHasMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

var metadata               = __webpack_require__(27)
  , anObject               = __webpack_require__(1)
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

var metadata                  = __webpack_require__(27)
  , anObject                  = __webpack_require__(1)
  , aFunction                 = __webpack_require__(13)
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({metadata: function metadata(metadataKey, metadataValue){
  return function decorator(target, targetKey){
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
}});

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export   = __webpack_require__(0)
  , microtask = __webpack_require__(84)()
  , process   = __webpack_require__(2).process
  , isNode    = __webpack_require__(18)(process) == 'process';

$export($export.G, {
  asap: function asap(fn){
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export     = __webpack_require__(0)
  , global      = __webpack_require__(2)
  , core        = __webpack_require__(24)
  , microtask   = __webpack_require__(84)()
  , OBSERVABLE  = __webpack_require__(5)('observable')
  , aFunction   = __webpack_require__(13)
  , anObject    = __webpack_require__(1)
  , anInstance  = __webpack_require__(38)
  , redefineAll = __webpack_require__(39)
  , hide        = __webpack_require__(11)
  , forOf       = __webpack_require__(44)
  , RETURN      = forOf.RETURN;

var getMethod = function(fn){
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function(subscription){
  var cleanup = subscription._c;
  if(cleanup){
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function(subscription){
  return subscription._o === undefined;
};

var closeSubscription = function(subscription){
  if(!subscriptionClosed(subscription)){
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function(observer, subscriber){
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup      = subscriber(observer)
      , subscription = cleanup;
    if(cleanup != null){
      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch(e){
    observer.error(e);
    return;
  } if(subscriptionClosed(this))cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe(){ closeSubscription(this); }
});

var SubscriptionObserver = function(subscription){
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if(m)return m.call(observer, value);
      } catch(e){
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value){
    var subscription = this._s;
    if(subscriptionClosed(subscription))throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if(!m)throw value;
      value = m.call(observer, value);
    } catch(e){
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch(e){
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber){
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer){
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn){
    var that = this;
    return new (core.Promise || global.Promise)(function(resolve, reject){
      aFunction(fn);
      var subscription = that.subscribe({
        next : function(value){
          try {
            return fn(value);
          } catch(e){
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x){
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if(method){
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function(observer){
        return observable.subscribe(observer);
      });
    }
    return new C(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          try {
            if(forOf(x, false, function(it){
              observer.next(it);
              if(done)return RETURN;
            }) === RETURN)return;
          } catch(e){
            if(done)throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  },
  of: function of(){
    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          for(var i = 0; i < items.length; ++i){
            observer.next(items[i]);
            if(done)return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function(){ return this; });

$export($export.G, {Observable: $Observable});

__webpack_require__(37)('Observable');

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global     = __webpack_require__(2)
  , $export    = __webpack_require__(0)
  , invoke     = __webpack_require__(51)
  , partial    = __webpack_require__(290)
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var path      = __webpack_require__(291)
  , invoke    = __webpack_require__(51)
  , aFunction = __webpack_require__(13);
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0)
  , $task   = __webpack_require__(83);
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators    = __webpack_require__(81)
  , redefine      = __webpack_require__(12)
  , global        = __webpack_require__(2)
  , hide          = __webpack_require__(11)
  , Iterators     = __webpack_require__(42)
  , wks           = __webpack_require__(5)
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(59)))

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(296);
module.exports = __webpack_require__(24).RegExp.escape;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(0)
  , $re     = __webpack_require__(297)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});


/***/ }),
/* 297 */
/***/ (function(module, exports) {

module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.PtypoFont = exports.templateNames = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = __webpack_require__(299);

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* globals _ */
var templateNames = exports.templateNames = {
	ELZEVIR: 'elzevir.ptf',
	GROTESK: 'venus.ptf',
	FELL: 'john-fell.ptf',
	SPECTRAL: 'spectral.ptf'
};

var validTemplates = ['elzevir.ptf', 'venus.ptf', 'john-fell.ptf', 'spectral.ptf'];

var PtypoWorker = __webpack_require__(301);

var Ptypo = function () {
	function Ptypo(token) {
		_classCallCheck(this, Ptypo);

		this.token = token;
		this.fonts = {};
	}

	_createClass(Ptypo, [{
		key: 'createFont',
		value: function createFont(fontName, fontTemplate) {
			var font, data, json, worker;
			return regeneratorRuntime.async(function createFont$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(validTemplates.indexOf(fontTemplate) === -1)) {
								_context.next = 2;
								break;
							}

							throw new Error('template not found, please use a correct template Name');

						case 2:
							_context.next = 4;
							return regeneratorRuntime.awrap(fetch('https://tc1b6vq6o8.execute-api.eu-west-1.amazonaws.com/dev/fonts/' + fontTemplate, {
								method: 'GET',
								headers: {
									'Authorization': 'Bearer ' + this.token
								}
							}));

						case 4:
							font = _context.sent;
							_context.next = 7;
							return regeneratorRuntime.awrap(font.json());

						case 7:
							data = _context.sent;
							json = JSON.parse(data);
							worker = new PtypoWorker();
							return _context.abrupt('return', new Promise(function (resolve, reject) {
								var loadFontHandler = function loadFontHandler(e) {
									if (_typeof(e.data) !== 'object') {
										reject();
									}

									worker.removeEventListener('message', loadFontHandler);

									var fontInstance = new PtypoFont(worker, json, fontName);

									fontInstance.reset();
									resolve(fontInstance);
								};

								worker.addEventListener('message', loadFontHandler);

								worker.postMessage({
									type: 'font',
									name: fontName,
									data: data
								});
							}));

						case 11:
						case 'end':
							return _context.stop();
					}
				}
			}, null, this);
		}
	}]);

	return Ptypo;
}();

exports.default = Ptypo;

var PtypoFont = exports.PtypoFont = function () {
	function PtypoFont(worker, json, fontName) {
		var _this = this;

		_classCallCheck(this, PtypoFont);

		this.worker = worker;
		this.json = json;
		this.values = {};
		this.init = {};
		this.fontName = fontName;
		json.controls.forEach(function (control) {
			control.parameters.forEach(function (param) {
				_this.init[param.name] = param.init;
				_this.values[param.name] = param.init;
			});
		});
		this.glyphsSet = _lodash2.default.uniq(Object.keys(json.glyphs).map(function (key) {
			return String.fromCharCode(json.glyphs[key].unicode);
		}));
		this.worker.postMessage({
			type: 'subset',
			data: this.glyphsSet
		});

		this.worker.addEventListener('message', function (e) {
			if (e.data instanceof ArrayBuffer) {
				if (_this.otfFont) {
					document.fonts.delete(_this.otfFont);
				}

				_this.otfFont = new FontFace(_this.fontName, e.data);

				document.fonts.add(_this.otfFont);
			} else if (e.data.type === 'props') {
				_this.glyphProperties = e.data.result;
			}
		});
	}

	_createClass(PtypoFont, [{
		key: 'changeParams',
		value: function changeParams(paramObj) {
			var _this2 = this;

			_lodash2.default.forEach(paramObj, function (value, key) {
				_this2.values[key] = value;
			});
			this.createFont();
		}
	}, {
		key: 'createFont',
		value: function createFont() {
			this.worker.postMessage({
				type: 'update',
				data: this.values
			});
			this.worker.postMessage({
				type: 'getGlyphsProperties',
				data: {
					properties: ['advanceWidth']
				}
			});
			var _values = this.values,
			    xHeight = _values.xHeight,
			    capDelta = _values.capDelta,
			    ascender = _values.ascender,
			    descender = _values.descender;


			this.globalHeight = xHeight + Math.max(capDelta, ascender) - descender;
		}
	}, {
		key: 'changeParam',
		value: function changeParam(paramName, paramValue) {
			this.values[paramName] = paramValue;
			this.createFont();
		}
	}, {
		key: 'reset',
		value: function reset() {
			this.values = _lodash2.default.cloneDeep(this.init);
			this.createFont();
		}
	}]);

	return PtypoFont;
}();

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(59), __webpack_require__(300)(module)))

/***/ }),
/* 300 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
	return __webpack_require__(302)("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 41);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar freeGlobal = __webpack_require__(28);\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsNative = __webpack_require__(64),\n    getValue = __webpack_require__(69);\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Symbol = __webpack_require__(8),\n    getRawTag = __webpack_require__(65),\n    objectToString = __webpack_require__(66);\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(Buffer) {(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"plumin\"] = factory();\n\telse\n\t\troot[\"plumin\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar opentype = __webpack_require__(2);\n\tvar paper = __webpack_require__(36);\n\tvar Font = __webpack_require__(39);\n\tvar Glyph = __webpack_require__(40);\n\tvar Outline = __webpack_require__(41);\n\tvar Path = __webpack_require__(43);\n\tvar Node = __webpack_require__(44);\n\t\n\tpaper.PaperScope.prototype.Font = Font;\n\tpaper.PaperScope.prototype.Glyph = Glyph;\n\tpaper.PaperScope.prototype.Outline = Outline;\n\tpaper.PaperScope.prototype.Path = Path;\n\tpaper.PaperScope.prototype.Node = Node;\n\t\n\tpaper.opentype = opentype;\n\t\n\tmodule.exports = paper;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// opentype.js\n\t// https://github.com/nodebox/opentype.js\n\t// (c) 2015 Frederik De Bleser\n\t// opentype.js may be freely distributed under the MIT license.\n\t\n\t/* global DataView, Uint8Array, XMLHttpRequest  */\n\t\n\t'use strict';\n\t\n\tvar inflate = __webpack_require__(3);\n\t\n\tvar encoding = __webpack_require__(4);\n\tvar _font = __webpack_require__(5);\n\tvar glyph = __webpack_require__(15);\n\tvar parse = __webpack_require__(12);\n\tvar path = __webpack_require__(6);\n\tvar util = __webpack_require__(29);\n\t\n\tvar cmap = __webpack_require__(11);\n\tvar cff = __webpack_require__(13);\n\tvar fvar = __webpack_require__(31);\n\tvar glyf = __webpack_require__(32);\n\tvar gpos = __webpack_require__(33);\n\tvar gsub = __webpack_require__(25);\n\tvar head = __webpack_require__(17);\n\tvar hhea = __webpack_require__(18);\n\tvar hmtx = __webpack_require__(19);\n\tvar kern = __webpack_require__(34);\n\tvar ltag = __webpack_require__(20);\n\tvar loca = __webpack_require__(35);\n\tvar maxp = __webpack_require__(21);\n\tvar _name = __webpack_require__(22);\n\tvar os2 = __webpack_require__(23);\n\tvar post = __webpack_require__(24);\n\tvar meta = __webpack_require__(26);\n\t\n\t/**\n\t * The opentype library.\n\t * @namespace opentype\n\t */\n\t\n\t// File loaders /////////////////////////////////////////////////////////\n\t/**\n\t * Loads a font from a file. The callback throws an error message as the first parameter if it fails\n\t * and the font as an ArrayBuffer in the second parameter if it succeeds.\n\t * @param  {string} path - The path of the file\n\t * @param  {Function} callback - The function to call when the font load completes\n\t */\n\tfunction loadFromFile(path, callback) {\n\t    var fs = __webpack_require__(30);\n\t    fs.readFile(path, function(err, buffer) {\n\t        if (err) {\n\t            return callback(err.message);\n\t        }\n\t\n\t        callback(null, util.nodeBufferToArrayBuffer(buffer));\n\t    });\n\t}\n\t/**\n\t * Loads a font from a URL. The callback throws an error message as the first parameter if it fails\n\t * and the font as an ArrayBuffer in the second parameter if it succeeds.\n\t * @param  {string} url - The URL of the font file.\n\t * @param  {Function} callback - The function to call when the font load completes\n\t */\n\tfunction loadFromUrl(url, callback) {\n\t    var request = new XMLHttpRequest();\n\t    request.open('get', url, true);\n\t    request.responseType = 'arraybuffer';\n\t    request.onload = function() {\n\t        if (request.status !== 200) {\n\t            return callback('Font could not be loaded: ' + request.statusText);\n\t        }\n\t\n\t        return callback(null, request.response);\n\t    };\n\t\n\t    request.send();\n\t}\n\t\n\t// Table Directory Entries //////////////////////////////////////////////\n\t/**\n\t * Parses OpenType table entries.\n\t * @param  {DataView}\n\t * @param  {Number}\n\t * @return {Object[]}\n\t */\n\tfunction parseOpenTypeTableEntries(data, numTables) {\n\t    var tableEntries = [];\n\t    var p = 12;\n\t    for (var i = 0; i < numTables; i += 1) {\n\t        var tag = parse.getTag(data, p);\n\t        var checksum = parse.getULong(data, p + 4);\n\t        var offset = parse.getULong(data, p + 8);\n\t        var length = parse.getULong(data, p + 12);\n\t        tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});\n\t        p += 16;\n\t    }\n\t\n\t    return tableEntries;\n\t}\n\t\n\t/**\n\t * Parses WOFF table entries.\n\t * @param  {DataView}\n\t * @param  {Number}\n\t * @return {Object[]}\n\t */\n\tfunction parseWOFFTableEntries(data, numTables) {\n\t    var tableEntries = [];\n\t    var p = 44; // offset to the first table directory entry.\n\t    for (var i = 0; i < numTables; i += 1) {\n\t        var tag = parse.getTag(data, p);\n\t        var offset = parse.getULong(data, p + 4);\n\t        var compLength = parse.getULong(data, p + 8);\n\t        var origLength = parse.getULong(data, p + 12);\n\t        var compression;\n\t        if (compLength < origLength) {\n\t            compression = 'WOFF';\n\t        } else {\n\t            compression = false;\n\t        }\n\t\n\t        tableEntries.push({tag: tag, offset: offset, compression: compression,\n\t            compressedLength: compLength, originalLength: origLength});\n\t        p += 20;\n\t    }\n\t\n\t    return tableEntries;\n\t}\n\t\n\t/**\n\t * @typedef TableData\n\t * @type Object\n\t * @property {DataView} data - The DataView\n\t * @property {number} offset - The data offset.\n\t */\n\t\n\t/**\n\t * @param  {DataView}\n\t * @param  {Object}\n\t * @return {TableData}\n\t */\n\tfunction uncompressTable(data, tableEntry) {\n\t    if (tableEntry.compression === 'WOFF') {\n\t        var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n\t        var outBuffer = new Uint8Array(tableEntry.originalLength);\n\t        inflate(inBuffer, outBuffer);\n\t        if (outBuffer.byteLength !== tableEntry.originalLength) {\n\t            throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\\'t match recorded length');\n\t        }\n\t\n\t        var view = new DataView(outBuffer.buffer, 0);\n\t        return {data: view, offset: 0};\n\t    } else {\n\t        return {data: data, offset: tableEntry.offset};\n\t    }\n\t}\n\t\n\t// Public API ///////////////////////////////////////////////////////////\n\t\n\t/**\n\t * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n\t * Throws an error if the font could not be parsed.\n\t * @param  {ArrayBuffer}\n\t * @return {opentype.Font}\n\t */\n\tfunction parseBuffer(buffer) {\n\t    var indexToLocFormat;\n\t    var ltagTable;\n\t\n\t    // Since the constructor can also be called to create new fonts from scratch, we indicate this\n\t    // should be an empty font that we'll fill with our own data.\n\t    var font = new _font.Font({empty: true});\n\t\n\t    // OpenType fonts use big endian byte ordering.\n\t    // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n\t    // Instead we use DataViews where we can specify endianness.\n\t    var data = new DataView(buffer, 0);\n\t    var numTables;\n\t    var tableEntries = [];\n\t    var signature = parse.getTag(data, 0);\n\t    if (signature === String.fromCharCode(0, 1, 0, 0)) {\n\t        font.outlinesFormat = 'truetype';\n\t        numTables = parse.getUShort(data, 4);\n\t        tableEntries = parseOpenTypeTableEntries(data, numTables);\n\t    } else if (signature === 'OTTO') {\n\t        font.outlinesFormat = 'cff';\n\t        numTables = parse.getUShort(data, 4);\n\t        tableEntries = parseOpenTypeTableEntries(data, numTables);\n\t    } else if (signature === 'wOFF') {\n\t        var flavor = parse.getTag(data, 4);\n\t        if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n\t            font.outlinesFormat = 'truetype';\n\t        } else if (flavor === 'OTTO') {\n\t            font.outlinesFormat = 'cff';\n\t        } else {\n\t            throw new Error('Unsupported OpenType flavor ' + signature);\n\t        }\n\t\n\t        numTables = parse.getUShort(data, 12);\n\t        tableEntries = parseWOFFTableEntries(data, numTables);\n\t    } else {\n\t        throw new Error('Unsupported OpenType signature ' + signature);\n\t    }\n\t\n\t    var cffTableEntry;\n\t    var fvarTableEntry;\n\t    var glyfTableEntry;\n\t    var gposTableEntry;\n\t    var gsubTableEntry;\n\t    var hmtxTableEntry;\n\t    var kernTableEntry;\n\t    var locaTableEntry;\n\t    var nameTableEntry;\n\t    var metaTableEntry;\n\t\n\t    for (var i = 0; i < numTables; i += 1) {\n\t        var tableEntry = tableEntries[i];\n\t        var table;\n\t        switch (tableEntry.tag) {\n\t            case 'cmap':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.cmap = cmap.parse(table.data, table.offset);\n\t                font.encoding = new encoding.CmapEncoding(font.tables.cmap);\n\t                break;\n\t            case 'fvar':\n\t                fvarTableEntry = tableEntry;\n\t                break;\n\t            case 'head':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.head = head.parse(table.data, table.offset);\n\t                font.unitsPerEm = font.tables.head.unitsPerEm;\n\t                indexToLocFormat = font.tables.head.indexToLocFormat;\n\t                break;\n\t            case 'hhea':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.hhea = hhea.parse(table.data, table.offset);\n\t                font.ascender = font.tables.hhea.ascender;\n\t                font.descender = font.tables.hhea.descender;\n\t                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n\t                break;\n\t            case 'hmtx':\n\t                hmtxTableEntry = tableEntry;\n\t                break;\n\t            case 'ltag':\n\t                table = uncompressTable(data, tableEntry);\n\t                ltagTable = ltag.parse(table.data, table.offset);\n\t                break;\n\t            case 'maxp':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.maxp = maxp.parse(table.data, table.offset);\n\t                font.numGlyphs = font.tables.maxp.numGlyphs;\n\t                break;\n\t            case 'name':\n\t                nameTableEntry = tableEntry;\n\t                break;\n\t            case 'OS/2':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.os2 = os2.parse(table.data, table.offset);\n\t                break;\n\t            case 'post':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.post = post.parse(table.data, table.offset);\n\t                font.glyphNames = new encoding.GlyphNames(font.tables.post);\n\t                break;\n\t            case 'glyf':\n\t                glyfTableEntry = tableEntry;\n\t                break;\n\t            case 'loca':\n\t                locaTableEntry = tableEntry;\n\t                break;\n\t            case 'CFF ':\n\t                cffTableEntry = tableEntry;\n\t                break;\n\t            case 'kern':\n\t                kernTableEntry = tableEntry;\n\t                break;\n\t            case 'GPOS':\n\t                gposTableEntry = tableEntry;\n\t                break;\n\t            case 'GSUB':\n\t                gsubTableEntry = tableEntry;\n\t                break;\n\t            case 'meta':\n\t                metaTableEntry = tableEntry;\n\t                break;\n\t        }\n\t    }\n\t\n\t    var nameTable = uncompressTable(data, nameTableEntry);\n\t    font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);\n\t    font.names = font.tables.name;\n\t\n\t    if (glyfTableEntry && locaTableEntry) {\n\t        var shortVersion = indexToLocFormat === 0;\n\t        var locaTable = uncompressTable(data, locaTableEntry);\n\t        var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n\t        var glyfTable = uncompressTable(data, glyfTableEntry);\n\t        font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font);\n\t    } else if (cffTableEntry) {\n\t        var cffTable = uncompressTable(data, cffTableEntry);\n\t        cff.parse(cffTable.data, cffTable.offset, font);\n\t    } else {\n\t        throw new Error('Font doesn\\'t contain TrueType or CFF outlines.');\n\t    }\n\t\n\t    var hmtxTable = uncompressTable(data, hmtxTableEntry);\n\t    hmtx.parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);\n\t    encoding.addGlyphNames(font);\n\t\n\t    if (kernTableEntry) {\n\t        var kernTable = uncompressTable(data, kernTableEntry);\n\t        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n\t    } else {\n\t        font.kerningPairs = {};\n\t    }\n\t\n\t    if (gposTableEntry) {\n\t        var gposTable = uncompressTable(data, gposTableEntry);\n\t        gpos.parse(gposTable.data, gposTable.offset, font);\n\t    }\n\t\n\t    if (gsubTableEntry) {\n\t        var gsubTable = uncompressTable(data, gsubTableEntry);\n\t        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n\t    }\n\t\n\t    if (fvarTableEntry) {\n\t        var fvarTable = uncompressTable(data, fvarTableEntry);\n\t        font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);\n\t    }\n\t\n\t    if (metaTableEntry) {\n\t        var metaTable = uncompressTable(data, metaTableEntry);\n\t        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n\t        font.metas = font.tables.meta;\n\t    }\n\t\n\t    return font;\n\t}\n\t\n\t/**\n\t * Asynchronously load the font from a URL or a filesystem. When done, call the callback\n\t * with two arguments `(err, font)`. The `err` will be null on success,\n\t * the `font` is a Font object.\n\t * We use the node.js callback convention so that\n\t * opentype.js can integrate with frameworks like async.js.\n\t * @alias opentype.load\n\t * @param  {string} url - The URL of the font to load.\n\t * @param  {Function} callback - The callback.\n\t */\n\tfunction load(url, callback) {\n\t    var isNode = typeof window === 'undefined';\n\t    var loadFn = isNode ? loadFromFile : loadFromUrl;\n\t    loadFn(url, function(err, arrayBuffer) {\n\t        if (err) {\n\t            return callback(err);\n\t        }\n\t        var font;\n\t        try {\n\t            font = parseBuffer(arrayBuffer);\n\t        } catch (e) {\n\t            return callback(e, null);\n\t        }\n\t        return callback(null, font);\n\t    });\n\t}\n\t\n\t/**\n\t * Synchronously load the font from a URL or file.\n\t * When done, returns the font object or throws an error.\n\t * @alias opentype.loadSync\n\t * @param  {string} url - The URL of the font to load.\n\t * @return {opentype.Font}\n\t */\n\tfunction loadSync(url) {\n\t    var fs = __webpack_require__(30);\n\t    var buffer = fs.readFileSync(url);\n\t    return parseBuffer(util.nodeBufferToArrayBuffer(buffer));\n\t}\n\t\n\texports._parse = parse;\n\texports.Font = _font.Font;\n\texports.Glyph = glyph.Glyph;\n\texports.Path = path.Path;\n\texports.parse = parseBuffer;\n\texports.load = load;\n\texports.loadSync = loadSync;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tvar TINF_OK = 0;\n\tvar TINF_DATA_ERROR = -3;\n\t\n\tfunction Tree() {\n\t  this.table = new Uint16Array(16);   /* table of code length counts */\n\t  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n\t}\n\t\n\tfunction Data(source, dest) {\n\t  this.source = source;\n\t  this.sourceIndex = 0;\n\t  this.tag = 0;\n\t  this.bitcount = 0;\n\t  \n\t  this.dest = dest;\n\t  this.destLen = 0;\n\t  \n\t  this.ltree = new Tree();  /* dynamic length/symbol tree */\n\t  this.dtree = new Tree();  /* dynamic distance tree */\n\t}\n\t\n\t/* --------------------------------------------------- *\n\t * -- uninitialized global data (static structures) -- *\n\t * --------------------------------------------------- */\n\t\n\tvar sltree = new Tree();\n\tvar sdtree = new Tree();\n\t\n\t/* extra bits and base tables for length codes */\n\tvar length_bits = new Uint8Array(30);\n\tvar length_base = new Uint16Array(30);\n\t\n\t/* extra bits and base tables for distance codes */\n\tvar dist_bits = new Uint8Array(30);\n\tvar dist_base = new Uint16Array(30);\n\t\n\t/* special ordering of code length codes */\n\tvar clcidx = new Uint8Array([\n\t  16, 17, 18, 0, 8, 7, 9, 6,\n\t  10, 5, 11, 4, 12, 3, 13, 2,\n\t  14, 1, 15\n\t]);\n\t\n\t/* used by tinf_decode_trees, avoids allocations every call */\n\tvar code_tree = new Tree();\n\tvar lengths = new Uint8Array(288 + 32);\n\t\n\t/* ----------------------- *\n\t * -- utility functions -- *\n\t * ----------------------- */\n\t\n\t/* build extra bits and base tables */\n\tfunction tinf_build_bits_base(bits, base, delta, first) {\n\t  var i, sum;\n\t\n\t  /* build bits table */\n\t  for (i = 0; i < delta; ++i) bits[i] = 0;\n\t  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\t\n\t  /* build base table */\n\t  for (sum = first, i = 0; i < 30; ++i) {\n\t    base[i] = sum;\n\t    sum += 1 << bits[i];\n\t  }\n\t}\n\t\n\t/* build the fixed huffman trees */\n\tfunction tinf_build_fixed_trees(lt, dt) {\n\t  var i;\n\t\n\t  /* build fixed length tree */\n\t  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\t\n\t  lt.table[7] = 24;\n\t  lt.table[8] = 152;\n\t  lt.table[9] = 112;\n\t\n\t  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n\t  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n\t  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n\t  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\t\n\t  /* build fixed distance tree */\n\t  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\t\n\t  dt.table[5] = 32;\n\t\n\t  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n\t}\n\t\n\t/* given an array of code lengths, build a tree */\n\tvar offs = new Uint16Array(16);\n\t\n\tfunction tinf_build_tree(t, lengths, off, num) {\n\t  var i, sum;\n\t\n\t  /* clear code length count table */\n\t  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\t\n\t  /* scan symbol lengths, and sum code length counts */\n\t  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\t\n\t  t.table[0] = 0;\n\t\n\t  /* compute offset table for distribution sort */\n\t  for (sum = 0, i = 0; i < 16; ++i) {\n\t    offs[i] = sum;\n\t    sum += t.table[i];\n\t  }\n\t\n\t  /* create code->symbol translation table (symbols sorted by code) */\n\t  for (i = 0; i < num; ++i) {\n\t    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n\t  }\n\t}\n\t\n\t/* ---------------------- *\n\t * -- decode functions -- *\n\t * ---------------------- */\n\t\n\t/* get one bit from source stream */\n\tfunction tinf_getbit(d) {\n\t  /* check if tag is empty */\n\t  if (!d.bitcount--) {\n\t    /* load next tag */\n\t    d.tag = d.source[d.sourceIndex++];\n\t    d.bitcount = 7;\n\t  }\n\t\n\t  /* shift bit out of tag */\n\t  var bit = d.tag & 1;\n\t  d.tag >>>= 1;\n\t\n\t  return bit;\n\t}\n\t\n\t/* read a num bit value from a stream and add base */\n\tfunction tinf_read_bits(d, num, base) {\n\t  if (!num)\n\t    return base;\n\t\n\t  while (d.bitcount < 24) {\n\t    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n\t    d.bitcount += 8;\n\t  }\n\t\n\t  var val = d.tag & (0xffff >>> (16 - num));\n\t  d.tag >>>= num;\n\t  d.bitcount -= num;\n\t  return val + base;\n\t}\n\t\n\t/* given a data stream and a tree, decode a symbol */\n\tfunction tinf_decode_symbol(d, t) {\n\t  while (d.bitcount < 24) {\n\t    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n\t    d.bitcount += 8;\n\t  }\n\t  \n\t  var sum = 0, cur = 0, len = 0;\n\t  var tag = d.tag;\n\t\n\t  /* get more bits while code value is above sum */\n\t  do {\n\t    cur = 2 * cur + (tag & 1);\n\t    tag >>>= 1;\n\t    ++len;\n\t\n\t    sum += t.table[len];\n\t    cur -= t.table[len];\n\t  } while (cur >= 0);\n\t  \n\t  d.tag = tag;\n\t  d.bitcount -= len;\n\t\n\t  return t.trans[sum + cur];\n\t}\n\t\n\t/* given a data stream, decode dynamic trees from it */\n\tfunction tinf_decode_trees(d, lt, dt) {\n\t  var hlit, hdist, hclen;\n\t  var i, num, length;\n\t\n\t  /* get 5 bits HLIT (257-286) */\n\t  hlit = tinf_read_bits(d, 5, 257);\n\t\n\t  /* get 5 bits HDIST (1-32) */\n\t  hdist = tinf_read_bits(d, 5, 1);\n\t\n\t  /* get 4 bits HCLEN (4-19) */\n\t  hclen = tinf_read_bits(d, 4, 4);\n\t\n\t  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\t\n\t  /* read code lengths for code length alphabet */\n\t  for (i = 0; i < hclen; ++i) {\n\t    /* get 3 bits code length (0-7) */\n\t    var clen = tinf_read_bits(d, 3, 0);\n\t    lengths[clcidx[i]] = clen;\n\t  }\n\t\n\t  /* build code length tree */\n\t  tinf_build_tree(code_tree, lengths, 0, 19);\n\t\n\t  /* decode code lengths for the dynamic trees */\n\t  for (num = 0; num < hlit + hdist;) {\n\t    var sym = tinf_decode_symbol(d, code_tree);\n\t\n\t    switch (sym) {\n\t      case 16:\n\t        /* copy previous code length 3-6 times (read 2 bits) */\n\t        var prev = lengths[num - 1];\n\t        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n\t          lengths[num++] = prev;\n\t        }\n\t        break;\n\t      case 17:\n\t        /* repeat code length 0 for 3-10 times (read 3 bits) */\n\t        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n\t          lengths[num++] = 0;\n\t        }\n\t        break;\n\t      case 18:\n\t        /* repeat code length 0 for 11-138 times (read 7 bits) */\n\t        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n\t          lengths[num++] = 0;\n\t        }\n\t        break;\n\t      default:\n\t        /* values 0-15 represent the actual code lengths */\n\t        lengths[num++] = sym;\n\t        break;\n\t    }\n\t  }\n\t\n\t  /* build dynamic trees */\n\t  tinf_build_tree(lt, lengths, 0, hlit);\n\t  tinf_build_tree(dt, lengths, hlit, hdist);\n\t}\n\t\n\t/* ----------------------------- *\n\t * -- block inflate functions -- *\n\t * ----------------------------- */\n\t\n\t/* given a stream and two trees, inflate a block of data */\n\tfunction tinf_inflate_block_data(d, lt, dt) {\n\t  while (1) {\n\t    var sym = tinf_decode_symbol(d, lt);\n\t\n\t    /* check for end of block */\n\t    if (sym === 256) {\n\t      return TINF_OK;\n\t    }\n\t\n\t    if (sym < 256) {\n\t      d.dest[d.destLen++] = sym;\n\t    } else {\n\t      var length, dist, offs;\n\t      var i;\n\t\n\t      sym -= 257;\n\t\n\t      /* possibly get more bits from length code */\n\t      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\t\n\t      dist = tinf_decode_symbol(d, dt);\n\t\n\t      /* possibly get more bits from distance code */\n\t      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\t\n\t      /* copy match */\n\t      for (i = offs; i < offs + length; ++i) {\n\t        d.dest[d.destLen++] = d.dest[i];\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t/* inflate an uncompressed block of data */\n\tfunction tinf_inflate_uncompressed_block(d) {\n\t  var length, invlength;\n\t  var i;\n\t  \n\t  /* unread from bitbuffer */\n\t  while (d.bitcount > 8) {\n\t    d.sourceIndex--;\n\t    d.bitcount -= 8;\n\t  }\n\t\n\t  /* get length */\n\t  length = d.source[d.sourceIndex + 1];\n\t  length = 256 * length + d.source[d.sourceIndex];\n\t\n\t  /* get one's complement of length */\n\t  invlength = d.source[d.sourceIndex + 3];\n\t  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\t\n\t  /* check length */\n\t  if (length !== (~invlength & 0x0000ffff))\n\t    return TINF_DATA_ERROR;\n\t\n\t  d.sourceIndex += 4;\n\t\n\t  /* copy block */\n\t  for (i = length; i; --i)\n\t    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\t\n\t  /* make sure we start next block on a byte boundary */\n\t  d.bitcount = 0;\n\t\n\t  return TINF_OK;\n\t}\n\t\n\t/* inflate stream from source to dest */\n\tfunction tinf_uncompress(source, dest) {\n\t  var d = new Data(source, dest);\n\t  var bfinal, btype, res;\n\t\n\t  do {\n\t    /* read final block flag */\n\t    bfinal = tinf_getbit(d);\n\t\n\t    /* read block type (2 bits) */\n\t    btype = tinf_read_bits(d, 2, 0);\n\t\n\t    /* decompress block */\n\t    switch (btype) {\n\t      case 0:\n\t        /* decompress uncompressed block */\n\t        res = tinf_inflate_uncompressed_block(d);\n\t        break;\n\t      case 1:\n\t        /* decompress block with fixed huffman trees */\n\t        res = tinf_inflate_block_data(d, sltree, sdtree);\n\t        break;\n\t      case 2:\n\t        /* decompress block with dynamic huffman trees */\n\t        tinf_decode_trees(d, d.ltree, d.dtree);\n\t        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n\t        break;\n\t      default:\n\t        res = TINF_DATA_ERROR;\n\t    }\n\t\n\t    if (res !== TINF_OK)\n\t      throw new Error('Data error');\n\t\n\t  } while (!bfinal);\n\t\n\t  if (d.destLen < d.dest.length) {\n\t    if (typeof d.dest.slice === 'function')\n\t      return d.dest.slice(0, d.destLen);\n\t    else\n\t      return d.dest.subarray(0, d.destLen);\n\t  }\n\t  \n\t  return d.dest;\n\t}\n\t\n\t/* -------------------- *\n\t * -- initialization -- *\n\t * -------------------- */\n\t\n\t/* build fixed huffman trees */\n\ttinf_build_fixed_trees(sltree, sdtree);\n\t\n\t/* build extra bits and base tables */\n\ttinf_build_bits_base(length_bits, length_base, 4, 3);\n\ttinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\t\n\t/* fix a special case */\n\tlength_bits[28] = 0;\n\tlength_base[28] = 258;\n\t\n\tmodule.exports = tinf_uncompress;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t// Glyph encoding\n\t\n\t'use strict';\n\t\n\tvar cffStandardStrings = [\n\t    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n\t    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n\t    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n\t    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n\t    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n\t    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',\n\t    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',\n\t    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',\n\t    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',\n\t    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',\n\t    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',\n\t    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n\t    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',\n\t    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n\t    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',\n\t    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n\t    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',\n\t    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',\n\t    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',\n\t    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',\n\t    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',\n\t    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',\n\t    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',\n\t    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',\n\t    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n\t    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',\n\t    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n\t    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n\t    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n\t    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',\n\t    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',\n\t    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',\n\t    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',\n\t    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n\t    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',\n\t    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',\n\t    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',\n\t    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',\n\t    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',\n\t    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',\n\t    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',\n\t    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];\n\t\n\tvar cffStandardEncoding = [\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n\t    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n\t    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n\t    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n\t    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n\t    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n\t    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n\t    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n\t    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n\t    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n\t    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n\t    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n\t    'lslash', 'oslash', 'oe', 'germandbls'];\n\t\n\tvar cffExpertEncoding = [\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n\t    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n\t    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n\t    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n\t    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n\t    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n\t    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n\t    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n\t    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n\t    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n\t    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n\t    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n\t    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n\t    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n\t    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n\t    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n\t    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n\t    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n\t    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n\t    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n\t    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n\t    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n\t    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\t\n\tvar standardNames = [\n\t    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n\t    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n\t    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n\t    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n\t    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n\t    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n\t    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n\t    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n\t    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n\t    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n\t    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n\t    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n\t    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n\t    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n\t    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n\t    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n\t    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n\t    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n\t    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n\t    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n\t    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n\t    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n\t    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n\t    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n\t    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\t\n\t/**\n\t * This is the encoding used for fonts created from scratch.\n\t * It loops through all glyphs and finds the appropriate unicode value.\n\t * Since it's linear time, other encodings will be faster.\n\t * @exports opentype.DefaultEncoding\n\t * @class\n\t * @constructor\n\t * @param {opentype.Font}\n\t */\n\tfunction DefaultEncoding(font) {\n\t    this.font = font;\n\t}\n\t\n\tDefaultEncoding.prototype.charToGlyphIndex = function(c) {\n\t    var code = c.charCodeAt(0);\n\t    var glyphs = this.font.glyphs;\n\t    if (glyphs) {\n\t        for (var i = 0; i < glyphs.length; i += 1) {\n\t            var glyph = glyphs.get(i);\n\t            for (var j = 0; j < glyph.unicodes.length; j += 1) {\n\t                if (glyph.unicodes[j] === code) {\n\t                    return i;\n\t                }\n\t            }\n\t        }\n\t    } else {\n\t        return null;\n\t    }\n\t};\n\t\n\t/**\n\t * @exports opentype.CmapEncoding\n\t * @class\n\t * @constructor\n\t * @param {Object} cmap - a object with the cmap encoded data\n\t */\n\tfunction CmapEncoding(cmap) {\n\t    this.cmap = cmap;\n\t}\n\t\n\t/**\n\t * @param  {string} c - the character\n\t * @return {number} The glyph index.\n\t */\n\tCmapEncoding.prototype.charToGlyphIndex = function(c) {\n\t    return this.cmap.glyphIndexMap[c.charCodeAt(0)] || 0;\n\t};\n\t\n\t/**\n\t * @exports opentype.CffEncoding\n\t * @class\n\t * @constructor\n\t * @param {string} encoding - The encoding\n\t * @param {Array} charset - The charcater set.\n\t */\n\tfunction CffEncoding(encoding, charset) {\n\t    this.encoding = encoding;\n\t    this.charset = charset;\n\t}\n\t\n\t/**\n\t * @param  {string} s - The character\n\t * @return {number} The index.\n\t */\n\tCffEncoding.prototype.charToGlyphIndex = function(s) {\n\t    var code = s.charCodeAt(0);\n\t    var charName = this.encoding[code];\n\t    return this.charset.indexOf(charName);\n\t};\n\t\n\t/**\n\t * @exports opentype.GlyphNames\n\t * @class\n\t * @constructor\n\t * @param {Object} post\n\t */\n\tfunction GlyphNames(post) {\n\t    var i;\n\t    switch (post.version) {\n\t        case 1:\n\t            this.names = exports.standardNames.slice();\n\t            break;\n\t        case 2:\n\t            this.names = new Array(post.numberOfGlyphs);\n\t            for (i = 0; i < post.numberOfGlyphs; i++) {\n\t                if (post.glyphNameIndex[i] < exports.standardNames.length) {\n\t                    this.names[i] = exports.standardNames[post.glyphNameIndex[i]];\n\t                } else {\n\t                    this.names[i] = post.names[post.glyphNameIndex[i] - exports.standardNames.length];\n\t                }\n\t            }\n\t\n\t            break;\n\t        case 2.5:\n\t            this.names = new Array(post.numberOfGlyphs);\n\t            for (i = 0; i < post.numberOfGlyphs; i++) {\n\t                this.names[i] = exports.standardNames[i + post.glyphNameIndex[i]];\n\t            }\n\t\n\t            break;\n\t        case 3:\n\t            this.names = [];\n\t            break;\n\t    }\n\t}\n\t\n\t/**\n\t * Gets the index of a glyph by name.\n\t * @param  {string} name - The glyph name\n\t * @return {number} The index\n\t */\n\tGlyphNames.prototype.nameToGlyphIndex = function(name) {\n\t    return this.names.indexOf(name);\n\t};\n\t\n\t/**\n\t * @param  {number} gid\n\t * @return {string}\n\t */\n\tGlyphNames.prototype.glyphIndexToName = function(gid) {\n\t    return this.names[gid];\n\t};\n\t\n\t/**\n\t * @alias opentype.addGlyphNames\n\t * @param {opentype.Font}\n\t */\n\tfunction addGlyphNames(font) {\n\t    var glyph;\n\t    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n\t    var charCodes = Object.keys(glyphIndexMap);\n\t\n\t    for (var i = 0; i < charCodes.length; i += 1) {\n\t        var c = charCodes[i];\n\t        var glyphIndex = glyphIndexMap[c];\n\t        glyph = font.glyphs.get(glyphIndex);\n\t        glyph.addUnicode(parseInt(c));\n\t    }\n\t\n\t    for (i = 0; i < font.glyphs.length; i += 1) {\n\t        glyph = font.glyphs.get(i);\n\t        if (font.cffEncoding) {\n\t            glyph.name = font.cffEncoding.charset[i];\n\t        } else if (font.glyphNames.names) {\n\t            glyph.name = font.glyphNames.glyphIndexToName(i);\n\t        }\n\t    }\n\t}\n\t\n\texports.cffStandardStrings = cffStandardStrings;\n\texports.cffStandardEncoding = cffStandardEncoding;\n\texports.cffExpertEncoding = cffExpertEncoding;\n\texports.standardNames = standardNames;\n\texports.DefaultEncoding = DefaultEncoding;\n\texports.CmapEncoding = CmapEncoding;\n\texports.CffEncoding = CffEncoding;\n\texports.GlyphNames = GlyphNames;\n\texports.addGlyphNames = addGlyphNames;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The Font object\n\t\n\t'use strict';\n\t\n\tvar path = __webpack_require__(6);\n\tvar sfnt = __webpack_require__(7);\n\tvar encoding = __webpack_require__(4);\n\tvar glyphset = __webpack_require__(14);\n\tvar Substitution = __webpack_require__(27);\n\tvar util = __webpack_require__(29);\n\t\n\t/**\n\t * @typedef FontOptions\n\t * @type Object\n\t * @property {Boolean} empty - whether to create a new empty font\n\t * @property {string} familyName\n\t * @property {string} styleName\n\t * @property {string=} fullName\n\t * @property {string=} postScriptName\n\t * @property {string=} designer\n\t * @property {string=} designerURL\n\t * @property {string=} manufacturer\n\t * @property {string=} manufacturerURL\n\t * @property {string=} license\n\t * @property {string=} licenseURL\n\t * @property {string=} version\n\t * @property {string=} description\n\t * @property {string=} copyright\n\t * @property {string=} trademark\n\t * @property {Number} unitsPerEm\n\t * @property {Number} ascender\n\t * @property {Number} descender\n\t * @property {Number} createdTimestamp\n\t * @property {string=} weightClass\n\t * @property {string=} widthClass\n\t * @property {string=} fsSelection\n\t */\n\t\n\t/**\n\t * A Font represents a loaded OpenType font file.\n\t * It contains a set of glyphs and methods to draw text on a drawing context,\n\t * or to get a path representing the text.\n\t * @exports opentype.Font\n\t * @class\n\t * @param {FontOptions}\n\t * @constructor\n\t */\n\tfunction Font(options) {\n\t    options = options || {};\n\t\n\t    if (!options.empty) {\n\t        // Check that we've provided the minimum set of names.\n\t        util.checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');\n\t        util.checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');\n\t        util.checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n\t        util.checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');\n\t        util.checkArgument(options.descender, 'When creating a new Font object, descender is required.');\n\t        util.checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');\n\t\n\t        // OS X will complain if the names are empty, so we put a single space everywhere by default.\n\t        this.names = {\n\t            fontFamily: {en: options.familyName || ' '},\n\t            fontSubfamily: {en: options.styleName || ' '},\n\t            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},\n\t            postScriptName: {en: options.postScriptName || options.familyName + options.styleName},\n\t            designer: {en: options.designer || ' '},\n\t            designerURL: {en: options.designerURL || ' '},\n\t            manufacturer: {en: options.manufacturer || ' '},\n\t            manufacturerURL: {en: options.manufacturerURL || ' '},\n\t            license: {en: options.license || ' '},\n\t            licenseURL: {en: options.licenseURL || ' '},\n\t            version: {en: options.version || 'Version 0.1'},\n\t            description: {en: options.description || ' '},\n\t            copyright: {en: options.copyright || ' '},\n\t            trademark: {en: options.trademark || ' '}\n\t        };\n\t        this.unitsPerEm = options.unitsPerEm || 1000;\n\t        this.ascender = options.ascender;\n\t        this.descender = options.descender;\n\t        this.createdTimestamp = options.createdTimestamp;\n\t        this.tables = { os2: {\n\t            usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n\t            usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n\t            fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n\t        } };\n\t    }\n\t\n\t    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n\t    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n\t    this.encoding = new encoding.DefaultEncoding(this);\n\t    this.substitution = new Substitution(this);\n\t    this.tables = this.tables || {};\n\t}\n\t\n\t/**\n\t * Check if the font has a glyph for the given character.\n\t * @param  {string}\n\t * @return {Boolean}\n\t */\n\tFont.prototype.hasChar = function(c) {\n\t    return this.encoding.charToGlyphIndex(c) !== null;\n\t};\n\t\n\t/**\n\t * Convert the given character to a single glyph index.\n\t * Note that this function assumes that there is a one-to-one mapping between\n\t * the given character and a glyph; for complex scripts this might not be the case.\n\t * @param  {string}\n\t * @return {Number}\n\t */\n\tFont.prototype.charToGlyphIndex = function(s) {\n\t    return this.encoding.charToGlyphIndex(s);\n\t};\n\t\n\t/**\n\t * Convert the given character to a single Glyph object.\n\t * Note that this function assumes that there is a one-to-one mapping between\n\t * the given character and a glyph; for complex scripts this might not be the case.\n\t * @param  {string}\n\t * @return {opentype.Glyph}\n\t */\n\tFont.prototype.charToGlyph = function(c) {\n\t    var glyphIndex = this.charToGlyphIndex(c);\n\t    var glyph = this.glyphs.get(glyphIndex);\n\t    if (!glyph) {\n\t        // .notdef\n\t        glyph = this.glyphs.get(0);\n\t    }\n\t\n\t    return glyph;\n\t};\n\t\n\t/**\n\t * Convert the given text to a list of Glyph objects.\n\t * Note that there is no strict one-to-one mapping between characters and\n\t * glyphs, so the list of returned glyphs can be larger or smaller than the\n\t * length of the given string.\n\t * @param  {string}\n\t * @return {opentype.Glyph[]}\n\t */\n\tFont.prototype.stringToGlyphs = function(s) {\n\t    var glyphs = [];\n\t    for (var i = 0; i < s.length; i += 1) {\n\t        var c = s[i];\n\t        glyphs.push(this.charToGlyph(c));\n\t    }\n\t\n\t    return glyphs;\n\t};\n\t\n\t/**\n\t * @param  {string}\n\t * @return {Number}\n\t */\n\tFont.prototype.nameToGlyphIndex = function(name) {\n\t    return this.glyphNames.nameToGlyphIndex(name);\n\t};\n\t\n\t/**\n\t * @param  {string}\n\t * @return {opentype.Glyph}\n\t */\n\tFont.prototype.nameToGlyph = function(name) {\n\t    var glyphIndex = this.nametoGlyphIndex(name);\n\t    var glyph = this.glyphs.get(glyphIndex);\n\t    if (!glyph) {\n\t        // .notdef\n\t        glyph = this.glyphs.get(0);\n\t    }\n\t\n\t    return glyph;\n\t};\n\t\n\t/**\n\t * @param  {Number}\n\t * @return {String}\n\t */\n\tFont.prototype.glyphIndexToName = function(gid) {\n\t    if (!this.glyphNames.glyphIndexToName) {\n\t        return '';\n\t    }\n\t\n\t    return this.glyphNames.glyphIndexToName(gid);\n\t};\n\t\n\t/**\n\t * Retrieve the value of the kerning pair between the left glyph (or its index)\n\t * and the right glyph (or its index). If no kerning pair is found, return 0.\n\t * The kerning value gets added to the advance width when calculating the spacing\n\t * between glyphs.\n\t * @param  {opentype.Glyph} leftGlyph\n\t * @param  {opentype.Glyph} rightGlyph\n\t * @return {Number}\n\t */\n\tFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n\t    leftGlyph = leftGlyph.index || leftGlyph;\n\t    rightGlyph = rightGlyph.index || rightGlyph;\n\t    var gposKerning = this.getGposKerningValue;\n\t    return gposKerning ? gposKerning(leftGlyph, rightGlyph) :\n\t        (this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0);\n\t};\n\t\n\t/**\n\t * @typedef GlyphRenderOptions\n\t * @type Object\n\t * @property {boolean} [kerning] - whether to include kerning values\n\t */\n\t\n\t/**\n\t * Helper function that invokes the given callback for each glyph in the given text.\n\t * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n\t * @param {string} text - The text to apply.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @param  {Function} callback\n\t */\n\tFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 72;\n\t    options = options || {};\n\t    var kerning = options.kerning === undefined ? true : options.kerning;\n\t    var fontScale = 1 / this.unitsPerEm * fontSize;\n\t    var glyphs = this.stringToGlyphs(text);\n\t    for (var i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs[i];\n\t        callback(glyph, x, y, fontSize, options);\n\t        if (glyph.advanceWidth) {\n\t            x += glyph.advanceWidth * fontScale;\n\t        }\n\t\n\t        if (kerning && i < glyphs.length - 1) {\n\t            var kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);\n\t            x += kerningValue * fontScale;\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Create a Path object that represents the given text.\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @return {opentype.Path}\n\t */\n\tFont.prototype.getPath = function(text, x, y, fontSize, options) {\n\t    var fullPath = new path.Path();\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        var glyphPath = glyph.getPath(gX, gY, gFontSize);\n\t        fullPath.extend(glyphPath);\n\t    });\n\t\n\t    return fullPath;\n\t};\n\t\n\t/**\n\t * Create an array of Path objects that represent the glyps of a given text.\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @return {opentype.Path[]}\n\t */\n\tFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n\t    var glyphPaths = [];\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        var glyphPath = glyph.getPath(gX, gY, gFontSize);\n\t        glyphPaths.push(glyphPath);\n\t    });\n\t\n\t    return glyphPaths;\n\t};\n\t\n\t/**\n\t * Draw the text on the given drawing context.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t */\n\tFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n\t    this.getPath(text, x, y, fontSize, options).draw(ctx);\n\t};\n\t\n\t/**\n\t * Draw the points of all glyphs in the text.\n\t * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n\t * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param {string} text - The text to create.\n\t * @param {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param {GlyphRenderOptions=} options\n\t */\n\tFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        glyph.drawPoints(ctx, gX, gY, gFontSize);\n\t    });\n\t};\n\t\n\t/**\n\t * Draw lines indicating important font measurements for all glyphs in the text.\n\t * Black lines indicate the origin of the coordinate system (point 0,0).\n\t * Blue lines indicate the glyph bounding box.\n\t * Green line indicates the advance width of the glyph.\n\t * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param {string} text - The text to create.\n\t * @param {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param {GlyphRenderOptions=} options\n\t */\n\tFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n\t    });\n\t};\n\t\n\t/**\n\t * @param  {string}\n\t * @return {string}\n\t */\n\tFont.prototype.getEnglishName = function(name) {\n\t    var translations = this.names[name];\n\t    if (translations) {\n\t        return translations.en;\n\t    }\n\t};\n\t\n\t/**\n\t * Validate\n\t */\n\tFont.prototype.validate = function() {\n\t    var warnings = [];\n\t    var _this = this;\n\t\n\t    function assert(predicate, message) {\n\t        if (!predicate) {\n\t            warnings.push(message);\n\t        }\n\t    }\n\t\n\t    function assertNamePresent(name) {\n\t        var englishName = _this.getEnglishName(name);\n\t        assert(englishName && englishName.trim().length > 0,\n\t               'No English ' + name + ' specified.');\n\t    }\n\t\n\t    // Identification information\n\t    assertNamePresent('fontFamily');\n\t    assertNamePresent('weightName');\n\t    assertNamePresent('manufacturer');\n\t    assertNamePresent('copyright');\n\t    assertNamePresent('version');\n\t\n\t    // Dimension information\n\t    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n\t};\n\t\n\t/**\n\t * Convert the font object to a SFNT data structure.\n\t * This structure contains all the necessary tables and metadata to create a binary OTF file.\n\t * @return {opentype.Table}\n\t */\n\tFont.prototype.toTables = function() {\n\t    return sfnt.fontToTable(this);\n\t};\n\t/**\n\t * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n\t */\n\tFont.prototype.toBuffer = function() {\n\t    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n\t    return this.toArrayBuffer();\n\t};\n\t/**\n\t * Converts a `opentype.Font` into an `ArrayBuffer`\n\t * @return {ArrayBuffer}\n\t */\n\tFont.prototype.toArrayBuffer = function() {\n\t    var sfntTable = this.toTables();\n\t    var bytes = sfntTable.encode();\n\t    var buffer = new ArrayBuffer(bytes.length);\n\t    var intArray = new Uint8Array(buffer);\n\t    for (var i = 0; i < bytes.length; i++) {\n\t        intArray[i] = bytes[i];\n\t    }\n\t\n\t    return buffer;\n\t};\n\t\n\t/**\n\t * Initiate a download of the OpenType font.\n\t */\n\tFont.prototype.download = function() {\n\t    var familyName = this.getEnglishName('fontFamily');\n\t    var styleName = this.getEnglishName('fontSubfamily');\n\t    var fileName = familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n\t    var arrayBuffer = this.toArrayBuffer();\n\t\n\t    if (util.isBrowser()) {\n\t        window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n\t        window.requestFileSystem(window.TEMPORARY, arrayBuffer.byteLength, function(fs) {\n\t            fs.root.getFile(fileName, {create: true}, function(fileEntry) {\n\t                fileEntry.createWriter(function(writer) {\n\t                    var dataView = new DataView(arrayBuffer);\n\t                    var blob = new Blob([dataView], {type: 'font/opentype'});\n\t                    writer.write(blob);\n\t\n\t                    writer.addEventListener('writeend', function() {\n\t                        // Navigating to the file will download it.\n\t                        location.href = fileEntry.toURL();\n\t                    }, false);\n\t                });\n\t            });\n\t        },\n\t        function(err) {\n\t            throw new Error(err.name + ': ' + err.message);\n\t        });\n\t    } else {\n\t        var fs = __webpack_require__(30);\n\t        var buffer = util.arrayBufferToNodeBuffer(arrayBuffer);\n\t        fs.writeFileSync(fileName, buffer);\n\t    }\n\t};\n\t/**\n\t * @private\n\t */\n\tFont.prototype.fsSelectionValues = {\n\t    ITALIC:              0x001, //1\n\t    UNDERSCORE:          0x002, //2\n\t    NEGATIVE:            0x004, //4\n\t    OUTLINED:            0x008, //8\n\t    STRIKEOUT:           0x010, //16\n\t    BOLD:                0x020, //32\n\t    REGULAR:             0x040, //64\n\t    USER_TYPO_METRICS:   0x080, //128\n\t    WWS:                 0x100, //256\n\t    OBLIQUE:             0x200  //512\n\t};\n\t\n\t/**\n\t * @private\n\t */\n\tFont.prototype.usWidthClasses = {\n\t    ULTRA_CONDENSED: 1,\n\t    EXTRA_CONDENSED: 2,\n\t    CONDENSED: 3,\n\t    SEMI_CONDENSED: 4,\n\t    MEDIUM: 5,\n\t    SEMI_EXPANDED: 6,\n\t    EXPANDED: 7,\n\t    EXTRA_EXPANDED: 8,\n\t    ULTRA_EXPANDED: 9\n\t};\n\t\n\t/**\n\t * @private\n\t */\n\tFont.prototype.usWeightClasses = {\n\t    THIN: 100,\n\t    EXTRA_LIGHT: 200,\n\t    LIGHT: 300,\n\t    NORMAL: 400,\n\t    MEDIUM: 500,\n\t    SEMI_BOLD: 600,\n\t    BOLD: 700,\n\t    EXTRA_BOLD: 800,\n\t    BLACK:    900\n\t};\n\t\n\texports.Font = Font;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// Geometric objects\n\t\n\t'use strict';\n\t\n\t/**\n\t * A bézier path containing a set of path commands similar to a SVG path.\n\t * Paths can be drawn on a context using `draw`.\n\t * @exports opentype.Path\n\t * @class\n\t * @constructor\n\t */\n\tfunction Path() {\n\t    this.commands = [];\n\t    this.fill = 'black';\n\t    this.stroke = null;\n\t    this.strokeWidth = 1;\n\t}\n\t\n\t/**\n\t * @param  {number} x\n\t * @param  {number} y\n\t */\n\tPath.prototype.moveTo = function(x, y) {\n\t    this.commands.push({\n\t        type: 'M',\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\t\n\t/**\n\t * @param  {number} x\n\t * @param  {number} y\n\t */\n\tPath.prototype.lineTo = function(x, y) {\n\t    this.commands.push({\n\t        type: 'L',\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\t\n\t/**\n\t * Draws cubic curve\n\t * @function\n\t * curveTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control 1\n\t * @param  {number} y1 - y of control 1\n\t * @param  {number} x2 - x of control 2\n\t * @param  {number} y2 - y of control 2\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t */\n\t\n\t/**\n\t * Draws cubic curve\n\t * @function\n\t * bezierCurveTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control 1\n\t * @param  {number} y1 - y of control 1\n\t * @param  {number} x2 - x of control 2\n\t * @param  {number} y2 - y of control 2\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t * @see curveTo\n\t */\n\tPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n\t    this.commands.push({\n\t        type: 'C',\n\t        x1: x1,\n\t        y1: y1,\n\t        x2: x2,\n\t        y2: y2,\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\t\n\t/**\n\t * Draws quadratic curve\n\t * @function\n\t * quadraticCurveTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control\n\t * @param  {number} y1 - y of control\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t */\n\t\n\t/**\n\t * Draws quadratic curve\n\t * @function\n\t * quadTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control\n\t * @param  {number} y1 - y of control\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t */\n\tPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n\t    this.commands.push({\n\t        type: 'Q',\n\t        x1: x1,\n\t        y1: y1,\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\t\n\t/**\n\t * Closes the path\n\t * @function closePath\n\t * @memberof opentype.Path.prototype\n\t */\n\t\n\t/**\n\t * Close the path\n\t * @function close\n\t * @memberof opentype.Path.prototype\n\t */\n\tPath.prototype.close = Path.prototype.closePath = function() {\n\t    this.commands.push({\n\t        type: 'Z'\n\t    });\n\t};\n\t\n\t/**\n\t * Add the given path or list of commands to the commands of this path.\n\t * @param  {Array}\n\t */\n\tPath.prototype.extend = function(pathOrCommands) {\n\t    if (pathOrCommands.commands) {\n\t        pathOrCommands = pathOrCommands.commands;\n\t    }\n\t\n\t    Array.prototype.push.apply(this.commands, pathOrCommands);\n\t};\n\t\n\t/**\n\t * Draw the path to a 2D context.\n\t * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.\n\t */\n\tPath.prototype.draw = function(ctx) {\n\t    ctx.beginPath();\n\t    for (var i = 0; i < this.commands.length; i += 1) {\n\t        var cmd = this.commands[i];\n\t        if (cmd.type === 'M') {\n\t            ctx.moveTo(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'L') {\n\t            ctx.lineTo(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'C') {\n\t            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Q') {\n\t            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Z') {\n\t            ctx.closePath();\n\t        }\n\t    }\n\t\n\t    if (this.fill) {\n\t        ctx.fillStyle = this.fill;\n\t        ctx.fill();\n\t    }\n\t\n\t    if (this.stroke) {\n\t        ctx.strokeStyle = this.stroke;\n\t        ctx.lineWidth = this.strokeWidth;\n\t        ctx.stroke();\n\t    }\n\t};\n\t\n\t/**\n\t * Convert the Path to a string of path data instructions\n\t * See http://www.w3.org/TR/SVG/paths.html#PathData\n\t * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n\t * @return {string}\n\t */\n\tPath.prototype.toPathData = function(decimalPlaces) {\n\t    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\t\n\t    function floatToString(v) {\n\t        if (Math.round(v) === v) {\n\t            return '' + Math.round(v);\n\t        } else {\n\t            return v.toFixed(decimalPlaces);\n\t        }\n\t    }\n\t\n\t    function packValues() {\n\t        var s = '';\n\t        for (var i = 0; i < arguments.length; i += 1) {\n\t            var v = arguments[i];\n\t            if (v >= 0 && i > 0) {\n\t                s += ' ';\n\t            }\n\t\n\t            s += floatToString(v);\n\t        }\n\t\n\t        return s;\n\t    }\n\t\n\t    var d = '';\n\t    for (var i = 0; i < this.commands.length; i += 1) {\n\t        var cmd = this.commands[i];\n\t        if (cmd.type === 'M') {\n\t            d += 'M' + packValues(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'L') {\n\t            d += 'L' + packValues(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'C') {\n\t            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Q') {\n\t            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Z') {\n\t            d += 'Z';\n\t        }\n\t    }\n\t\n\t    return d;\n\t};\n\t\n\t/**\n\t * Convert the path to an SVG <path> element, as a string.\n\t * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n\t * @return {string}\n\t */\n\tPath.prototype.toSVG = function(decimalPlaces) {\n\t    var svg = '<path d=\"';\n\t    svg += this.toPathData(decimalPlaces);\n\t    svg += '\"';\n\t    if (this.fill && this.fill !== 'black') {\n\t        if (this.fill === null) {\n\t            svg += ' fill=\"none\"';\n\t        } else {\n\t            svg += ' fill=\"' + this.fill + '\"';\n\t        }\n\t    }\n\t\n\t    if (this.stroke) {\n\t        svg += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n\t    }\n\t\n\t    svg += '/>';\n\t    return svg;\n\t};\n\t\n\texports.Path = Path;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `sfnt` wrapper provides organization for the tables in the font.\n\t// It is the top-level data structure in a font.\n\t// https://www.microsoft.com/typography/OTSPEC/otff.htm\n\t// Recommendations for creating OpenType Fonts:\n\t// http://www.microsoft.com/typography/otspec140/recom.htm\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar table = __webpack_require__(9);\n\t\n\tvar cmap = __webpack_require__(11);\n\tvar cff = __webpack_require__(13);\n\tvar head = __webpack_require__(17);\n\tvar hhea = __webpack_require__(18);\n\tvar hmtx = __webpack_require__(19);\n\tvar ltag = __webpack_require__(20);\n\tvar maxp = __webpack_require__(21);\n\tvar _name = __webpack_require__(22);\n\tvar os2 = __webpack_require__(23);\n\tvar post = __webpack_require__(24);\n\tvar gsub = __webpack_require__(25);\n\tvar meta = __webpack_require__(26);\n\t\n\tfunction log2(v) {\n\t    return Math.log(v) / Math.log(2) | 0;\n\t}\n\t\n\tfunction computeCheckSum(bytes) {\n\t    while (bytes.length % 4 !== 0) {\n\t        bytes.push(0);\n\t    }\n\t\n\t    var sum = 0;\n\t    for (var i = 0; i < bytes.length; i += 4) {\n\t        sum += (bytes[i] << 24) +\n\t            (bytes[i + 1] << 16) +\n\t            (bytes[i + 2] << 8) +\n\t            (bytes[i + 3]);\n\t    }\n\t\n\t    sum %= Math.pow(2, 32);\n\t    return sum;\n\t}\n\t\n\tfunction makeTableRecord(tag, checkSum, offset, length) {\n\t    return new table.Record('Table Record', [\n\t        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},\n\t        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},\n\t        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},\n\t        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}\n\t    ]);\n\t}\n\t\n\tfunction makeSfntTable(tables) {\n\t    var sfnt = new table.Table('sfnt', [\n\t        {name: 'version', type: 'TAG', value: 'OTTO'},\n\t        {name: 'numTables', type: 'USHORT', value: 0},\n\t        {name: 'searchRange', type: 'USHORT', value: 0},\n\t        {name: 'entrySelector', type: 'USHORT', value: 0},\n\t        {name: 'rangeShift', type: 'USHORT', value: 0}\n\t    ]);\n\t    sfnt.tables = tables;\n\t    sfnt.numTables = tables.length;\n\t    var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n\t    sfnt.searchRange = 16 * highestPowerOf2;\n\t    sfnt.entrySelector = log2(highestPowerOf2);\n\t    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\t\n\t    var recordFields = [];\n\t    var tableFields = [];\n\t\n\t    var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);\n\t    while (offset % 4 !== 0) {\n\t        offset += 1;\n\t        tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n\t    }\n\t\n\t    for (var i = 0; i < tables.length; i += 1) {\n\t        var t = tables[i];\n\t        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');\n\t        var tableLength = t.sizeOf();\n\t        var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);\n\t        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});\n\t        tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});\n\t        offset += tableLength;\n\t        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');\n\t        while (offset % 4 !== 0) {\n\t            offset += 1;\n\t            tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n\t        }\n\t    }\n\t\n\t    // Table records need to be sorted alphabetically.\n\t    recordFields.sort(function(r1, r2) {\n\t        if (r1.value.tag > r2.value.tag) {\n\t            return 1;\n\t        } else {\n\t            return -1;\n\t        }\n\t    });\n\t\n\t    sfnt.fields = sfnt.fields.concat(recordFields);\n\t    sfnt.fields = sfnt.fields.concat(tableFields);\n\t    return sfnt;\n\t}\n\t\n\t// Get the metrics for a character. If the string has more than one character\n\t// this function returns metrics for the first available character.\n\t// You can provide optional fallback metrics if no characters are available.\n\tfunction metricsForChar(font, chars, notFoundMetrics) {\n\t    for (var i = 0; i < chars.length; i += 1) {\n\t        var glyphIndex = font.charToGlyphIndex(chars[i]);\n\t        if (glyphIndex > 0) {\n\t            var glyph = font.glyphs.get(glyphIndex);\n\t            return glyph.getMetrics();\n\t        }\n\t    }\n\t\n\t    return notFoundMetrics;\n\t}\n\t\n\tfunction average(vs) {\n\t    var sum = 0;\n\t    for (var i = 0; i < vs.length; i += 1) {\n\t        sum += vs[i];\n\t    }\n\t\n\t    return sum / vs.length;\n\t}\n\t\n\t// Convert the font object to a SFNT data structure.\n\t// This structure contains all the necessary tables and metadata to create a binary OTF file.\n\tfunction fontToSfntTable(font) {\n\t    var xMins = [];\n\t    var yMins = [];\n\t    var xMaxs = [];\n\t    var yMaxs = [];\n\t    var advanceWidths = [];\n\t    var leftSideBearings = [];\n\t    var rightSideBearings = [];\n\t    var firstCharIndex;\n\t    var lastCharIndex = 0;\n\t    var ulUnicodeRange1 = 0;\n\t    var ulUnicodeRange2 = 0;\n\t    var ulUnicodeRange3 = 0;\n\t    var ulUnicodeRange4 = 0;\n\t\n\t    for (var i = 0; i < font.glyphs.length; i += 1) {\n\t        var glyph = font.glyphs.get(i);\n\t        var unicode = glyph.unicode | 0;\n\t\n\t        if (isNaN(glyph.advanceWidth)) {\n\t            throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');\n\t        }\n\t\n\t        if (firstCharIndex > unicode || firstCharIndex === undefined) {\n\t            // ignore .notdef char\n\t            if (unicode > 0) {\n\t                firstCharIndex = unicode;\n\t            }\n\t        }\n\t\n\t        if (lastCharIndex < unicode) {\n\t            lastCharIndex = unicode;\n\t        }\n\t\n\t        var position = os2.getUnicodeRange(unicode);\n\t        if (position < 32) {\n\t            ulUnicodeRange1 |= 1 << position;\n\t        } else if (position < 64) {\n\t            ulUnicodeRange2 |= 1 << position - 32;\n\t        } else if (position < 96) {\n\t            ulUnicodeRange3 |= 1 << position - 64;\n\t        } else if (position < 123) {\n\t            ulUnicodeRange4 |= 1 << position - 96;\n\t        } else {\n\t            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');\n\t        }\n\t        // Skip non-important characters.\n\t        if (glyph.name === '.notdef') continue;\n\t        var metrics = glyph.getMetrics();\n\t        xMins.push(metrics.xMin);\n\t        yMins.push(metrics.yMin);\n\t        xMaxs.push(metrics.xMax);\n\t        yMaxs.push(metrics.yMax);\n\t        leftSideBearings.push(metrics.leftSideBearing);\n\t        rightSideBearings.push(metrics.rightSideBearing);\n\t        advanceWidths.push(glyph.advanceWidth);\n\t    }\n\t\n\t    var globals = {\n\t        xMin: Math.min.apply(null, xMins),\n\t        yMin: Math.min.apply(null, yMins),\n\t        xMax: Math.max.apply(null, xMaxs),\n\t        yMax: Math.max.apply(null, yMaxs),\n\t        advanceWidthMax: Math.max.apply(null, advanceWidths),\n\t        advanceWidthAvg: average(advanceWidths),\n\t        minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n\t        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n\t        minRightSideBearing: Math.min.apply(null, rightSideBearings)\n\t    };\n\t    globals.ascender = font.ascender;\n\t    globals.descender = font.descender;\n\t\n\t    var headTable = head.make({\n\t        flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n\t        unitsPerEm: font.unitsPerEm,\n\t        xMin: globals.xMin,\n\t        yMin: globals.yMin,\n\t        xMax: globals.xMax,\n\t        yMax: globals.yMax,\n\t        lowestRecPPEM: 3,\n\t        createdTimestamp: font.createdTimestamp\n\t    });\n\t\n\t    var hheaTable = hhea.make({\n\t        ascender: globals.ascender,\n\t        descender: globals.descender,\n\t        advanceWidthMax: globals.advanceWidthMax,\n\t        minLeftSideBearing: globals.minLeftSideBearing,\n\t        minRightSideBearing: globals.minRightSideBearing,\n\t        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n\t        numberOfHMetrics: font.glyphs.length\n\t    });\n\t\n\t    var maxpTable = maxp.make(font.glyphs.length);\n\t\n\t    var os2Table = os2.make({\n\t        xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n\t        usWeightClass: font.tables.os2.usWeightClass,\n\t        usWidthClass: font.tables.os2.usWidthClass,\n\t        usFirstCharIndex: firstCharIndex,\n\t        usLastCharIndex: lastCharIndex,\n\t        ulUnicodeRange1: ulUnicodeRange1,\n\t        ulUnicodeRange2: ulUnicodeRange2,\n\t        ulUnicodeRange3: ulUnicodeRange3,\n\t        ulUnicodeRange4: ulUnicodeRange4,\n\t        fsSelection: font.tables.os2.fsSelection, // REGULAR\n\t        // See http://typophile.com/node/13081 for more info on vertical metrics.\n\t        // We get metrics for typical characters (such as \"x\" for xHeight).\n\t        // We provide some fallback characters if characters are unavailable: their\n\t        // ordering was chosen experimentally.\n\t        sTypoAscender: globals.ascender,\n\t        sTypoDescender: globals.descender,\n\t        sTypoLineGap: 0,\n\t        usWinAscent: globals.yMax,\n\t        usWinDescent: Math.abs(globals.yMin),\n\t        ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now\n\t        sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,\n\t        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,\n\t        usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.\n\t        usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.\n\t    });\n\t\n\t    var hmtxTable = hmtx.make(font.glyphs);\n\t    var cmapTable = cmap.make(font.glyphs);\n\t\n\t    var englishFamilyName = font.getEnglishName('fontFamily');\n\t    var englishStyleName = font.getEnglishName('fontSubfamily');\n\t    var englishFullName = englishFamilyName + ' ' + englishStyleName;\n\t    var postScriptName = font.getEnglishName('postScriptName');\n\t    if (!postScriptName) {\n\t        postScriptName = englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n\t    }\n\t\n\t    var names = {};\n\t    for (var n in font.names) {\n\t        names[n] = font.names[n];\n\t    }\n\t\n\t    if (!names.uniqueID) {\n\t        names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};\n\t    }\n\t\n\t    if (!names.postScriptName) {\n\t        names.postScriptName = {en: postScriptName};\n\t    }\n\t\n\t    if (!names.preferredFamily) {\n\t        names.preferredFamily = font.names.fontFamily;\n\t    }\n\t\n\t    if (!names.preferredSubfamily) {\n\t        names.preferredSubfamily = font.names.fontSubfamily;\n\t    }\n\t\n\t    var languageTags = [];\n\t    var nameTable = _name.make(names, languageTags);\n\t    var ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);\n\t\n\t    var postTable = post.make();\n\t    var cffTable = cff.make(font.glyphs, {\n\t        version: font.getEnglishName('version'),\n\t        fullName: englishFullName,\n\t        familyName: englishFamilyName,\n\t        weightName: englishStyleName,\n\t        postScriptName: postScriptName,\n\t        unitsPerEm: font.unitsPerEm,\n\t        fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n\t    });\n\t\n\t    var metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;\n\t\n\t    // The order does not matter because makeSfntTable() will sort them.\n\t    var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];\n\t    if (ltagTable) {\n\t        tables.push(ltagTable);\n\t    }\n\t    // Optional tables\n\t    if (font.tables.gsub) {\n\t        tables.push(gsub.make(font.tables.gsub));\n\t    }\n\t    if (metaTable) {\n\t        tables.push(metaTable);\n\t    }\n\t\n\t    var sfntTable = makeSfntTable(tables);\n\t\n\t    // Compute the font's checkSum and store it in head.checkSumAdjustment.\n\t    var bytes = sfntTable.encode();\n\t    var checkSum = computeCheckSum(bytes);\n\t    var tableFields = sfntTable.fields;\n\t    var checkSumAdjusted = false;\n\t    for (i = 0; i < tableFields.length; i += 1) {\n\t        if (tableFields[i].name === 'head table') {\n\t            tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;\n\t            checkSumAdjusted = true;\n\t            break;\n\t        }\n\t    }\n\t\n\t    if (!checkSumAdjusted) {\n\t        throw new Error('Could not find head table with checkSum to adjust.');\n\t    }\n\t\n\t    return sfntTable;\n\t}\n\t\n\texports.computeCheckSum = computeCheckSum;\n\texports.make = makeSfntTable;\n\texports.fontToTable = fontToSfntTable;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t// Run-time checking of preconditions.\n\t\n\t'use strict';\n\t\n\texports.fail = function(message) {\n\t    throw new Error(message);\n\t};\n\t\n\t// Precondition function that checks if the given predicate is true.\n\t// If not, it will throw an error.\n\texports.argument = function(predicate, message) {\n\t    if (!predicate) {\n\t        exports.fail(message);\n\t    }\n\t};\n\t\n\t// Precondition function that checks if the given assertion is true.\n\t// If not, it will throw an error.\n\texports.assert = exports.argument;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Table metadata\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar encode = __webpack_require__(10).encode;\n\tvar sizeOf = __webpack_require__(10).sizeOf;\n\t/**\n\t * @exports opentype.Table\n\t * @class\n\t * @param {string} tableName\n\t * @param {Array} fields\n\t * @param {Object} options\n\t * @constructor\n\t */\n\tfunction Table(tableName, fields, options) {\n\t    var i;\n\t    for (i = 0; i < fields.length; i += 1) {\n\t        var field = fields[i];\n\t        this[field.name] = field.value;\n\t    }\n\t\n\t    this.tableName = tableName;\n\t    this.fields = fields;\n\t    if (options) {\n\t        var optionKeys = Object.keys(options);\n\t        for (i = 0; i < optionKeys.length; i += 1) {\n\t            var k = optionKeys[i];\n\t            var v = options[k];\n\t            if (this[k] !== undefined) {\n\t                this[k] = v;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * Encodes the table and returns an array of bytes\n\t * @return {Array}\n\t */\n\tTable.prototype.encode = function() {\n\t    return encode.TABLE(this);\n\t};\n\t\n\t/**\n\t * Get the size of the table.\n\t * @return {number}\n\t */\n\tTable.prototype.sizeOf = function() {\n\t    return sizeOf.TABLE(this);\n\t};\n\t\n\t/**\n\t * @private\n\t */\n\tfunction ushortList(itemName, list, count) {\n\t    if (count === undefined) {\n\t        count = list.length;\n\t    }\n\t    var fields = new Array(list.length + 1);\n\t    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n\t    for (var i = 0; i < list.length; i++) {\n\t        fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};\n\t    }\n\t    return fields;\n\t}\n\t\n\t/**\n\t * @private\n\t */\n\tfunction tableList(itemName, records, itemCallback) {\n\t    var count = records.length;\n\t    var fields = new Array(count + 1);\n\t    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n\t    for (var i = 0; i < count; i++) {\n\t        fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};\n\t    }\n\t    return fields;\n\t}\n\t\n\t/**\n\t * @private\n\t */\n\tfunction recordList(itemName, records, itemCallback) {\n\t    var count = records.length;\n\t    var fields = [];\n\t    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n\t    for (var i = 0; i < count; i++) {\n\t        fields = fields.concat(itemCallback(records[i], i));\n\t    }\n\t    return fields;\n\t}\n\t\n\t// Common Layout Tables\n\t\n\t/**\n\t * @exports opentype.Coverage\n\t * @class\n\t * @param {opentype.Table}\n\t * @constructor\n\t * @extends opentype.Table\n\t */\n\tfunction Coverage(coverageTable) {\n\t    if (coverageTable.format === 1) {\n\t        Table.call(this, 'coverageTable',\n\t            [{name: 'coverageFormat', type: 'USHORT', value: 1}]\n\t            .concat(ushortList('glyph', coverageTable.glyphs))\n\t        );\n\t    } else {\n\t        check.assert(false, 'Can\\'t create coverage table format 2 yet.');\n\t    }\n\t}\n\tCoverage.prototype = Object.create(Table.prototype);\n\tCoverage.prototype.constructor = Coverage;\n\t\n\tfunction ScriptList(scriptListTable) {\n\t    Table.call(this, 'scriptListTable',\n\t        recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {\n\t            var script = scriptRecord.script;\n\t            var defaultLangSys = script.defaultLangSys;\n\t            check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');\n\t            return [\n\t                {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},\n\t                {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [\n\t                    {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [\n\t                        {name: 'lookupOrder', type: 'USHORT', value: 0},\n\t                        {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]\n\t                        .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}\n\t                    ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {\n\t                        var langSys = langSysRecord.langSys;\n\t                        return [\n\t                            {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},\n\t                            {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [\n\t                                {name: 'lookupOrder', type: 'USHORT', value: 0},\n\t                                {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}\n\t                                ].concat(ushortList('featureIndex', langSys.featureIndexes)))}\n\t                        ];\n\t                    })))}\n\t            ];\n\t        })\n\t    );\n\t}\n\tScriptList.prototype = Object.create(Table.prototype);\n\tScriptList.prototype.constructor = ScriptList;\n\t\n\t/**\n\t * @exports opentype.FeatureList\n\t * @class\n\t * @param {opentype.Table}\n\t * @constructor\n\t * @extends opentype.Table\n\t */\n\tfunction FeatureList(featureListTable) {\n\t    Table.call(this, 'featureListTable',\n\t        recordList('featureRecord', featureListTable, function(featureRecord, i) {\n\t            var feature = featureRecord.feature;\n\t            return [\n\t                {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},\n\t                {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [\n\t                    {name: 'featureParams', type: 'USHORT', value: feature.featureParams},\n\t                    ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}\n\t            ];\n\t        })\n\t    );\n\t}\n\tFeatureList.prototype = Object.create(Table.prototype);\n\tFeatureList.prototype.constructor = FeatureList;\n\t\n\t/**\n\t * @exports opentype.LookupList\n\t * @class\n\t * @param {opentype.Table}\n\t * @param {Object}\n\t * @constructor\n\t * @extends opentype.Table\n\t */\n\tfunction LookupList(lookupListTable, subtableMakers) {\n\t    Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {\n\t        var subtableCallback = subtableMakers[lookupTable.lookupType];\n\t        check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');\n\t        return new Table('lookupTable', [\n\t            {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},\n\t            {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}\n\t        ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));\n\t    }));\n\t}\n\tLookupList.prototype = Object.create(Table.prototype);\n\tLookupList.prototype.constructor = LookupList;\n\t\n\t// Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)\n\t// Don't use offsets inside Records (probable bug), only in Tables.\n\texports.Record = exports.Table = Table;\n\texports.Coverage = Coverage;\n\texports.ScriptList = ScriptList;\n\texports.FeatureList = FeatureList;\n\texports.LookupList = LookupList;\n\t\n\texports.ushortList = ushortList;\n\texports.tableList = tableList;\n\texports.recordList = recordList;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Data types used in the OpenType font file.\n\t// All OpenType fonts use Motorola-style byte ordering (Big Endian)\n\t\n\t/* global WeakMap */\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\t\n\tvar LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\n\tvar LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\t\n\t/**\n\t * @exports opentype.decode\n\t * @class\n\t */\n\tvar decode = {};\n\t/**\n\t * @exports opentype.encode\n\t * @class\n\t */\n\tvar encode = {};\n\t/**\n\t * @exports opentype.sizeOf\n\t * @class\n\t */\n\tvar sizeOf = {};\n\t\n\t// Return a function that always returns the same value.\n\tfunction constant(v) {\n\t    return function() {\n\t        return v;\n\t    };\n\t}\n\t\n\t// OpenType data types //////////////////////////////////////////////////////\n\t\n\t/**\n\t * Convert an 8-bit unsigned integer to a list of 1 byte.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.BYTE = function(v) {\n\t    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');\n\t    return [v];\n\t};\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.BYTE = constant(1);\n\t\n\t/**\n\t * Convert a 8-bit signed integer to a list of 1 byte.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.CHAR = function(v) {\n\t    return [v.charCodeAt(0)];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.CHAR = constant(1);\n\t\n\t/**\n\t * Convert an ASCII string to a list of bytes.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.CHARARRAY = function(v) {\n\t    var b = [];\n\t    for (var i = 0; i < v.length; i += 1) {\n\t        b[i] = v.charCodeAt(i);\n\t    }\n\t\n\t    return b;\n\t};\n\t\n\t/**\n\t * @param {Array}\n\t * @returns {number}\n\t */\n\tsizeOf.CHARARRAY = function(v) {\n\t    return v.length;\n\t};\n\t\n\t/**\n\t * Convert a 16-bit unsigned integer to a list of 2 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.USHORT = function(v) {\n\t    return [(v >> 8) & 0xFF, v & 0xFF];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.USHORT = constant(2);\n\t\n\t/**\n\t * Convert a 16-bit signed integer to a list of 2 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.SHORT = function(v) {\n\t    // Two's complement\n\t    if (v >= LIMIT16) {\n\t        v = -(2 * LIMIT16 - v);\n\t    }\n\t\n\t    return [(v >> 8) & 0xFF, v & 0xFF];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.SHORT = constant(2);\n\t\n\t/**\n\t * Convert a 24-bit unsigned integer to a list of 3 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.UINT24 = function(v) {\n\t    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.UINT24 = constant(3);\n\t\n\t/**\n\t * Convert a 32-bit unsigned integer to a list of 4 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.ULONG = function(v) {\n\t    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.ULONG = constant(4);\n\t\n\t/**\n\t * Convert a 32-bit unsigned integer to a list of 4 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.LONG = function(v) {\n\t    // Two's complement\n\t    if (v >= LIMIT32) {\n\t        v = -(2 * LIMIT32 - v);\n\t    }\n\t\n\t    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.LONG = constant(4);\n\t\n\tencode.FIXED = encode.ULONG;\n\tsizeOf.FIXED = sizeOf.ULONG;\n\t\n\tencode.FWORD = encode.SHORT;\n\tsizeOf.FWORD = sizeOf.SHORT;\n\t\n\tencode.UFWORD = encode.USHORT;\n\tsizeOf.UFWORD = sizeOf.USHORT;\n\t\n\t/**\n\t * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.LONGDATETIME = function(v) {\n\t    return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.LONGDATETIME = constant(8);\n\t\n\t/**\n\t * Convert a 4-char tag to a list of 4 bytes.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.TAG = function(v) {\n\t    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n\t    return [v.charCodeAt(0),\n\t            v.charCodeAt(1),\n\t            v.charCodeAt(2),\n\t            v.charCodeAt(3)];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.TAG = constant(4);\n\t\n\t// CFF data types ///////////////////////////////////////////////////////////\n\t\n\tencode.Card8 = encode.BYTE;\n\tsizeOf.Card8 = sizeOf.BYTE;\n\t\n\tencode.Card16 = encode.USHORT;\n\tsizeOf.Card16 = sizeOf.USHORT;\n\t\n\tencode.OffSize = encode.BYTE;\n\tsizeOf.OffSize = sizeOf.BYTE;\n\t\n\tencode.SID = encode.USHORT;\n\tsizeOf.SID = sizeOf.USHORT;\n\t\n\t// Convert a numeric operand or charstring number to a variable-size list of bytes.\n\t/**\n\t * Convert a numeric operand or charstring number to a variable-size list of bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.NUMBER = function(v) {\n\t    if (v >= -107 && v <= 107) {\n\t        return [v + 139];\n\t    } else if (v >= 108 && v <= 1131) {\n\t        v = v - 108;\n\t        return [(v >> 8) + 247, v & 0xFF];\n\t    } else if (v >= -1131 && v <= -108) {\n\t        v = -v - 108;\n\t        return [(v >> 8) + 251, v & 0xFF];\n\t    } else if (v >= -32768 && v <= 32767) {\n\t        return encode.NUMBER16(v);\n\t    } else {\n\t        return encode.NUMBER32(v);\n\t    }\n\t};\n\t\n\t/**\n\t * @param {number}\n\t * @returns {number}\n\t */\n\tsizeOf.NUMBER = function(v) {\n\t    return encode.NUMBER(v).length;\n\t};\n\t\n\t/**\n\t * Convert a signed number between -32768 and +32767 to a three-byte value.\n\t * This ensures we always use three bytes, but is not the most compact format.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.NUMBER16 = function(v) {\n\t    return [28, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.NUMBER16 = constant(3);\n\t\n\t/**\n\t * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\n\t * This is useful if you want to be sure you always use four bytes,\n\t * at the expense of wasting a few bytes for smaller numbers.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.NUMBER32 = function(v) {\n\t    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\t\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.NUMBER32 = constant(5);\n\t\n\t/**\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.REAL = function(v) {\n\t    var value = v.toString();\n\t\n\t    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)\n\t    // This code converts it back to a number without the epsilon.\n\t    var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n\t    if (m) {\n\t        var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));\n\t        value = (Math.round(v * epsilon) / epsilon).toString();\n\t    }\n\t\n\t    var nibbles = '';\n\t    var i;\n\t    var ii;\n\t    for (i = 0, ii = value.length; i < ii; i += 1) {\n\t        var c = value[i];\n\t        if (c === 'e') {\n\t            nibbles += value[++i] === '-' ? 'c' : 'b';\n\t        } else if (c === '.') {\n\t            nibbles += 'a';\n\t        } else if (c === '-') {\n\t            nibbles += 'e';\n\t        } else {\n\t            nibbles += c;\n\t        }\n\t    }\n\t\n\t    nibbles += (nibbles.length & 1) ? 'f' : 'ff';\n\t    var out = [30];\n\t    for (i = 0, ii = nibbles.length; i < ii; i += 2) {\n\t        out.push(parseInt(nibbles.substr(i, 2), 16));\n\t    }\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * @param {number}\n\t * @returns {number}\n\t */\n\tsizeOf.REAL = function(v) {\n\t    return encode.REAL(v).length;\n\t};\n\t\n\tencode.NAME = encode.CHARARRAY;\n\tsizeOf.NAME = sizeOf.CHARARRAY;\n\t\n\tencode.STRING = encode.CHARARRAY;\n\tsizeOf.STRING = sizeOf.CHARARRAY;\n\t\n\t/**\n\t * @param {DataView} data\n\t * @param {number} offset\n\t * @param {number} numBytes\n\t * @returns {string}\n\t */\n\tdecode.UTF8 = function(data, offset, numBytes) {\n\t    var codePoints = [];\n\t    var numChars = numBytes;\n\t    for (var j = 0; j < numChars; j++, offset += 1) {\n\t        codePoints[j] = data.getUint8(offset);\n\t    }\n\t\n\t    return String.fromCharCode.apply(null, codePoints);\n\t};\n\t\n\t/**\n\t * @param {DataView} data\n\t * @param {number} offset\n\t * @param {number} numBytes\n\t * @returns {string}\n\t */\n\tdecode.UTF16 = function(data, offset, numBytes) {\n\t    var codePoints = [];\n\t    var numChars = numBytes / 2;\n\t    for (var j = 0; j < numChars; j++, offset += 2) {\n\t        codePoints[j] = data.getUint16(offset);\n\t    }\n\t\n\t    return String.fromCharCode.apply(null, codePoints);\n\t};\n\t\n\t/**\n\t * Convert a JavaScript string to UTF16-BE.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.UTF16 = function(v) {\n\t    var b = [];\n\t    for (var i = 0; i < v.length; i += 1) {\n\t        var codepoint = v.charCodeAt(i);\n\t        b[b.length] = (codepoint >> 8) & 0xFF;\n\t        b[b.length] = codepoint & 0xFF;\n\t    }\n\t\n\t    return b;\n\t};\n\t\n\t/**\n\t * @param {string}\n\t * @returns {number}\n\t */\n\tsizeOf.UTF16 = function(v) {\n\t    return v.length * 2;\n\t};\n\t\n\t// Data for converting old eight-bit Macintosh encodings to Unicode.\n\t// This representation is optimized for decoding; encoding is slower\n\t// and needs more memory. The assumption is that all opentype.js users\n\t// want to open fonts, but saving a font will be comperatively rare\n\t// so it can be more expensive. Keyed by IANA character set name.\n\t//\n\t// Python script for generating these strings:\n\t//\n\t//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n\t//     print(s.encode('utf-8'))\n\t/**\n\t * @private\n\t */\n\tvar eightBitMacEncodings = {\n\t    'x-mac-croatian':  // Python: 'mac_croatian'\n\t        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n\t        '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n\t    'x-mac-cyrillic':  // Python: 'mac_cyrillic'\n\t        'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n\t        'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n\t    'x-mac-gaelic':\n\t        // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n\t        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n\t        'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n\t    'x-mac-greek':  // Python: 'mac_greek'\n\t        'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n\t        'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n\t    'x-mac-icelandic':  // Python: 'mac_iceland'\n\t        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n\t        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n\t    'x-mac-inuit':\n\t        // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n\t        'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n\t        'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n\t    'x-mac-ce':  // Python: 'mac_latin2'\n\t        'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n\t        'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n\t    macintosh:  // Python: 'mac_roman'\n\t        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n\t        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n\t    'x-mac-romanian':  // Python: 'mac_romanian'\n\t        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n\t        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n\t    'x-mac-turkish':  // Python: 'mac_turkish'\n\t        'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n\t        '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n\t};\n\t\n\t/**\n\t * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n\t * string, or 'undefined' if the encoding is unsupported. For example, we do\n\t * not support Chinese, Japanese or Korean because these would need large\n\t * mapping tables.\n\t * @param {DataView} dataView\n\t * @param {number} offset\n\t * @param {number} dataLength\n\t * @param {string} encoding\n\t * @returns {string}\n\t */\n\tdecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n\t    var table = eightBitMacEncodings[encoding];\n\t    if (table === undefined) {\n\t        return undefined;\n\t    }\n\t\n\t    var result = '';\n\t    for (var i = 0; i < dataLength; i++) {\n\t        var c = dataView.getUint8(offset + i);\n\t        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n\t        // mapped to U+0000..U+007F; we only need to look up the others.\n\t        if (c <= 0x7F) {\n\t            result += String.fromCharCode(c);\n\t        } else {\n\t            result += table[c & 0x7F];\n\t        }\n\t    }\n\t\n\t    return result;\n\t};\n\t\n\t// Helper function for encode.MACSTRING. Returns a dictionary for mapping\n\t// Unicode character codes to their 8-bit MacOS equivalent. This table\n\t// is not exactly a super cheap data structure, but we do not care because\n\t// encoding Macintosh strings is only rarely needed in typical applications.\n\tvar macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();\n\tvar macEncodingCacheKeys;\n\tvar getMacEncodingTable = function(encoding) {\n\t    // Since we use encoding as a cache key for WeakMap, it has to be\n\t    // a String object and not a literal. And at least on NodeJS 2.10.1,\n\t    // WeakMap requires that the same String instance is passed for cache hits.\n\t    if (!macEncodingCacheKeys) {\n\t        macEncodingCacheKeys = {};\n\t        for (var e in eightBitMacEncodings) {\n\t            /*jshint -W053 */  // Suppress \"Do not use String as a constructor.\"\n\t            macEncodingCacheKeys[e] = new String(e);\n\t        }\n\t    }\n\t\n\t    var cacheKey = macEncodingCacheKeys[encoding];\n\t    if (cacheKey === undefined) {\n\t        return undefined;\n\t    }\n\t\n\t    // We can't do \"if (cache.has(key)) {return cache.get(key)}\" here:\n\t    // since garbage collection may run at any time, it could also kick in\n\t    // between the calls to cache.has() and cache.get(). In that case,\n\t    // we would return 'undefined' even though we do support the encoding.\n\t    if (macEncodingTableCache) {\n\t        var cachedTable = macEncodingTableCache.get(cacheKey);\n\t        if (cachedTable !== undefined) {\n\t            return cachedTable;\n\t        }\n\t    }\n\t\n\t    var decodingTable = eightBitMacEncodings[encoding];\n\t    if (decodingTable === undefined) {\n\t        return undefined;\n\t    }\n\t\n\t    var encodingTable = {};\n\t    for (var i = 0; i < decodingTable.length; i++) {\n\t        encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;\n\t    }\n\t\n\t    if (macEncodingTableCache) {\n\t        macEncodingTableCache.set(cacheKey, encodingTable);\n\t    }\n\t\n\t    return encodingTable;\n\t};\n\t\n\t/**\n\t * Encodes an old-style Macintosh string. Returns a byte array upon success.\n\t * If the requested encoding is unsupported, or if the input string contains\n\t * a character that cannot be expressed in the encoding, the function returns\n\t * 'undefined'.\n\t * @param {string} str\n\t * @param {string} encoding\n\t * @returns {Array}\n\t */\n\tencode.MACSTRING = function(str, encoding) {\n\t    var table = getMacEncodingTable(encoding);\n\t    if (table === undefined) {\n\t        return undefined;\n\t    }\n\t\n\t    var result = [];\n\t    for (var i = 0; i < str.length; i++) {\n\t        var c = str.charCodeAt(i);\n\t\n\t        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n\t        // mapped to U+0000..U+007F; we only need to look up the others.\n\t        if (c >= 0x80) {\n\t            c = table[c];\n\t            if (c === undefined) {\n\t                // str contains a Unicode character that cannot be encoded\n\t                // in the requested encoding.\n\t                return undefined;\n\t            }\n\t        }\n\t        result[i] = c;\n\t        // result.push(c);\n\t    }\n\t\n\t    return result;\n\t};\n\t\n\t/**\n\t * @param {string} str\n\t * @param {string} encoding\n\t * @returns {number}\n\t */\n\tsizeOf.MACSTRING = function(str, encoding) {\n\t    var b = encode.MACSTRING(str, encoding);\n\t    if (b !== undefined) {\n\t        return b.length;\n\t    } else {\n\t        return 0;\n\t    }\n\t};\n\t\n\t// Convert a list of values to a CFF INDEX structure.\n\t// The values should be objects containing name / type / value.\n\t/**\n\t * @param {Array} l\n\t * @returns {Array}\n\t */\n\tencode.INDEX = function(l) {\n\t    var i;\n\t    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n\t    //    i, v;\n\t    // Because we have to know which data type to use to encode the offsets,\n\t    // we have to go through the values twice: once to encode the data and\n\t    // calculate the offets, then again to encode the offsets using the fitting data type.\n\t    var offset = 1; // First offset is always 1.\n\t    var offsets = [offset];\n\t    var data = [];\n\t    for (i = 0; i < l.length; i += 1) {\n\t        var v = encode.OBJECT(l[i]);\n\t        Array.prototype.push.apply(data, v);\n\t        offset += v.length;\n\t        offsets.push(offset);\n\t    }\n\t\n\t    if (data.length === 0) {\n\t        return [0, 0];\n\t    }\n\t\n\t    var encodedOffsets = [];\n\t    var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;\n\t    var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];\n\t    for (i = 0; i < offsets.length; i += 1) {\n\t        var encodedOffset = offsetEncoder(offsets[i]);\n\t        Array.prototype.push.apply(encodedOffsets, encodedOffset);\n\t    }\n\t\n\t    return Array.prototype.concat(encode.Card16(l.length),\n\t                           encode.OffSize(offSize),\n\t                           encodedOffsets,\n\t                           data);\n\t};\n\t\n\t/**\n\t * @param {Array}\n\t * @returns {number}\n\t */\n\tsizeOf.INDEX = function(v) {\n\t    return encode.INDEX(v).length;\n\t};\n\t\n\t/**\n\t * Convert an object to a CFF DICT structure.\n\t * The keys should be numeric.\n\t * The values should be objects containing name / type / value.\n\t * @param {Object} m\n\t * @returns {Array}\n\t */\n\tencode.DICT = function(m) {\n\t    var d = [];\n\t    var keys = Object.keys(m);\n\t    var length = keys.length;\n\t\n\t    for (var i = 0; i < length; i += 1) {\n\t        // Object.keys() return string keys, but our keys are always numeric.\n\t        var k = parseInt(keys[i], 0);\n\t        var v = m[k];\n\t        // Value comes before the key.\n\t        d = d.concat(encode.OPERAND(v.value, v.type));\n\t        d = d.concat(encode.OPERATOR(k));\n\t    }\n\t\n\t    return d;\n\t};\n\t\n\t/**\n\t * @param {Object}\n\t * @returns {number}\n\t */\n\tsizeOf.DICT = function(m) {\n\t    return encode.DICT(m).length;\n\t};\n\t\n\t/**\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.OPERATOR = function(v) {\n\t    if (v < 1200) {\n\t        return [v];\n\t    } else {\n\t        return [12, v - 1200];\n\t    }\n\t};\n\t\n\t/**\n\t * @param {Array} v\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.OPERAND = function(v, type) {\n\t    var d = [];\n\t    if (Array.isArray(type)) {\n\t        for (var i = 0; i < type.length; i += 1) {\n\t            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);\n\t            d = d.concat(encode.OPERAND(v[i], type[i]));\n\t        }\n\t    } else {\n\t        if (type === 'SID') {\n\t            d = d.concat(encode.NUMBER(v));\n\t        } else if (type === 'offset') {\n\t            // We make it easy for ourselves and always encode offsets as\n\t            // 4 bytes. This makes offset calculation for the top dict easier.\n\t            d = d.concat(encode.NUMBER32(v));\n\t        } else if (type === 'number') {\n\t            d = d.concat(encode.NUMBER(v));\n\t        } else if (type === 'real') {\n\t            d = d.concat(encode.REAL(v));\n\t        } else {\n\t            throw new Error('Unknown operand type ' + type);\n\t            // FIXME Add support for booleans\n\t        }\n\t    }\n\t\n\t    return d;\n\t};\n\t\n\tencode.OP = encode.BYTE;\n\tsizeOf.OP = sizeOf.BYTE;\n\t\n\t// memoize charstring encoding using WeakMap if available\n\tvar wmm = typeof WeakMap === 'function' && new WeakMap();\n\t\n\t/**\n\t * Convert a list of CharString operations to bytes.\n\t * @param {Array}\n\t * @returns {Array}\n\t */\n\tencode.CHARSTRING = function(ops) {\n\t    // See encode.MACSTRING for why we don't do \"if (wmm && wmm.has(ops))\".\n\t    if (wmm) {\n\t        var cachedValue = wmm.get(ops);\n\t        if (cachedValue !== undefined) {\n\t            return cachedValue;\n\t        }\n\t    }\n\t\n\t    var d = [];\n\t    var length = ops.length;\n\t\n\t    for (var i = 0; i < length; i += 1) {\n\t        var op = ops[i];\n\t        d = d.concat(encode[op.type](op.value));\n\t    }\n\t\n\t    if (wmm) {\n\t        wmm.set(ops, d);\n\t    }\n\t\n\t    return d;\n\t};\n\t\n\t/**\n\t * @param {Array}\n\t * @returns {number}\n\t */\n\tsizeOf.CHARSTRING = function(ops) {\n\t    return encode.CHARSTRING(ops).length;\n\t};\n\t\n\t// Utility functions ////////////////////////////////////////////////////////\n\t\n\t/**\n\t * Convert an object containing name / type / value to bytes.\n\t * @param {Object}\n\t * @returns {Array}\n\t */\n\tencode.OBJECT = function(v) {\n\t    var encodingFunction = encode[v.type];\n\t    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);\n\t    return encodingFunction(v.value);\n\t};\n\t\n\t/**\n\t * @param {Object}\n\t * @returns {number}\n\t */\n\tsizeOf.OBJECT = function(v) {\n\t    var sizeOfFunction = sizeOf[v.type];\n\t    check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);\n\t    return sizeOfFunction(v.value);\n\t};\n\t\n\t/**\n\t * Convert a table object to bytes.\n\t * A table contains a list of fields containing the metadata (name, type and default value).\n\t * The table itself has the field values set as attributes.\n\t * @param {opentype.Table}\n\t * @returns {Array}\n\t */\n\tencode.TABLE = function(table) {\n\t    var d = [];\n\t    var length = table.fields.length;\n\t    var subtables = [];\n\t    var subtableOffsets = [];\n\t    var i;\n\t\n\t    for (i = 0; i < length; i += 1) {\n\t        var field = table.fields[i];\n\t        var encodingFunction = encode[field.type];\n\t        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');\n\t        var value = table[field.name];\n\t        if (value === undefined) {\n\t            value = field.value;\n\t        }\n\t\n\t        var bytes = encodingFunction(value);\n\t\n\t        if (field.type === 'TABLE') {\n\t            subtableOffsets.push(d.length);\n\t            d = d.concat([0, 0]);\n\t            subtables.push(bytes);\n\t        } else {\n\t            d = d.concat(bytes);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < subtables.length; i += 1) {\n\t        var o = subtableOffsets[i];\n\t        var offset = d.length;\n\t        check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');\n\t        d[o] = offset >> 8;\n\t        d[o + 1] = offset & 0xff;\n\t        d = d.concat(subtables[i]);\n\t    }\n\t\n\t    return d;\n\t};\n\t\n\t/**\n\t * @param {opentype.Table}\n\t * @returns {number}\n\t */\n\tsizeOf.TABLE = function(table) {\n\t    var numBytes = 0;\n\t    var length = table.fields.length;\n\t\n\t    for (var i = 0; i < length; i += 1) {\n\t        var field = table.fields[i];\n\t        var sizeOfFunction = sizeOf[field.type];\n\t        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');\n\t        var value = table[field.name];\n\t        if (value === undefined) {\n\t            value = field.value;\n\t        }\n\t\n\t        numBytes += sizeOfFunction(value);\n\t\n\t        // Subtables take 2 more bytes for offsets.\n\t        if (field.type === 'TABLE') {\n\t            numBytes += 2;\n\t        }\n\t    }\n\t\n\t    return numBytes;\n\t};\n\t\n\tencode.RECORD = encode.TABLE;\n\tsizeOf.RECORD = sizeOf.TABLE;\n\t\n\t// Merge in a list of bytes.\n\tencode.LITERAL = function(v) {\n\t    return v;\n\t};\n\t\n\tsizeOf.LITERAL = function(v) {\n\t    return v.length;\n\t};\n\t\n\texports.decode = decode;\n\texports.encode = encode;\n\texports.sizeOf = sizeOf;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `cmap` table stores the mappings from characters to glyphs.\n\t// https://www.microsoft.com/typography/OTSPEC/cmap.htm\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\tfunction parseCmapTableFormat12(cmap, p) {\n\t    var i;\n\t\n\t    //Skip reserved.\n\t    p.parseUShort();\n\t\n\t    // Length in bytes of the sub-tables.\n\t    cmap.length = p.parseULong();\n\t    cmap.language = p.parseULong();\n\t\n\t    var groupCount;\n\t    cmap.groupCount = groupCount = p.parseULong();\n\t    cmap.glyphIndexMap = {};\n\t\n\t    for (i = 0; i < groupCount; i += 1) {\n\t        var startCharCode = p.parseULong();\n\t        var endCharCode = p.parseULong();\n\t        var startGlyphId = p.parseULong();\n\t\n\t        for (var c = startCharCode; c <= endCharCode; c += 1) {\n\t            cmap.glyphIndexMap[c] = startGlyphId;\n\t            startGlyphId++;\n\t        }\n\t    }\n\t}\n\t\n\tfunction parseCmapTableFormat4(cmap, p, data, start, offset) {\n\t    var i;\n\t\n\t    // Length in bytes of the sub-tables.\n\t    cmap.length = p.parseUShort();\n\t    cmap.language = p.parseUShort();\n\t\n\t    // segCount is stored x 2.\n\t    var segCount;\n\t    cmap.segCount = segCount = p.parseUShort() >> 1;\n\t\n\t    // Skip searchRange, entrySelector, rangeShift.\n\t    p.skip('uShort', 3);\n\t\n\t    // The \"unrolled\" mapping from character codes to glyph indices.\n\t    cmap.glyphIndexMap = {};\n\t    var endCountParser = new parse.Parser(data, start + offset + 14);\n\t    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);\n\t    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);\n\t    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);\n\t    var glyphIndexOffset = start + offset + 16 + segCount * 8;\n\t    for (i = 0; i < segCount - 1; i += 1) {\n\t        var glyphIndex;\n\t        var endCount = endCountParser.parseUShort();\n\t        var startCount = startCountParser.parseUShort();\n\t        var idDelta = idDeltaParser.parseShort();\n\t        var idRangeOffset = idRangeOffsetParser.parseUShort();\n\t        for (var c = startCount; c <= endCount; c += 1) {\n\t            if (idRangeOffset !== 0) {\n\t                // The idRangeOffset is relative to the current position in the idRangeOffset array.\n\t                // Take the current offset in the idRangeOffset array.\n\t                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);\n\t\n\t                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n\t                glyphIndexOffset += idRangeOffset;\n\t\n\t                // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n\t                glyphIndexOffset += (c - startCount) * 2;\n\t                glyphIndex = parse.getUShort(data, glyphIndexOffset);\n\t                if (glyphIndex !== 0) {\n\t                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;\n\t                }\n\t            } else {\n\t                glyphIndex = (c + idDelta) & 0xFFFF;\n\t            }\n\t\n\t            cmap.glyphIndexMap[c] = glyphIndex;\n\t        }\n\t    }\n\t}\n\t\n\t// Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n\t// There are many available formats, but we only support the Windows format 4 and 12.\n\t// This function returns a `CmapEncoding` object or null if no supported format could be found.\n\tfunction parseCmapTable(data, start) {\n\t    var i;\n\t    var cmap = {};\n\t    cmap.version = parse.getUShort(data, start);\n\t    check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\t\n\t    // The cmap table can contain many sub-tables, each with their own format.\n\t    // We're only interested in a \"platform 3\" table. This is a Windows format.\n\t    cmap.numTables = parse.getUShort(data, start + 2);\n\t    var offset = -1;\n\t    for (i = cmap.numTables - 1; i >= 0; i -= 1) {\n\t        var platformId = parse.getUShort(data, start + 4 + (i * 8));\n\t        var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);\n\t        if (platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) {\n\t            offset = parse.getULong(data, start + 4 + (i * 8) + 4);\n\t            break;\n\t        }\n\t    }\n\t\n\t    if (offset === -1) {\n\t        // There is no cmap table in the font that we support, so return null.\n\t        // This font will be marked as unsupported.\n\t        return null;\n\t    }\n\t\n\t    var p = new parse.Parser(data, start + offset);\n\t    cmap.format = p.parseUShort();\n\t\n\t    if (cmap.format === 12) {\n\t        parseCmapTableFormat12(cmap, p);\n\t    } else if (cmap.format === 4) {\n\t        parseCmapTableFormat4(cmap, p, data, start, offset);\n\t    } else {\n\t        throw new Error('Only format 4 and 12 cmap tables are supported.');\n\t    }\n\t\n\t    return cmap;\n\t}\n\t\n\tfunction addSegment(t, code, glyphIndex) {\n\t    t.segments.push({\n\t        end: code,\n\t        start: code,\n\t        delta: -(code - glyphIndex),\n\t        offset: 0\n\t    });\n\t}\n\t\n\tfunction addTerminatorSegment(t) {\n\t    t.segments.push({\n\t        end: 0xFFFF,\n\t        start: 0xFFFF,\n\t        delta: 1,\n\t        offset: 0\n\t    });\n\t}\n\t\n\tfunction makeCmapTable(glyphs) {\n\t    var i;\n\t    var t = new table.Table('cmap', [\n\t        {name: 'version', type: 'USHORT', value: 0},\n\t        {name: 'numTables', type: 'USHORT', value: 1},\n\t        {name: 'platformID', type: 'USHORT', value: 3},\n\t        {name: 'encodingID', type: 'USHORT', value: 1},\n\t        {name: 'offset', type: 'ULONG', value: 12},\n\t        {name: 'format', type: 'USHORT', value: 4},\n\t        {name: 'length', type: 'USHORT', value: 0},\n\t        {name: 'language', type: 'USHORT', value: 0},\n\t        {name: 'segCountX2', type: 'USHORT', value: 0},\n\t        {name: 'searchRange', type: 'USHORT', value: 0},\n\t        {name: 'entrySelector', type: 'USHORT', value: 0},\n\t        {name: 'rangeShift', type: 'USHORT', value: 0}\n\t    ]);\n\t\n\t    t.segments = [];\n\t    for (i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs.get(i);\n\t        for (var j = 0; j < glyph.unicodes.length; j += 1) {\n\t            addSegment(t, glyph.unicodes[j], i);\n\t        }\n\t\n\t        t.segments = t.segments.sort(function(a, b) {\n\t            return a.start - b.start;\n\t        });\n\t    }\n\t\n\t    addTerminatorSegment(t);\n\t\n\t    var segCount;\n\t    segCount = t.segments.length;\n\t    t.segCountX2 = segCount * 2;\n\t    t.searchRange = Math.pow(2, Math.floor(Math.log(segCount) / Math.log(2))) * 2;\n\t    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n\t    t.rangeShift = t.segCountX2 - t.searchRange;\n\t\n\t    // Set up parallel segment arrays.\n\t    var endCounts = [];\n\t    var startCounts = [];\n\t    var idDeltas = [];\n\t    var idRangeOffsets = [];\n\t    var glyphIds = [];\n\t\n\t    for (i = 0; i < segCount; i += 1) {\n\t        var segment = t.segments[i];\n\t        endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});\n\t        startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});\n\t        idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});\n\t        idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});\n\t        if (segment.glyphId !== undefined) {\n\t            glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});\n\t        }\n\t    }\n\t\n\t    t.fields = t.fields.concat(endCounts);\n\t    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});\n\t    t.fields = t.fields.concat(startCounts);\n\t    t.fields = t.fields.concat(idDeltas);\n\t    t.fields = t.fields.concat(idRangeOffsets);\n\t    t.fields = t.fields.concat(glyphIds);\n\t\n\t    t.length = 14 + // Subtable header\n\t        endCounts.length * 2 +\n\t        2 + // reservedPad\n\t        startCounts.length * 2 +\n\t        idDeltas.length * 2 +\n\t        idRangeOffsets.length * 2 +\n\t        glyphIds.length * 2;\n\t\n\t    return t;\n\t}\n\t\n\texports.parse = parseCmapTable;\n\texports.make = makeCmapTable;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Parsing utility functions\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\t\n\t// Retrieve an unsigned byte from the DataView.\n\texports.getByte = function getByte(dataView, offset) {\n\t    return dataView.getUint8(offset);\n\t};\n\t\n\texports.getCard8 = exports.getByte;\n\t\n\t// Retrieve an unsigned 16-bit short from the DataView.\n\t// The value is stored in big endian.\n\tfunction getUShort(dataView, offset) {\n\t    return dataView.getUint16(offset, false);\n\t}\n\t\n\texports.getUShort = exports.getCard16 = getUShort;\n\t\n\t// Retrieve a signed 16-bit short from the DataView.\n\t// The value is stored in big endian.\n\texports.getShort = function(dataView, offset) {\n\t    return dataView.getInt16(offset, false);\n\t};\n\t\n\t// Retrieve an unsigned 32-bit long from the DataView.\n\t// The value is stored in big endian.\n\texports.getULong = function(dataView, offset) {\n\t    return dataView.getUint32(offset, false);\n\t};\n\t\n\t// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n\t// The value is stored in big endian.\n\texports.getFixed = function(dataView, offset) {\n\t    var decimal = dataView.getInt16(offset, false);\n\t    var fraction = dataView.getUint16(offset + 2, false);\n\t    return decimal + fraction / 65535;\n\t};\n\t\n\t// Retrieve a 4-character tag from the DataView.\n\t// Tags are used to identify tables.\n\texports.getTag = function(dataView, offset) {\n\t    var tag = '';\n\t    for (var i = offset; i < offset + 4; i += 1) {\n\t        tag += String.fromCharCode(dataView.getInt8(i));\n\t    }\n\t\n\t    return tag;\n\t};\n\t\n\t// Retrieve an offset from the DataView.\n\t// Offsets are 1 to 4 bytes in length, depending on the offSize argument.\n\texports.getOffset = function(dataView, offset, offSize) {\n\t    var v = 0;\n\t    for (var i = 0; i < offSize; i += 1) {\n\t        v <<= 8;\n\t        v += dataView.getUint8(offset + i);\n\t    }\n\t\n\t    return v;\n\t};\n\t\n\t// Retrieve a number of bytes from start offset to the end offset from the DataView.\n\texports.getBytes = function(dataView, startOffset, endOffset) {\n\t    var bytes = [];\n\t    for (var i = startOffset; i < endOffset; i += 1) {\n\t        bytes.push(dataView.getUint8(i));\n\t    }\n\t\n\t    return bytes;\n\t};\n\t\n\t// Convert the list of bytes to a string.\n\texports.bytesToString = function(bytes) {\n\t    var s = '';\n\t    for (var i = 0; i < bytes.length; i += 1) {\n\t        s += String.fromCharCode(bytes[i]);\n\t    }\n\t\n\t    return s;\n\t};\n\t\n\tvar typeOffsets = {\n\t    byte: 1,\n\t    uShort: 2,\n\t    short: 2,\n\t    uLong: 4,\n\t    fixed: 4,\n\t    longDateTime: 8,\n\t    tag: 4\n\t};\n\t\n\t// A stateful parser that changes the offset whenever a value is retrieved.\n\t// The data is a DataView.\n\tfunction Parser(data, offset) {\n\t    this.data = data;\n\t    this.offset = offset;\n\t    this.relativeOffset = 0;\n\t}\n\t\n\tParser.prototype.parseByte = function() {\n\t    var v = this.data.getUint8(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 1;\n\t    return v;\n\t};\n\t\n\tParser.prototype.parseChar = function() {\n\t    var v = this.data.getInt8(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 1;\n\t    return v;\n\t};\n\t\n\tParser.prototype.parseCard8 = Parser.prototype.parseByte;\n\t\n\tParser.prototype.parseUShort = function() {\n\t    var v = this.data.getUint16(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 2;\n\t    return v;\n\t};\n\t\n\tParser.prototype.parseCard16 = Parser.prototype.parseUShort;\n\tParser.prototype.parseSID = Parser.prototype.parseUShort;\n\tParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\t\n\tParser.prototype.parseShort = function() {\n\t    var v = this.data.getInt16(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 2;\n\t    return v;\n\t};\n\t\n\tParser.prototype.parseF2Dot14 = function() {\n\t    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n\t    this.relativeOffset += 2;\n\t    return v;\n\t};\n\t\n\tParser.prototype.parseULong = function() {\n\t    var v = exports.getULong(this.data, this.offset + this.relativeOffset);\n\t    this.relativeOffset += 4;\n\t    return v;\n\t};\n\t\n\tParser.prototype.parseFixed = function() {\n\t    var v = exports.getFixed(this.data, this.offset + this.relativeOffset);\n\t    this.relativeOffset += 4;\n\t    return v;\n\t};\n\t\n\tParser.prototype.parseString = function(length) {\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    var string = '';\n\t    this.relativeOffset += length;\n\t    for (var i = 0; i < length; i++) {\n\t        string += String.fromCharCode(dataView.getUint8(offset + i));\n\t    }\n\t\n\t    return string;\n\t};\n\t\n\tParser.prototype.parseTag = function() {\n\t    return this.parseString(4);\n\t};\n\t\n\t// LONGDATETIME is a 64-bit integer.\n\t// JavaScript and unix timestamps traditionally use 32 bits, so we\n\t// only take the last 32 bits.\n\t// + Since until 2038 those bits will be filled by zeros we can ignore them.\n\tParser.prototype.parseLongDateTime = function() {\n\t    var v = exports.getULong(this.data, this.offset + this.relativeOffset + 4);\n\t    // Subtract seconds between 01/01/1904 and 01/01/1970\n\t    // to convert Apple Mac timstamp to Standard Unix timestamp\n\t    v -= 2082844800;\n\t    this.relativeOffset += 8;\n\t    return v;\n\t};\n\t\n\tParser.prototype.parseVersion = function() {\n\t    var major = getUShort(this.data, this.offset + this.relativeOffset);\n\t\n\t    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n\t    // This returns the correct number if minor = 0xN000 where N is 0-9\n\t    var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n\t    this.relativeOffset += 4;\n\t    return major + minor / 0x1000 / 10;\n\t};\n\t\n\tParser.prototype.skip = function(type, amount) {\n\t    if (amount === undefined) {\n\t        amount = 1;\n\t    }\n\t\n\t    this.relativeOffset += typeOffsets[type] * amount;\n\t};\n\t\n\t///// Parsing lists and records ///////////////////////////////\n\t\n\t// Parse a list of 16 bit integers. The length of the list can be read on the stream\n\t// or provided as an argument.\n\tParser.prototype.parseOffset16List =\n\tParser.prototype.parseUShortList = function(count) {\n\t    if (count === undefined) { count = this.parseUShort(); }\n\t    var offsets = new Array(count);\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    for (var i = 0; i < count; i++) {\n\t        offsets[i] = dataView.getUint16(offset);\n\t        offset += 2;\n\t    }\n\t\n\t    this.relativeOffset += count * 2;\n\t    return offsets;\n\t};\n\t\n\t/**\n\t * Parse a list of items.\n\t * Record count is optional, if omitted it is read from the stream.\n\t * itemCallback is one of the Parser methods.\n\t */\n\tParser.prototype.parseList = function(count, itemCallback) {\n\t    if (!itemCallback) {\n\t        itemCallback = count;\n\t        count = this.parseUShort();\n\t    }\n\t    var list = new Array(count);\n\t    for (var i = 0; i < count; i++) {\n\t        list[i] = itemCallback.call(this);\n\t    }\n\t    return list;\n\t};\n\t\n\t/**\n\t * Parse a list of records.\n\t * Record count is optional, if omitted it is read from the stream.\n\t * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n\t */\n\tParser.prototype.parseRecordList = function(count, recordDescription) {\n\t    // If the count argument is absent, read it in the stream.\n\t    if (!recordDescription) {\n\t        recordDescription = count;\n\t        count = this.parseUShort();\n\t    }\n\t    var records = new Array(count);\n\t    var fields = Object.keys(recordDescription);\n\t    for (var i = 0; i < count; i++) {\n\t        var rec = {};\n\t        for (var j = 0; j < fields.length; j++) {\n\t            var fieldName = fields[j];\n\t            var fieldType = recordDescription[fieldName];\n\t            rec[fieldName] = fieldType.call(this);\n\t        }\n\t        records[i] = rec;\n\t    }\n\t    return records;\n\t};\n\t\n\t// Parse a data structure into an object\n\t// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n\tParser.prototype.parseStruct = function(description) {\n\t    if (typeof description === 'function') {\n\t        return description.call(this);\n\t    } else {\n\t        var fields = Object.keys(description);\n\t        var struct = {};\n\t        for (var j = 0; j < fields.length; j++) {\n\t            var fieldName = fields[j];\n\t            var fieldType = description[fieldName];\n\t            struct[fieldName] = fieldType.call(this);\n\t        }\n\t        return struct;\n\t    }\n\t};\n\t\n\tParser.prototype.parsePointer = function(description) {\n\t    var structOffset = this.parseOffset16();\n\t    if (structOffset > 0) {                         // NULL offset => return indefined\n\t        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n\t    }\n\t};\n\t\n\t/**\n\t * Parse a list of offsets to lists of 16-bit integers,\n\t * or a list of offsets to lists of offsets to any kind of items.\n\t * If itemCallback is not provided, a list of list of UShort is assumed.\n\t * If provided, itemCallback is called on each item and must parse the item.\n\t * See examples in tables/gsub.js\n\t */\n\tParser.prototype.parseListOfLists = function(itemCallback) {\n\t    var offsets = this.parseOffset16List();\n\t    var count = offsets.length;\n\t    var relativeOffset = this.relativeOffset;\n\t    var list = new Array(count);\n\t    for (var i = 0; i < count; i++) {\n\t        var start = offsets[i];\n\t        if (start === 0) {                  // NULL offset\n\t            list[i] = undefined;            // Add i as owned property to list. Convenient with assert.\n\t            continue;\n\t        }\n\t        this.relativeOffset = start;\n\t        if (itemCallback) {\n\t            var subOffsets = this.parseOffset16List();\n\t            var subList = new Array(subOffsets.length);\n\t            for (var j = 0; j < subOffsets.length; j++) {\n\t                this.relativeOffset = start + subOffsets[j];\n\t                subList[j] = itemCallback.call(this);\n\t            }\n\t            list[i] = subList;\n\t        } else {\n\t            list[i] = this.parseUShortList();\n\t        }\n\t    }\n\t    this.relativeOffset = relativeOffset;\n\t    return list;\n\t};\n\t\n\t///// Complex tables parsing //////////////////////////////////\n\t\n\t// Parse a coverage table in a GSUB, GPOS or GDEF table.\n\t// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\t// parser.offset must point to the start of the table containing the coverage.\n\tParser.prototype.parseCoverage = function() {\n\t    var startOffset = this.offset + this.relativeOffset;\n\t    var format = this.parseUShort();\n\t    var count = this.parseUShort();\n\t    if (format === 1) {\n\t        return {\n\t            format: 1,\n\t            glyphs: this.parseUShortList(count)\n\t        };\n\t    } else if (format === 2) {\n\t        var ranges = new Array(count);\n\t        for (var i = 0; i < count; i++) {\n\t            ranges[i] = {\n\t                start: this.parseUShort(),\n\t                end: this.parseUShort(),\n\t                index: this.parseUShort()\n\t            };\n\t        }\n\t        return {\n\t            format: 2,\n\t            ranges: ranges\n\t        };\n\t    }\n\t    check.assert(false, '0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');\n\t};\n\t\n\t// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n\t// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\tParser.prototype.parseClassDef = function() {\n\t    var startOffset = this.offset + this.relativeOffset;\n\t    var format = this.parseUShort();\n\t    if (format === 1) {\n\t        return {\n\t            format: 1,\n\t            startGlyph: this.parseUShort(),\n\t            classes: this.parseUShortList()\n\t        };\n\t    } else if (format === 2) {\n\t        return {\n\t            format: 2,\n\t            ranges: this.parseRecordList({\n\t                start: Parser.uShort,\n\t                end: Parser.uShort,\n\t                classId: Parser.uShort\n\t            })\n\t        };\n\t    }\n\t    check.assert(false, '0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');\n\t};\n\t\n\t///// Static methods ///////////////////////////////////\n\t// These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\t\n\tParser.list = function(count, itemCallback) {\n\t    return function() {\n\t        return this.parseList(count, itemCallback);\n\t    };\n\t};\n\t\n\tParser.recordList = function(count, recordDescription) {\n\t    return function() {\n\t        return this.parseRecordList(count, recordDescription);\n\t    };\n\t};\n\t\n\tParser.pointer = function(description) {\n\t    return function() {\n\t        return this.parsePointer(description);\n\t    };\n\t};\n\t\n\tParser.tag = Parser.prototype.parseTag;\n\tParser.byte = Parser.prototype.parseByte;\n\tParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\n\tParser.uShortList = Parser.prototype.parseUShortList;\n\tParser.struct = Parser.prototype.parseStruct;\n\tParser.coverage = Parser.prototype.parseCoverage;\n\tParser.classDef = Parser.prototype.parseClassDef;\n\t\n\t///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n\t// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\t\n\tvar langSysTable = {\n\t    reserved: Parser.uShort,\n\t    reqFeatureIndex: Parser.uShort,\n\t    featureIndexes: Parser.uShortList\n\t};\n\t\n\tParser.prototype.parseScriptList = function() {\n\t    return this.parsePointer(Parser.recordList({\n\t        tag: Parser.tag,\n\t        script: Parser.pointer({\n\t            defaultLangSys: Parser.pointer(langSysTable),\n\t            langSysRecords: Parser.recordList({\n\t                tag: Parser.tag,\n\t                langSys: Parser.pointer(langSysTable)\n\t            })\n\t        })\n\t    }));\n\t};\n\t\n\tParser.prototype.parseFeatureList = function() {\n\t    return this.parsePointer(Parser.recordList({\n\t        tag: Parser.tag,\n\t        feature: Parser.pointer({\n\t            featureParams: Parser.offset16,\n\t            lookupListIndexes: Parser.uShortList\n\t        })\n\t    }));\n\t};\n\t\n\tParser.prototype.parseLookupList = function(lookupTableParsers) {\n\t    return this.parsePointer(Parser.list(Parser.pointer(function() {\n\t        var lookupType = this.parseUShort();\n\t        check.argument(1 <= lookupType && lookupType <= 8, 'GSUB lookup type ' + lookupType + ' unknown.');\n\t        var lookupFlag = this.parseUShort();\n\t        var useMarkFilteringSet = lookupFlag & 0x10;\n\t        return {\n\t            lookupType: lookupType,\n\t            lookupFlag: lookupFlag,\n\t            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n\t            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined\n\t        };\n\t    })));\n\t};\n\t\n\texports.Parser = Parser;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `CFF` table contains the glyph outlines in PostScript format.\n\t// https://www.microsoft.com/typography/OTSPEC/cff.htm\n\t// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/cff.pdf\n\t// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/type2.pdf\n\t\n\t'use strict';\n\t\n\tvar encoding = __webpack_require__(4);\n\tvar glyphset = __webpack_require__(14);\n\tvar parse = __webpack_require__(12);\n\tvar path = __webpack_require__(6);\n\tvar table = __webpack_require__(9);\n\t\n\t// Custom equals function that can also check lists.\n\tfunction equals(a, b) {\n\t    if (a === b) {\n\t        return true;\n\t    } else if (Array.isArray(a) && Array.isArray(b)) {\n\t        if (a.length !== b.length) {\n\t            return false;\n\t        }\n\t\n\t        for (var i = 0; i < a.length; i += 1) {\n\t            if (!equals(a[i], b[i])) {\n\t                return false;\n\t            }\n\t        }\n\t\n\t        return true;\n\t    } else {\n\t        return false;\n\t    }\n\t}\n\t\n\t// Parse a `CFF` INDEX array.\n\t// An index array consists of a list of offsets, then a list of objects at those offsets.\n\tfunction parseCFFIndex(data, start, conversionFn) {\n\t    //var i, objectOffset, endOffset;\n\t    var offsets = [];\n\t    var objects = [];\n\t    var count = parse.getCard16(data, start);\n\t    var i;\n\t    var objectOffset;\n\t    var endOffset;\n\t    if (count !== 0) {\n\t        var offsetSize = parse.getByte(data, start + 2);\n\t        objectOffset = start + ((count + 1) * offsetSize) + 2;\n\t        var pos = start + 3;\n\t        for (i = 0; i < count + 1; i += 1) {\n\t            offsets.push(parse.getOffset(data, pos, offsetSize));\n\t            pos += offsetSize;\n\t        }\n\t\n\t        // The total size of the index array is 4 header bytes + the value of the last offset.\n\t        endOffset = objectOffset + offsets[count];\n\t    } else {\n\t        endOffset = start + 2;\n\t    }\n\t\n\t    for (i = 0; i < offsets.length - 1; i += 1) {\n\t        var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);\n\t        if (conversionFn) {\n\t            value = conversionFn(value);\n\t        }\n\t\n\t        objects.push(value);\n\t    }\n\t\n\t    return {objects: objects, startOffset: start, endOffset: endOffset};\n\t}\n\t\n\t// Parse a `CFF` DICT real value.\n\tfunction parseFloatOperand(parser) {\n\t    var s = '';\n\t    var eof = 15;\n\t    var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n\t    while (true) {\n\t        var b = parser.parseByte();\n\t        var n1 = b >> 4;\n\t        var n2 = b & 15;\n\t\n\t        if (n1 === eof) {\n\t            break;\n\t        }\n\t\n\t        s += lookup[n1];\n\t\n\t        if (n2 === eof) {\n\t            break;\n\t        }\n\t\n\t        s += lookup[n2];\n\t    }\n\t\n\t    return parseFloat(s);\n\t}\n\t\n\t// Parse a `CFF` DICT operand.\n\tfunction parseOperand(parser, b0) {\n\t    var b1;\n\t    var b2;\n\t    var b3;\n\t    var b4;\n\t    if (b0 === 28) {\n\t        b1 = parser.parseByte();\n\t        b2 = parser.parseByte();\n\t        return b1 << 8 | b2;\n\t    }\n\t\n\t    if (b0 === 29) {\n\t        b1 = parser.parseByte();\n\t        b2 = parser.parseByte();\n\t        b3 = parser.parseByte();\n\t        b4 = parser.parseByte();\n\t        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n\t    }\n\t\n\t    if (b0 === 30) {\n\t        return parseFloatOperand(parser);\n\t    }\n\t\n\t    if (b0 >= 32 && b0 <= 246) {\n\t        return b0 - 139;\n\t    }\n\t\n\t    if (b0 >= 247 && b0 <= 250) {\n\t        b1 = parser.parseByte();\n\t        return (b0 - 247) * 256 + b1 + 108;\n\t    }\n\t\n\t    if (b0 >= 251 && b0 <= 254) {\n\t        b1 = parser.parseByte();\n\t        return -(b0 - 251) * 256 - b1 - 108;\n\t    }\n\t\n\t    throw new Error('Invalid b0 ' + b0);\n\t}\n\t\n\t// Convert the entries returned by `parseDict` to a proper dictionary.\n\t// If a value is a list of one, it is unpacked.\n\tfunction entriesToObject(entries) {\n\t    var o = {};\n\t    for (var i = 0; i < entries.length; i += 1) {\n\t        var key = entries[i][0];\n\t        var values = entries[i][1];\n\t        var value;\n\t        if (values.length === 1) {\n\t            value = values[0];\n\t        } else {\n\t            value = values;\n\t        }\n\t\n\t        if (o.hasOwnProperty(key)) {\n\t            throw new Error('Object ' + o + ' already has key ' + key);\n\t        }\n\t\n\t        o[key] = value;\n\t    }\n\t\n\t    return o;\n\t}\n\t\n\t// Parse a `CFF` DICT object.\n\t// A dictionary contains key-value pairs in a compact tokenized format.\n\tfunction parseCFFDict(data, start, size) {\n\t    start = start !== undefined ? start : 0;\n\t    var parser = new parse.Parser(data, start);\n\t    var entries = [];\n\t    var operands = [];\n\t    size = size !== undefined ? size : data.length;\n\t\n\t    while (parser.relativeOffset < size) {\n\t        var op = parser.parseByte();\n\t\n\t        // The first byte for each dict item distinguishes between operator (key) and operand (value).\n\t        // Values <= 21 are operators.\n\t        if (op <= 21) {\n\t            // Two-byte operators have an initial escape byte of 12.\n\t            if (op === 12) {\n\t                op = 1200 + parser.parseByte();\n\t            }\n\t\n\t            entries.push([op, operands]);\n\t            operands = [];\n\t        } else {\n\t            // Since the operands (values) come before the operators (keys), we store all operands in a list\n\t            // until we encounter an operator.\n\t            operands.push(parseOperand(parser, op));\n\t        }\n\t    }\n\t\n\t    return entriesToObject(entries);\n\t}\n\t\n\t// Given a String Index (SID), return the value of the string.\n\t// Strings below index 392 are standard CFF strings and are not encoded in the font.\n\tfunction getCFFString(strings, index) {\n\t    if (index <= 390) {\n\t        index = encoding.cffStandardStrings[index];\n\t    } else {\n\t        index = strings[index - 391];\n\t    }\n\t\n\t    return index;\n\t}\n\t\n\t// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n\t// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\n\tfunction interpretDict(dict, meta, strings) {\n\t    var newDict = {};\n\t\n\t    // Because we also want to include missing values, we start out from the meta list\n\t    // and lookup values in the dict.\n\t    for (var i = 0; i < meta.length; i += 1) {\n\t        var m = meta[i];\n\t        var value = dict[m.op];\n\t        if (value === undefined) {\n\t            value = m.value !== undefined ? m.value : null;\n\t        }\n\t\n\t        if (m.type === 'SID') {\n\t            value = getCFFString(strings, value);\n\t        }\n\t\n\t        newDict[m.name] = value;\n\t    }\n\t\n\t    return newDict;\n\t}\n\t\n\t// Parse the CFF header.\n\tfunction parseCFFHeader(data, start) {\n\t    var header = {};\n\t    header.formatMajor = parse.getCard8(data, start);\n\t    header.formatMinor = parse.getCard8(data, start + 1);\n\t    header.size = parse.getCard8(data, start + 2);\n\t    header.offsetSize = parse.getCard8(data, start + 3);\n\t    header.startOffset = start;\n\t    header.endOffset = start + 4;\n\t    return header;\n\t}\n\t\n\tvar TOP_DICT_META = [\n\t    {name: 'version', op: 0, type: 'SID'},\n\t    {name: 'notice', op: 1, type: 'SID'},\n\t    {name: 'copyright', op: 1200, type: 'SID'},\n\t    {name: 'fullName', op: 2, type: 'SID'},\n\t    {name: 'familyName', op: 3, type: 'SID'},\n\t    {name: 'weight', op: 4, type: 'SID'},\n\t    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},\n\t    {name: 'italicAngle', op: 1202, type: 'number', value: 0},\n\t    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},\n\t    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},\n\t    {name: 'paintType', op: 1205, type: 'number', value: 0},\n\t    {name: 'charstringType', op: 1206, type: 'number', value: 2},\n\t    {name: 'fontMatrix', op: 1207, type: ['real', 'real', 'real', 'real', 'real', 'real'], value: [0.001, 0, 0, 0.001, 0, 0]},\n\t    {name: 'uniqueId', op: 13, type: 'number'},\n\t    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},\n\t    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},\n\t    {name: 'xuid', op: 14, type: [], value: null},\n\t    {name: 'charset', op: 15, type: 'offset', value: 0},\n\t    {name: 'encoding', op: 16, type: 'offset', value: 0},\n\t    {name: 'charStrings', op: 17, type: 'offset', value: 0},\n\t    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]}\n\t];\n\t\n\tvar PRIVATE_DICT_META = [\n\t    {name: 'subrs', op: 19, type: 'offset', value: 0},\n\t    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},\n\t    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}\n\t];\n\t\n\t// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n\t// The top dictionary contains the essential metadata for the font, together with the private dictionary.\n\tfunction parseCFFTopDict(data, strings) {\n\t    var dict = parseCFFDict(data, 0, data.byteLength);\n\t    return interpretDict(dict, TOP_DICT_META, strings);\n\t}\n\t\n\t// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\n\tfunction parseCFFPrivateDict(data, start, size, strings) {\n\t    var dict = parseCFFDict(data, start, size);\n\t    return interpretDict(dict, PRIVATE_DICT_META, strings);\n\t}\n\t\n\t// Parse the CFF charset table, which contains internal names for all the glyphs.\n\t// This function will return a list of glyph names.\n\t// See Adobe TN #5176 chapter 13, \"Charsets\".\n\tfunction parseCFFCharset(data, start, nGlyphs, strings) {\n\t    var i;\n\t    var sid;\n\t    var count;\n\t    var parser = new parse.Parser(data, start);\n\t\n\t    // The .notdef glyph is not included, so subtract 1.\n\t    nGlyphs -= 1;\n\t    var charset = ['.notdef'];\n\t\n\t    var format = parser.parseCard8();\n\t    if (format === 0) {\n\t        for (i = 0; i < nGlyphs; i += 1) {\n\t            sid = parser.parseSID();\n\t            charset.push(getCFFString(strings, sid));\n\t        }\n\t    } else if (format === 1) {\n\t        while (charset.length <= nGlyphs) {\n\t            sid = parser.parseSID();\n\t            count = parser.parseCard8();\n\t            for (i = 0; i <= count; i += 1) {\n\t                charset.push(getCFFString(strings, sid));\n\t                sid += 1;\n\t            }\n\t        }\n\t    } else if (format === 2) {\n\t        while (charset.length <= nGlyphs) {\n\t            sid = parser.parseSID();\n\t            count = parser.parseCard16();\n\t            for (i = 0; i <= count; i += 1) {\n\t                charset.push(getCFFString(strings, sid));\n\t                sid += 1;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Unknown charset format ' + format);\n\t    }\n\t\n\t    return charset;\n\t}\n\t\n\t// Parse the CFF encoding data. Only one encoding can be specified per font.\n\t// See Adobe TN #5176 chapter 12, \"Encodings\".\n\tfunction parseCFFEncoding(data, start, charset) {\n\t    var i;\n\t    var code;\n\t    var enc = {};\n\t    var parser = new parse.Parser(data, start);\n\t    var format = parser.parseCard8();\n\t    if (format === 0) {\n\t        var nCodes = parser.parseCard8();\n\t        for (i = 0; i < nCodes; i += 1) {\n\t            code = parser.parseCard8();\n\t            enc[code] = i;\n\t        }\n\t    } else if (format === 1) {\n\t        var nRanges = parser.parseCard8();\n\t        code = 1;\n\t        for (i = 0; i < nRanges; i += 1) {\n\t            var first = parser.parseCard8();\n\t            var nLeft = parser.parseCard8();\n\t            for (var j = first; j <= first + nLeft; j += 1) {\n\t                enc[j] = code;\n\t                code += 1;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Unknown encoding format ' + format);\n\t    }\n\t\n\t    return new encoding.CffEncoding(enc, charset);\n\t}\n\t\n\t// Take in charstring code and return a Glyph object.\n\t// The encoding is described in the Type 2 Charstring Format\n\t// https://www.microsoft.com/typography/OTSPEC/charstr2.htm\n\tfunction parseCFFCharstring(font, glyph, code) {\n\t    var c1x;\n\t    var c1y;\n\t    var c2x;\n\t    var c2y;\n\t    var p = new path.Path();\n\t    var stack = [];\n\t    var nStems = 0;\n\t    var haveWidth = false;\n\t    var width = font.defaultWidthX;\n\t    var open = false;\n\t    var x = 0;\n\t    var y = 0;\n\t\n\t    function newContour(x, y) {\n\t        if (open) {\n\t            p.closePath();\n\t        }\n\t\n\t        p.moveTo(x, y);\n\t        open = true;\n\t    }\n\t\n\t    function parseStems() {\n\t        var hasWidthArg;\n\t\n\t        // The number of stem operators on the stack is always even.\n\t        // If the value is uneven, that means a width is specified.\n\t        hasWidthArg = stack.length % 2 !== 0;\n\t        if (hasWidthArg && !haveWidth) {\n\t            width = stack.shift() + font.nominalWidthX;\n\t        }\n\t\n\t        nStems += stack.length >> 1;\n\t        stack.length = 0;\n\t        haveWidth = true;\n\t    }\n\t\n\t    function parse(code) {\n\t        var b1;\n\t        var b2;\n\t        var b3;\n\t        var b4;\n\t        var codeIndex;\n\t        var subrCode;\n\t        var jpx;\n\t        var jpy;\n\t        var c3x;\n\t        var c3y;\n\t        var c4x;\n\t        var c4y;\n\t\n\t        var i = 0;\n\t        while (i < code.length) {\n\t            var v = code[i];\n\t            i += 1;\n\t            switch (v) {\n\t                case 1: // hstem\n\t                    parseStems();\n\t                    break;\n\t                case 3: // vstem\n\t                    parseStems();\n\t                    break;\n\t                case 4: // vmoveto\n\t                    if (stack.length > 1 && !haveWidth) {\n\t                        width = stack.shift() + font.nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\t\n\t                    y += stack.pop();\n\t                    newContour(x, y);\n\t                    break;\n\t                case 5: // rlineto\n\t                    while (stack.length > 0) {\n\t                        x += stack.shift();\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\t\n\t                    break;\n\t                case 6: // hlineto\n\t                    while (stack.length > 0) {\n\t                        x += stack.shift();\n\t                        p.lineTo(x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\t\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\t\n\t                    break;\n\t                case 7: // vlineto\n\t                    while (stack.length > 0) {\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\t\n\t                        x += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\t\n\t                    break;\n\t                case 8: // rrcurveto\n\t                    while (stack.length > 0) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\t\n\t                    break;\n\t                case 10: // callsubr\n\t                    codeIndex = stack.pop() + font.subrsBias;\n\t                    subrCode = font.subrs[codeIndex];\n\t                    if (subrCode) {\n\t                        parse(subrCode);\n\t                    }\n\t\n\t                    break;\n\t                case 11: // return\n\t                    return;\n\t                case 12: // flex operators\n\t                    v = code[i];\n\t                    i += 1;\n\t                    switch (v) {\n\t                        case 35: // flex\n\t                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y   + stack.shift();    // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y + stack.shift();    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = jpy + stack.shift();    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = c3y + stack.shift();    // dy5\n\t                            x = c4x + stack.shift();      // dx6\n\t                            y = c4y + stack.shift();      // dy6\n\t                            stack.shift();                // flex depth\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        case 34: // hflex\n\t                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y;                      // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y;                    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = c2y;                    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = y;                      // dy5\n\t                            x = c4x + stack.shift();      // dx6\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        case 36: // hflex1\n\t                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y   + stack.shift();    // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y;                    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = c2y;                    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = c3y + stack.shift();    // dy5\n\t                            x = c4x + stack.shift();      // dx6\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        case 37: // flex1\n\t                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y   + stack.shift();    // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y + stack.shift();    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = jpy + stack.shift();    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = c3y + stack.shift();    // dy5\n\t                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n\t                                x = c4x + stack.shift();\n\t                            } else {\n\t                                y = c4y + stack.shift();\n\t                            }\n\t\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        default:\n\t                            console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);\n\t                            stack.length = 0;\n\t                    }\n\t                    break;\n\t                case 14: // endchar\n\t                    if (stack.length > 0 && !haveWidth) {\n\t                        width = stack.shift() + font.nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\t\n\t                    if (open) {\n\t                        p.closePath();\n\t                        open = false;\n\t                    }\n\t\n\t                    break;\n\t                case 18: // hstemhm\n\t                    parseStems();\n\t                    break;\n\t                case 19: // hintmask\n\t                case 20: // cntrmask\n\t                    parseStems();\n\t                    i += (nStems + 7) >> 3;\n\t                    break;\n\t                case 21: // rmoveto\n\t                    if (stack.length > 2 && !haveWidth) {\n\t                        width = stack.shift() + font.nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\t\n\t                    y += stack.pop();\n\t                    x += stack.pop();\n\t                    newContour(x, y);\n\t                    break;\n\t                case 22: // hmoveto\n\t                    if (stack.length > 1 && !haveWidth) {\n\t                        width = stack.shift() + font.nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\t\n\t                    x += stack.pop();\n\t                    newContour(x, y);\n\t                    break;\n\t                case 23: // vstemhm\n\t                    parseStems();\n\t                    break;\n\t                case 24: // rcurveline\n\t                    while (stack.length > 2) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\t\n\t                    x += stack.shift();\n\t                    y += stack.shift();\n\t                    p.lineTo(x, y);\n\t                    break;\n\t                case 25: // rlinecurve\n\t                    while (stack.length > 6) {\n\t                        x += stack.shift();\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\t\n\t                    c1x = x + stack.shift();\n\t                    c1y = y + stack.shift();\n\t                    c2x = c1x + stack.shift();\n\t                    c2y = c1y + stack.shift();\n\t                    x = c2x + stack.shift();\n\t                    y = c2y + stack.shift();\n\t                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    break;\n\t                case 26: // vvcurveto\n\t                    if (stack.length % 2) {\n\t                        x += stack.shift();\n\t                    }\n\t\n\t                    while (stack.length > 0) {\n\t                        c1x = x;\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x;\n\t                        y = c2y + stack.shift();\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\t\n\t                    break;\n\t                case 27: // hhcurveto\n\t                    if (stack.length % 2) {\n\t                        y += stack.shift();\n\t                    }\n\t\n\t                    while (stack.length > 0) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y;\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y;\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\t\n\t                    break;\n\t                case 28: // shortint\n\t                    b1 = code[i];\n\t                    b2 = code[i + 1];\n\t                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n\t                    i += 2;\n\t                    break;\n\t                case 29: // callgsubr\n\t                    codeIndex = stack.pop() + font.gsubrsBias;\n\t                    subrCode = font.gsubrs[codeIndex];\n\t                    if (subrCode) {\n\t                        parse(subrCode);\n\t                    }\n\t\n\t                    break;\n\t                case 30: // vhcurveto\n\t                    while (stack.length > 0) {\n\t                        c1x = x;\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\t\n\t                        c1x = x + stack.shift();\n\t                        c1y = y;\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\t\n\t                    break;\n\t                case 31: // hvcurveto\n\t                    while (stack.length > 0) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y;\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\t\n\t                        c1x = x;\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\t\n\t                    break;\n\t                default:\n\t                    if (v < 32) {\n\t                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);\n\t                    } else if (v < 247) {\n\t                        stack.push(v - 139);\n\t                    } else if (v < 251) {\n\t                        b1 = code[i];\n\t                        i += 1;\n\t                        stack.push((v - 247) * 256 + b1 + 108);\n\t                    } else if (v < 255) {\n\t                        b1 = code[i];\n\t                        i += 1;\n\t                        stack.push(-(v - 251) * 256 - b1 - 108);\n\t                    } else {\n\t                        b1 = code[i];\n\t                        b2 = code[i + 1];\n\t                        b3 = code[i + 2];\n\t                        b4 = code[i + 3];\n\t                        i += 4;\n\t                        stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);\n\t                    }\n\t            }\n\t        }\n\t    }\n\t\n\t    parse(code);\n\t\n\t    glyph.advanceWidth = width;\n\t    return p;\n\t}\n\t\n\t// Subroutines are encoded using the negative half of the number space.\n\t// See type 2 chapter 4.7 \"Subroutine operators\".\n\tfunction calcCFFSubroutineBias(subrs) {\n\t    var bias;\n\t    if (subrs.length < 1240) {\n\t        bias = 107;\n\t    } else if (subrs.length < 33900) {\n\t        bias = 1131;\n\t    } else {\n\t        bias = 32768;\n\t    }\n\t\n\t    return bias;\n\t}\n\t\n\t// Parse the `CFF` table, which contains the glyph outlines in PostScript format.\n\tfunction parseCFFTable(data, start, font) {\n\t    font.tables.cff = {};\n\t    var header = parseCFFHeader(data, start);\n\t    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n\t    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n\t    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);\n\t    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n\t    font.gsubrs = globalSubrIndex.objects;\n\t    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\t\n\t    var topDictData = new DataView(new Uint8Array(topDictIndex.objects[0]).buffer);\n\t    var topDict = parseCFFTopDict(topDictData, stringIndex.objects);\n\t    font.tables.cff.topDict = topDict;\n\t\n\t    var privateDictOffset = start + topDict['private'][1];\n\t    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict['private'][0], stringIndex.objects);\n\t    font.defaultWidthX = privateDict.defaultWidthX;\n\t    font.nominalWidthX = privateDict.nominalWidthX;\n\t\n\t    if (privateDict.subrs !== 0) {\n\t        var subrOffset = privateDictOffset + privateDict.subrs;\n\t        var subrIndex = parseCFFIndex(data, subrOffset);\n\t        font.subrs = subrIndex.objects;\n\t        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n\t    } else {\n\t        font.subrs = [];\n\t        font.subrsBias = 0;\n\t    }\n\t\n\t    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n\t    var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n\t    font.nGlyphs = charStringsIndex.objects.length;\n\t\n\t    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n\t    if (topDict.encoding === 0) { // Standard encoding\n\t        font.cffEncoding = new encoding.CffEncoding(encoding.cffStandardEncoding, charset);\n\t    } else if (topDict.encoding === 1) { // Expert encoding\n\t        font.cffEncoding = new encoding.CffEncoding(encoding.cffExpertEncoding, charset);\n\t    } else {\n\t        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n\t    }\n\t\n\t    // Prefer the CMAP encoding to the CFF encoding.\n\t    font.encoding = font.encoding || font.cffEncoding;\n\t\n\t    font.glyphs = new glyphset.GlyphSet(font);\n\t    for (var i = 0; i < font.nGlyphs; i += 1) {\n\t        var charString = charStringsIndex.objects[i];\n\t        font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n\t    }\n\t}\n\t\n\t// Convert a string to a String ID (SID).\n\t// The list of strings is modified in place.\n\tfunction encodeString(s, strings) {\n\t    var sid;\n\t\n\t    // Is the string in the CFF standard strings?\n\t    var i = encoding.cffStandardStrings.indexOf(s);\n\t    if (i >= 0) {\n\t        sid = i;\n\t    }\n\t\n\t    // Is the string already in the string index?\n\t    i = strings.indexOf(s);\n\t    if (i >= 0) {\n\t        sid = i + encoding.cffStandardStrings.length;\n\t    } else {\n\t        sid = encoding.cffStandardStrings.length + strings.length;\n\t        strings.push(s);\n\t    }\n\t\n\t    return sid;\n\t}\n\t\n\tfunction makeHeader() {\n\t    return new table.Record('Header', [\n\t        {name: 'major', type: 'Card8', value: 1},\n\t        {name: 'minor', type: 'Card8', value: 0},\n\t        {name: 'hdrSize', type: 'Card8', value: 4},\n\t        {name: 'major', type: 'Card8', value: 1}\n\t    ]);\n\t}\n\t\n\tfunction makeNameIndex(fontNames) {\n\t    var t = new table.Record('Name INDEX', [\n\t        {name: 'names', type: 'INDEX', value: []}\n\t    ]);\n\t    t.names = [];\n\t    for (var i = 0; i < fontNames.length; i += 1) {\n\t        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});\n\t    }\n\t\n\t    return t;\n\t}\n\t\n\t// Given a dictionary's metadata, create a DICT structure.\n\tfunction makeDict(meta, attrs, strings) {\n\t    var m = {};\n\t    for (var i = 0; i < meta.length; i += 1) {\n\t        var entry = meta[i];\n\t        var value = attrs[entry.name];\n\t        if (value !== undefined && !equals(value, entry.value)) {\n\t            if (entry.type === 'SID') {\n\t                value = encodeString(value, strings);\n\t            }\n\t\n\t            m[entry.op] = {name: entry.name, type: entry.type, value: value};\n\t        }\n\t    }\n\t\n\t    return m;\n\t}\n\t\n\t// The Top DICT houses the global font attributes.\n\tfunction makeTopDict(attrs, strings) {\n\t    var t = new table.Record('Top DICT', [\n\t        {name: 'dict', type: 'DICT', value: {}}\n\t    ]);\n\t    t.dict = makeDict(TOP_DICT_META, attrs, strings);\n\t    return t;\n\t}\n\t\n\tfunction makeTopDictIndex(topDict) {\n\t    var t = new table.Record('Top DICT INDEX', [\n\t        {name: 'topDicts', type: 'INDEX', value: []}\n\t    ]);\n\t    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];\n\t    return t;\n\t}\n\t\n\tfunction makeStringIndex(strings) {\n\t    var t = new table.Record('String INDEX', [\n\t        {name: 'strings', type: 'INDEX', value: []}\n\t    ]);\n\t    t.strings = [];\n\t    for (var i = 0; i < strings.length; i += 1) {\n\t        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});\n\t    }\n\t\n\t    return t;\n\t}\n\t\n\tfunction makeGlobalSubrIndex() {\n\t    // Currently we don't use subroutines.\n\t    return new table.Record('Global Subr INDEX', [\n\t        {name: 'subrs', type: 'INDEX', value: []}\n\t    ]);\n\t}\n\t\n\tfunction makeCharsets(glyphNames, strings) {\n\t    var t = new table.Record('Charsets', [\n\t        {name: 'format', type: 'Card8', value: 0}\n\t    ]);\n\t    for (var i = 0; i < glyphNames.length; i += 1) {\n\t        var glyphName = glyphNames[i];\n\t        var glyphSID = encodeString(glyphName, strings);\n\t        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});\n\t    }\n\t\n\t    return t;\n\t}\n\t\n\tfunction glyphToOps(glyph) {\n\t    var ops = [];\n\t    var path = glyph.path;\n\t    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});\n\t    var x = 0;\n\t    var y = 0;\n\t    for (var i = 0; i < path.commands.length; i += 1) {\n\t        var dx;\n\t        var dy;\n\t        var cmd = path.commands[i];\n\t        if (cmd.type === 'Q') {\n\t            // CFF only supports bézier curves, so convert the quad to a bézier.\n\t            var _13 = 1 / 3;\n\t            var _23 = 2 / 3;\n\t\n\t            // We're going to create a new command so we don't change the original path.\n\t            cmd = {\n\t                type: 'C',\n\t                x: cmd.x,\n\t                y: cmd.y,\n\t                x1: _13 * x + _23 * cmd.x1,\n\t                y1: _13 * y + _23 * cmd.y1,\n\t                x2: _13 * cmd.x + _23 * cmd.x1,\n\t                y2: _13 * cmd.y + _23 * cmd.y1\n\t            };\n\t        }\n\t\n\t        if (cmd.type === 'M') {\n\t            dx = Math.round(cmd.x - x);\n\t            dy = Math.round(cmd.y - y);\n\t            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n\t            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n\t            ops.push({name: 'rmoveto', type: 'OP', value: 21});\n\t            x = Math.round(cmd.x);\n\t            y = Math.round(cmd.y);\n\t        } else if (cmd.type === 'L') {\n\t            dx = Math.round(cmd.x - x);\n\t            dy = Math.round(cmd.y - y);\n\t            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n\t            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n\t            ops.push({name: 'rlineto', type: 'OP', value: 5});\n\t            x = Math.round(cmd.x);\n\t            y = Math.round(cmd.y);\n\t        } else if (cmd.type === 'C') {\n\t            var dx1 = Math.round(cmd.x1 - x);\n\t            var dy1 = Math.round(cmd.y1 - y);\n\t            var dx2 = Math.round(cmd.x2 - cmd.x1);\n\t            var dy2 = Math.round(cmd.y2 - cmd.y1);\n\t            dx = Math.round(cmd.x - cmd.x2);\n\t            dy = Math.round(cmd.y - cmd.y2);\n\t            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});\n\t            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});\n\t            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});\n\t            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});\n\t            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n\t            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n\t            ops.push({name: 'rrcurveto', type: 'OP', value: 8});\n\t            x = Math.round(cmd.x);\n\t            y = Math.round(cmd.y);\n\t        }\n\t\n\t        // Contours are closed automatically.\n\t\n\t    }\n\t\n\t    ops.push({name: 'endchar', type: 'OP', value: 14});\n\t    return ops;\n\t}\n\t\n\tfunction makeCharStringsIndex(glyphs) {\n\t    var t = new table.Record('CharStrings INDEX', [\n\t        {name: 'charStrings', type: 'INDEX', value: []}\n\t    ]);\n\t\n\t    for (var i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs.get(i);\n\t        var ops = glyphToOps(glyph);\n\t        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});\n\t    }\n\t\n\t    return t;\n\t}\n\t\n\tfunction makePrivateDict(attrs, strings) {\n\t    var t = new table.Record('Private DICT', [\n\t        {name: 'dict', type: 'DICT', value: {}}\n\t    ]);\n\t    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n\t    return t;\n\t}\n\t\n\tfunction makeCFFTable(glyphs, options) {\n\t    var t = new table.Table('CFF ', [\n\t        {name: 'header', type: 'RECORD'},\n\t        {name: 'nameIndex', type: 'RECORD'},\n\t        {name: 'topDictIndex', type: 'RECORD'},\n\t        {name: 'stringIndex', type: 'RECORD'},\n\t        {name: 'globalSubrIndex', type: 'RECORD'},\n\t        {name: 'charsets', type: 'RECORD'},\n\t        {name: 'charStringsIndex', type: 'RECORD'},\n\t        {name: 'privateDict', type: 'RECORD'}\n\t    ]);\n\t\n\t    var fontScale = 1 / options.unitsPerEm;\n\t    // We use non-zero values for the offsets so that the DICT encodes them.\n\t    // This is important because the size of the Top DICT plays a role in offset calculation,\n\t    // and the size shouldn't change after we've written correct offsets.\n\t    var attrs = {\n\t        version: options.version,\n\t        fullName: options.fullName,\n\t        familyName: options.familyName,\n\t        weight: options.weightName,\n\t        fontBBox: options.fontBBox || [0, 0, 0, 0],\n\t        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],\n\t        charset: 999,\n\t        encoding: 0,\n\t        charStrings: 999,\n\t        private: [0, 999]\n\t    };\n\t\n\t    var privateAttrs = {};\n\t\n\t    var glyphNames = [];\n\t    var glyph;\n\t\n\t    // Skip first glyph (.notdef)\n\t    for (var i = 1; i < glyphs.length; i += 1) {\n\t        glyph = glyphs.get(i);\n\t        glyphNames.push(glyph.name);\n\t    }\n\t\n\t    var strings = [];\n\t\n\t    t.header = makeHeader();\n\t    t.nameIndex = makeNameIndex([options.postScriptName]);\n\t    var topDict = makeTopDict(attrs, strings);\n\t    t.topDictIndex = makeTopDictIndex(topDict);\n\t    t.globalSubrIndex = makeGlobalSubrIndex();\n\t    t.charsets = makeCharsets(glyphNames, strings);\n\t    t.charStringsIndex = makeCharStringsIndex(glyphs);\n\t    t.privateDict = makePrivateDict(privateAttrs, strings);\n\t\n\t    // Needs to come at the end, to encode all custom strings used in the font.\n\t    t.stringIndex = makeStringIndex(strings);\n\t\n\t    var startOffset = t.header.sizeOf() +\n\t        t.nameIndex.sizeOf() +\n\t        t.topDictIndex.sizeOf() +\n\t        t.stringIndex.sizeOf() +\n\t        t.globalSubrIndex.sizeOf();\n\t    attrs.charset = startOffset;\n\t\n\t    // We use the CFF standard encoding; proper encoding will be handled in cmap.\n\t    attrs.encoding = 0;\n\t    attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n\t    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\t\n\t    // Recreate the Top DICT INDEX with the correct offsets.\n\t    topDict = makeTopDict(attrs, strings);\n\t    t.topDictIndex = makeTopDictIndex(topDict);\n\t\n\t    return t;\n\t}\n\t\n\texports.parse = parseCFFTable;\n\texports.make = makeCFFTable;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The GlyphSet object\n\t\n\t'use strict';\n\t\n\tvar _glyph = __webpack_require__(15);\n\t\n\t// Define a property on the glyph that depends on the path being loaded.\n\tfunction defineDependentProperty(glyph, externalName, internalName) {\n\t    Object.defineProperty(glyph, externalName, {\n\t        get: function() {\n\t            // Request the path property to make sure the path is loaded.\n\t            glyph.path; // jshint ignore:line\n\t            return glyph[internalName];\n\t        },\n\t        set: function(newValue) {\n\t            glyph[internalName] = newValue;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t}\n\t\n\t/**\n\t * A GlyphSet represents all glyphs available in the font, but modelled using\n\t * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n\t * necessary, to keep the memory footprint down.\n\t * @exports opentype.GlyphSet\n\t * @class\n\t * @param {opentype.Font}\n\t * @param {Array}\n\t */\n\tfunction GlyphSet(font, glyphs) {\n\t    this.font = font;\n\t    this.glyphs = {};\n\t    if (Array.isArray(glyphs)) {\n\t        for (var i = 0; i < glyphs.length; i++) {\n\t            this.glyphs[i] = glyphs[i];\n\t        }\n\t    }\n\t\n\t    this.length = (glyphs && glyphs.length) || 0;\n\t}\n\t\n\t/**\n\t * @param  {number} index\n\t * @return {opentype.Glyph}\n\t */\n\tGlyphSet.prototype.get = function(index) {\n\t    if (typeof this.glyphs[index] === 'function') {\n\t        this.glyphs[index] = this.glyphs[index]();\n\t    }\n\t\n\t    return this.glyphs[index];\n\t};\n\t\n\t/**\n\t * @param  {number} index\n\t * @param  {Object}\n\t */\n\tGlyphSet.prototype.push = function(index, loader) {\n\t    this.glyphs[index] = loader;\n\t    this.length++;\n\t};\n\t\n\t/**\n\t * @alias opentype.glyphLoader\n\t * @param  {opentype.Font} font\n\t * @param  {number} index\n\t * @return {opentype.Glyph}\n\t */\n\tfunction glyphLoader(font, index) {\n\t    return new _glyph.Glyph({index: index, font: font});\n\t}\n\t\n\t/**\n\t * Generate a stub glyph that can be filled with all metadata *except*\n\t * the \"points\" and \"path\" properties, which must be loaded only once\n\t * the glyph's path is actually requested for text shaping.\n\t * @alias opentype.ttfGlyphLoader\n\t * @param  {opentype.Font} font\n\t * @param  {number} index\n\t * @param  {Function} parseGlyph\n\t * @param  {Object} data\n\t * @param  {number} position\n\t * @param  {Function} buildPath\n\t * @return {opentype.Glyph}\n\t */\n\tfunction ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n\t    return function() {\n\t        var glyph = new _glyph.Glyph({index: index, font: font});\n\t\n\t        glyph.path = function() {\n\t            parseGlyph(glyph, data, position);\n\t            var path = buildPath(font.glyphs, glyph);\n\t            path.unitsPerEm = font.unitsPerEm;\n\t            return path;\n\t        };\n\t\n\t        defineDependentProperty(glyph, 'xMin', '_xMin');\n\t        defineDependentProperty(glyph, 'xMax', '_xMax');\n\t        defineDependentProperty(glyph, 'yMin', '_yMin');\n\t        defineDependentProperty(glyph, 'yMax', '_yMax');\n\t\n\t        return glyph;\n\t    };\n\t}\n\t/**\n\t * @alias opentype.cffGlyphLoader\n\t * @param  {opentype.Font} font\n\t * @param  {number} index\n\t * @param  {Function} parseCFFCharstring\n\t * @param  {string} charstring\n\t * @return {opentype.Glyph}\n\t */\n\tfunction cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n\t    return function() {\n\t        var glyph = new _glyph.Glyph({index: index, font: font});\n\t\n\t        glyph.path = function() {\n\t            var path = parseCFFCharstring(font, glyph, charstring);\n\t            path.unitsPerEm = font.unitsPerEm;\n\t            return path;\n\t        };\n\t\n\t        return glyph;\n\t    };\n\t}\n\t\n\texports.GlyphSet = GlyphSet;\n\texports.glyphLoader = glyphLoader;\n\texports.ttfGlyphLoader = ttfGlyphLoader;\n\texports.cffGlyphLoader = cffGlyphLoader;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The Glyph object\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar draw = __webpack_require__(16);\n\tvar path = __webpack_require__(6);\n\t\n\tfunction getPathDefinition(glyph, path) {\n\t    var _path = path || { commands: [] };\n\t    return {\n\t        configurable: true,\n\t\n\t        get: function() {\n\t            if (typeof _path === 'function') {\n\t                _path = _path();\n\t            }\n\t\n\t            return _path;\n\t        },\n\t\n\t        set: function(p) {\n\t            _path = p;\n\t        }\n\t    };\n\t}\n\t/**\n\t * @typedef GlyphOptions\n\t * @type Object\n\t * @property {string} [name] - The glyph name\n\t * @property {number} [unicode]\n\t * @property {Array} [unicodes]\n\t * @property {number} [xMin]\n\t * @property {number} [yMin]\n\t * @property {number} [xMax]\n\t * @property {number} [yMax]\n\t * @property {number} [advanceWidth]\n\t */\n\t\n\t// A Glyph is an individual mark that often corresponds to a character.\n\t// Some glyphs, such as ligatures, are a combination of many characters.\n\t// Glyphs are the basic building blocks of a font.\n\t//\n\t// The `Glyph` class contains utility methods for drawing the path and its points.\n\t/**\n\t * @exports opentype.Glyph\n\t * @class\n\t * @param {GlyphOptions}\n\t * @constructor\n\t */\n\tfunction Glyph(options) {\n\t    // By putting all the code on a prototype function (which is only declared once)\n\t    // we reduce the memory requirements for larger fonts by some 2%\n\t    this.bindConstructorValues(options);\n\t}\n\t\n\t/**\n\t * @param  {GlyphOptions}\n\t */\n\tGlyph.prototype.bindConstructorValues = function(options) {\n\t    this.index = options.index || 0;\n\t\n\t    // These three values cannnot be deferred for memory optimization:\n\t    this.name = options.name || null;\n\t    this.unicode = options.unicode || undefined;\n\t    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n\t\n\t    // But by binding these values only when necessary, we reduce can\n\t    // the memory requirements by almost 3% for larger fonts.\n\t    if (options.xMin) {\n\t        this.xMin = options.xMin;\n\t    }\n\t\n\t    if (options.yMin) {\n\t        this.yMin = options.yMin;\n\t    }\n\t\n\t    if (options.xMax) {\n\t        this.xMax = options.xMax;\n\t    }\n\t\n\t    if (options.yMax) {\n\t        this.yMax = options.yMax;\n\t    }\n\t\n\t    if (options.advanceWidth) {\n\t        this.advanceWidth = options.advanceWidth;\n\t    }\n\t\n\t    // The path for a glyph is the most memory intensive, and is bound as a value\n\t    // with a getter/setter to ensure we actually do path parsing only once the\n\t    // path is actually needed by anything.\n\t    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n\t};\n\t\n\t/**\n\t * @param {number}\n\t */\n\tGlyph.prototype.addUnicode = function(unicode) {\n\t    if (this.unicodes.length === 0) {\n\t        this.unicode = unicode;\n\t    }\n\t\n\t    this.unicodes.push(unicode);\n\t};\n\t\n\t/**\n\t * Convert the glyph to a Path we can draw on a drawing context.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {Object=} options - xScale, yScale to strech the glyph.\n\t * @return {opentype.Path}\n\t */\n\tGlyph.prototype.getPath = function(x, y, fontSize, options) {\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    options = options !== undefined ? options : {xScale: 1.0, yScale: 1.0};\n\t    fontSize = fontSize !== undefined ? fontSize : 72;\n\t    var scale = 1 / this.path.unitsPerEm * fontSize;\n\t    var xScale = options.xScale * scale;\n\t    var yScale = options.yScale * scale;\n\t\n\t    var p = new path.Path();\n\t    var commands = this.path.commands;\n\t    for (var i = 0; i < commands.length; i += 1) {\n\t        var cmd = commands[i];\n\t        if (cmd.type === 'M') {\n\t            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'L') {\n\t            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'Q') {\n\t            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n\t                               x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'C') {\n\t            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n\t                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),\n\t                      x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'Z') {\n\t            p.closePath();\n\t        }\n\t    }\n\t\n\t    return p;\n\t};\n\t\n\t/**\n\t * Split the glyph into contours.\n\t * This function is here for backwards compatibility, and to\n\t * provide raw access to the TrueType glyph outlines.\n\t * @return {Array}\n\t */\n\tGlyph.prototype.getContours = function() {\n\t    if (this.points === undefined) {\n\t        return [];\n\t    }\n\t\n\t    var contours = [];\n\t    var currentContour = [];\n\t    for (var i = 0; i < this.points.length; i += 1) {\n\t        var pt = this.points[i];\n\t        currentContour.push(pt);\n\t        if (pt.lastPointOfContour) {\n\t            contours.push(currentContour);\n\t            currentContour = [];\n\t        }\n\t    }\n\t\n\t    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n\t    return contours;\n\t};\n\t\n\t/**\n\t * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n\t * @return {Object}\n\t */\n\tGlyph.prototype.getMetrics = function() {\n\t    var commands = this.path.commands;\n\t    var xCoords = [];\n\t    var yCoords = [];\n\t    for (var i = 0; i < commands.length; i += 1) {\n\t        var cmd = commands[i];\n\t        if (cmd.type !== 'Z') {\n\t            xCoords.push(cmd.x);\n\t            yCoords.push(cmd.y);\n\t        }\n\t\n\t        if (cmd.type === 'Q' || cmd.type === 'C') {\n\t            xCoords.push(cmd.x1);\n\t            yCoords.push(cmd.y1);\n\t        }\n\t\n\t        if (cmd.type === 'C') {\n\t            xCoords.push(cmd.x2);\n\t            yCoords.push(cmd.y2);\n\t        }\n\t    }\n\t\n\t    var metrics = {\n\t        xMin: Math.min.apply(null, xCoords),\n\t        yMin: Math.min.apply(null, yCoords),\n\t        xMax: Math.max.apply(null, xCoords),\n\t        yMax: Math.max.apply(null, yCoords),\n\t        leftSideBearing: this.leftSideBearing\n\t    };\n\t\n\t    if (!isFinite(metrics.xMin)) {\n\t        metrics.xMin = 0;\n\t    }\n\t\n\t    if (!isFinite(metrics.xMax)) {\n\t        metrics.xMax = this.advanceWidth;\n\t    }\n\t\n\t    if (!isFinite(metrics.yMin)) {\n\t        metrics.yMin = 0;\n\t    }\n\t\n\t    if (!isFinite(metrics.yMax)) {\n\t        metrics.yMax = 0;\n\t    }\n\t\n\t    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n\t    return metrics;\n\t};\n\t\n\t/**\n\t * Draw the glyph on the given context.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {Object=} options - xScale, yScale to strech the glyph.\n\t */\n\tGlyph.prototype.draw = function(ctx, x, y, fontSize, options) {\n\t    this.getPath(x, y, fontSize, options).draw(ctx);\n\t};\n\t\n\t/**\n\t * Draw the points of the glyph.\n\t * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t */\n\tGlyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n\t\n\t    function drawCircles(l, x, y, scale) {\n\t        var PI_SQ = Math.PI * 2;\n\t        ctx.beginPath();\n\t        for (var j = 0; j < l.length; j += 1) {\n\t            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));\n\t            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);\n\t        }\n\t\n\t        ctx.closePath();\n\t        ctx.fill();\n\t    }\n\t\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 24;\n\t    var scale = 1 / this.path.unitsPerEm * fontSize;\n\t\n\t    var blueCircles = [];\n\t    var redCircles = [];\n\t    var path = this.path;\n\t    for (var i = 0; i < path.commands.length; i += 1) {\n\t        var cmd = path.commands[i];\n\t        if (cmd.x !== undefined) {\n\t            blueCircles.push({x: cmd.x, y: -cmd.y});\n\t        }\n\t\n\t        if (cmd.x1 !== undefined) {\n\t            redCircles.push({x: cmd.x1, y: -cmd.y1});\n\t        }\n\t\n\t        if (cmd.x2 !== undefined) {\n\t            redCircles.push({x: cmd.x2, y: -cmd.y2});\n\t        }\n\t    }\n\t\n\t    ctx.fillStyle = 'blue';\n\t    drawCircles(blueCircles, x, y, scale);\n\t    ctx.fillStyle = 'red';\n\t    drawCircles(redCircles, x, y, scale);\n\t};\n\t\n\t/**\n\t * Draw lines indicating important font measurements.\n\t * Black lines indicate the origin of the coordinate system (point 0,0).\n\t * Blue lines indicate the glyph bounding box.\n\t * Green line indicates the advance width of the glyph.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t */\n\tGlyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n\t    var scale;\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 24;\n\t    scale = 1 / this.path.unitsPerEm * fontSize;\n\t    ctx.lineWidth = 1;\n\t\n\t    // Draw the origin\n\t    ctx.strokeStyle = 'black';\n\t    draw.line(ctx, x, -10000, x, 10000);\n\t    draw.line(ctx, -10000, y, 10000, y);\n\t\n\t    // This code is here due to memory optimization: by not using\n\t    // defaults in the constructor, we save a notable amount of memory.\n\t    var xMin = this.xMin || 0;\n\t    var yMin = this.yMin || 0;\n\t    var xMax = this.xMax || 0;\n\t    var yMax = this.yMax || 0;\n\t    var advanceWidth = this.advanceWidth || 0;\n\t\n\t    // Draw the glyph box\n\t    ctx.strokeStyle = 'blue';\n\t    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);\n\t    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);\n\t    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));\n\t    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));\n\t\n\t    // Draw the advance width\n\t    ctx.strokeStyle = 'green';\n\t    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);\n\t};\n\t\n\texports.Glyph = Glyph;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t// Drawing utility functions.\n\t\n\t'use strict';\n\t\n\t// Draw a line on the given context from point `x1,y1` to point `x2,y2`.\n\tfunction line(ctx, x1, y1, x2, y2) {\n\t    ctx.beginPath();\n\t    ctx.moveTo(x1, y1);\n\t    ctx.lineTo(x2, y2);\n\t    ctx.stroke();\n\t}\n\t\n\texports.line = line;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `head` table contains global information about the font.\n\t// https://www.microsoft.com/typography/OTSPEC/head.htm\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\t// Parse the header `head` table\n\tfunction parseHeadTable(data, start) {\n\t    var head = {};\n\t    var p = new parse.Parser(data, start);\n\t    head.version = p.parseVersion();\n\t    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n\t    head.checkSumAdjustment = p.parseULong();\n\t    head.magicNumber = p.parseULong();\n\t    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');\n\t    head.flags = p.parseUShort();\n\t    head.unitsPerEm = p.parseUShort();\n\t    head.created = p.parseLongDateTime();\n\t    head.modified = p.parseLongDateTime();\n\t    head.xMin = p.parseShort();\n\t    head.yMin = p.parseShort();\n\t    head.xMax = p.parseShort();\n\t    head.yMax = p.parseShort();\n\t    head.macStyle = p.parseUShort();\n\t    head.lowestRecPPEM = p.parseUShort();\n\t    head.fontDirectionHint = p.parseShort();\n\t    head.indexToLocFormat = p.parseShort();\n\t    head.glyphDataFormat = p.parseShort();\n\t    return head;\n\t}\n\t\n\tfunction makeHeadTable(options) {\n\t    // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970\n\t    var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;\n\t    var createdTimestamp = timestamp;\n\t\n\t    if (options.createdTimestamp) {\n\t        createdTimestamp = options.createdTimestamp + 2082844800;\n\t    }\n\t\n\t    return new table.Table('head', [\n\t        {name: 'version', type: 'FIXED', value: 0x00010000},\n\t        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},\n\t        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},\n\t        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},\n\t        {name: 'flags', type: 'USHORT', value: 0},\n\t        {name: 'unitsPerEm', type: 'USHORT', value: 1000},\n\t        {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},\n\t        {name: 'modified', type: 'LONGDATETIME', value: timestamp},\n\t        {name: 'xMin', type: 'SHORT', value: 0},\n\t        {name: 'yMin', type: 'SHORT', value: 0},\n\t        {name: 'xMax', type: 'SHORT', value: 0},\n\t        {name: 'yMax', type: 'SHORT', value: 0},\n\t        {name: 'macStyle', type: 'USHORT', value: 0},\n\t        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},\n\t        {name: 'fontDirectionHint', type: 'SHORT', value: 2},\n\t        {name: 'indexToLocFormat', type: 'SHORT', value: 0},\n\t        {name: 'glyphDataFormat', type: 'SHORT', value: 0}\n\t    ], options);\n\t}\n\t\n\texports.parse = parseHeadTable;\n\texports.make = makeHeadTable;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `hhea` table contains information for horizontal layout.\n\t// https://www.microsoft.com/typography/OTSPEC/hhea.htm\n\t\n\t'use strict';\n\t\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\t// Parse the horizontal header `hhea` table\n\tfunction parseHheaTable(data, start) {\n\t    var hhea = {};\n\t    var p = new parse.Parser(data, start);\n\t    hhea.version = p.parseVersion();\n\t    hhea.ascender = p.parseShort();\n\t    hhea.descender = p.parseShort();\n\t    hhea.lineGap = p.parseShort();\n\t    hhea.advanceWidthMax = p.parseUShort();\n\t    hhea.minLeftSideBearing = p.parseShort();\n\t    hhea.minRightSideBearing = p.parseShort();\n\t    hhea.xMaxExtent = p.parseShort();\n\t    hhea.caretSlopeRise = p.parseShort();\n\t    hhea.caretSlopeRun = p.parseShort();\n\t    hhea.caretOffset = p.parseShort();\n\t    p.relativeOffset += 8;\n\t    hhea.metricDataFormat = p.parseShort();\n\t    hhea.numberOfHMetrics = p.parseUShort();\n\t    return hhea;\n\t}\n\t\n\tfunction makeHheaTable(options) {\n\t    return new table.Table('hhea', [\n\t        {name: 'version', type: 'FIXED', value: 0x00010000},\n\t        {name: 'ascender', type: 'FWORD', value: 0},\n\t        {name: 'descender', type: 'FWORD', value: 0},\n\t        {name: 'lineGap', type: 'FWORD', value: 0},\n\t        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},\n\t        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},\n\t        {name: 'minRightSideBearing', type: 'FWORD', value: 0},\n\t        {name: 'xMaxExtent', type: 'FWORD', value: 0},\n\t        {name: 'caretSlopeRise', type: 'SHORT', value: 1},\n\t        {name: 'caretSlopeRun', type: 'SHORT', value: 0},\n\t        {name: 'caretOffset', type: 'SHORT', value: 0},\n\t        {name: 'reserved1', type: 'SHORT', value: 0},\n\t        {name: 'reserved2', type: 'SHORT', value: 0},\n\t        {name: 'reserved3', type: 'SHORT', value: 0},\n\t        {name: 'reserved4', type: 'SHORT', value: 0},\n\t        {name: 'metricDataFormat', type: 'SHORT', value: 0},\n\t        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}\n\t    ], options);\n\t}\n\t\n\texports.parse = parseHheaTable;\n\texports.make = makeHheaTable;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `hmtx` table contains the horizontal metrics for all glyphs.\n\t// https://www.microsoft.com/typography/OTSPEC/hmtx.htm\n\t\n\t'use strict';\n\t\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\t// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n\t// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\n\tfunction parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {\n\t    var advanceWidth;\n\t    var leftSideBearing;\n\t    var p = new parse.Parser(data, start);\n\t    for (var i = 0; i < numGlyphs; i += 1) {\n\t        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n\t        if (i < numMetrics) {\n\t            advanceWidth = p.parseUShort();\n\t            leftSideBearing = p.parseShort();\n\t        }\n\t\n\t        var glyph = glyphs.get(i);\n\t        glyph.advanceWidth = advanceWidth;\n\t        glyph.leftSideBearing = leftSideBearing;\n\t    }\n\t}\n\t\n\tfunction makeHmtxTable(glyphs) {\n\t    var t = new table.Table('hmtx', []);\n\t    for (var i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs.get(i);\n\t        var advanceWidth = glyph.advanceWidth || 0;\n\t        var leftSideBearing = glyph.leftSideBearing || 0;\n\t        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});\n\t        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});\n\t    }\n\t\n\t    return t;\n\t}\n\t\n\texports.parse = parseHmtxTable;\n\texports.make = makeHmtxTable;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n\t// languages for which TrueType does not assign a numeric code.\n\t// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6ltag.html\n\t// http://www.w3.org/International/articles/language-tags/\n\t// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\tfunction makeLtagTable(tags) {\n\t    var result = new table.Table('ltag', [\n\t        {name: 'version', type: 'ULONG', value: 1},\n\t        {name: 'flags', type: 'ULONG', value: 0},\n\t        {name: 'numTags', type: 'ULONG', value: tags.length}\n\t    ]);\n\t\n\t    var stringPool = '';\n\t    var stringPoolOffset = 12 + tags.length * 4;\n\t    for (var i = 0; i < tags.length; ++i) {\n\t        var pos = stringPool.indexOf(tags[i]);\n\t        if (pos < 0) {\n\t            pos = stringPool.length;\n\t            stringPool += tags[i];\n\t        }\n\t\n\t        result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});\n\t        result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});\n\t    }\n\t\n\t    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n\t    return result;\n\t}\n\t\n\tfunction parseLtagTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseULong();\n\t    check.argument(tableVersion === 1, 'Unsupported ltag table version.');\n\t    // The 'ltag' specification does not define any flags; skip the field.\n\t    p.skip('uLong', 1);\n\t    var numTags = p.parseULong();\n\t\n\t    var tags = [];\n\t    for (var i = 0; i < numTags; i++) {\n\t        var tag = '';\n\t        var offset = start + p.parseUShort();\n\t        var length = p.parseUShort();\n\t        for (var j = offset; j < offset + length; ++j) {\n\t            tag += String.fromCharCode(data.getInt8(j));\n\t        }\n\t\n\t        tags.push(tag);\n\t    }\n\t\n\t    return tags;\n\t}\n\t\n\texports.make = makeLtagTable;\n\texports.parse = parseLtagTable;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `maxp` table establishes the memory requirements for the font.\n\t// We need it just to get the number of glyphs in the font.\n\t// https://www.microsoft.com/typography/OTSPEC/maxp.htm\n\t\n\t'use strict';\n\t\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\t// Parse the maximum profile `maxp` table.\n\tfunction parseMaxpTable(data, start) {\n\t    var maxp = {};\n\t    var p = new parse.Parser(data, start);\n\t    maxp.version = p.parseVersion();\n\t    maxp.numGlyphs = p.parseUShort();\n\t    if (maxp.version === 1.0) {\n\t        maxp.maxPoints = p.parseUShort();\n\t        maxp.maxContours = p.parseUShort();\n\t        maxp.maxCompositePoints = p.parseUShort();\n\t        maxp.maxCompositeContours = p.parseUShort();\n\t        maxp.maxZones = p.parseUShort();\n\t        maxp.maxTwilightPoints = p.parseUShort();\n\t        maxp.maxStorage = p.parseUShort();\n\t        maxp.maxFunctionDefs = p.parseUShort();\n\t        maxp.maxInstructionDefs = p.parseUShort();\n\t        maxp.maxStackElements = p.parseUShort();\n\t        maxp.maxSizeOfInstructions = p.parseUShort();\n\t        maxp.maxComponentElements = p.parseUShort();\n\t        maxp.maxComponentDepth = p.parseUShort();\n\t    }\n\t\n\t    return maxp;\n\t}\n\t\n\tfunction makeMaxpTable(numGlyphs) {\n\t    return new table.Table('maxp', [\n\t        {name: 'version', type: 'FIXED', value: 0x00005000},\n\t        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n\t    ]);\n\t}\n\t\n\texports.parse = parseMaxpTable;\n\texports.make = makeMaxpTable;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `name` naming table.\n\t// https://www.microsoft.com/typography/OTSPEC/name.htm\n\t\n\t'use strict';\n\t\n\tvar types = __webpack_require__(10);\n\tvar decode = types.decode;\n\tvar encode = types.encode;\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\t// NameIDs for the name table.\n\tvar nameTableNames = [\n\t    'copyright',              // 0\n\t    'fontFamily',             // 1\n\t    'fontSubfamily',          // 2\n\t    'uniqueID',               // 3\n\t    'fullName',               // 4\n\t    'version',                // 5\n\t    'postScriptName',         // 6\n\t    'trademark',              // 7\n\t    'manufacturer',           // 8\n\t    'designer',               // 9\n\t    'description',            // 10\n\t    'manufacturerURL',        // 11\n\t    'designerURL',            // 12\n\t    'license',                // 13\n\t    'licenseURL',             // 14\n\t    'reserved',               // 15\n\t    'preferredFamily',        // 16\n\t    'preferredSubfamily',     // 17\n\t    'compatibleFullName',     // 18\n\t    'sampleText',             // 19\n\t    'postScriptFindFontName', // 20\n\t    'wwsFamily',              // 21\n\t    'wwsSubfamily'            // 22\n\t];\n\t\n\tvar macLanguages = {\n\t    0: 'en',\n\t    1: 'fr',\n\t    2: 'de',\n\t    3: 'it',\n\t    4: 'nl',\n\t    5: 'sv',\n\t    6: 'es',\n\t    7: 'da',\n\t    8: 'pt',\n\t    9: 'no',\n\t    10: 'he',\n\t    11: 'ja',\n\t    12: 'ar',\n\t    13: 'fi',\n\t    14: 'el',\n\t    15: 'is',\n\t    16: 'mt',\n\t    17: 'tr',\n\t    18: 'hr',\n\t    19: 'zh-Hant',\n\t    20: 'ur',\n\t    21: 'hi',\n\t    22: 'th',\n\t    23: 'ko',\n\t    24: 'lt',\n\t    25: 'pl',\n\t    26: 'hu',\n\t    27: 'es',\n\t    28: 'lv',\n\t    29: 'se',\n\t    30: 'fo',\n\t    31: 'fa',\n\t    32: 'ru',\n\t    33: 'zh',\n\t    34: 'nl-BE',\n\t    35: 'ga',\n\t    36: 'sq',\n\t    37: 'ro',\n\t    38: 'cz',\n\t    39: 'sk',\n\t    40: 'si',\n\t    41: 'yi',\n\t    42: 'sr',\n\t    43: 'mk',\n\t    44: 'bg',\n\t    45: 'uk',\n\t    46: 'be',\n\t    47: 'uz',\n\t    48: 'kk',\n\t    49: 'az-Cyrl',\n\t    50: 'az-Arab',\n\t    51: 'hy',\n\t    52: 'ka',\n\t    53: 'mo',\n\t    54: 'ky',\n\t    55: 'tg',\n\t    56: 'tk',\n\t    57: 'mn-CN',\n\t    58: 'mn',\n\t    59: 'ps',\n\t    60: 'ks',\n\t    61: 'ku',\n\t    62: 'sd',\n\t    63: 'bo',\n\t    64: 'ne',\n\t    65: 'sa',\n\t    66: 'mr',\n\t    67: 'bn',\n\t    68: 'as',\n\t    69: 'gu',\n\t    70: 'pa',\n\t    71: 'or',\n\t    72: 'ml',\n\t    73: 'kn',\n\t    74: 'ta',\n\t    75: 'te',\n\t    76: 'si',\n\t    77: 'my',\n\t    78: 'km',\n\t    79: 'lo',\n\t    80: 'vi',\n\t    81: 'id',\n\t    82: 'tl',\n\t    83: 'ms',\n\t    84: 'ms-Arab',\n\t    85: 'am',\n\t    86: 'ti',\n\t    87: 'om',\n\t    88: 'so',\n\t    89: 'sw',\n\t    90: 'rw',\n\t    91: 'rn',\n\t    92: 'ny',\n\t    93: 'mg',\n\t    94: 'eo',\n\t    128: 'cy',\n\t    129: 'eu',\n\t    130: 'ca',\n\t    131: 'la',\n\t    132: 'qu',\n\t    133: 'gn',\n\t    134: 'ay',\n\t    135: 'tt',\n\t    136: 'ug',\n\t    137: 'dz',\n\t    138: 'jv',\n\t    139: 'su',\n\t    140: 'gl',\n\t    141: 'af',\n\t    142: 'br',\n\t    143: 'iu',\n\t    144: 'gd',\n\t    145: 'gv',\n\t    146: 'ga',\n\t    147: 'to',\n\t    148: 'el-polyton',\n\t    149: 'kl',\n\t    150: 'az',\n\t    151: 'nn'\n\t};\n\t\n\t// MacOS language ID → MacOS script ID\n\t//\n\t// Note that the script ID is not sufficient to determine what encoding\n\t// to use in TrueType files. For some languages, MacOS used a modification\n\t// of a mainstream script. For example, an Icelandic name would be stored\n\t// with smRoman in the TrueType naming table, but the actual encoding\n\t// is a special Icelandic version of the normal Macintosh Roman encoding.\n\t// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal\n\t// Syllables but MacOS had run out of available script codes, so this was\n\t// done as a (pretty radical) \"modification\" of Ethiopic.\n\t//\n\t// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n\tvar macLanguageToScript = {\n\t    0: 0,  // langEnglish → smRoman\n\t    1: 0,  // langFrench → smRoman\n\t    2: 0,  // langGerman → smRoman\n\t    3: 0,  // langItalian → smRoman\n\t    4: 0,  // langDutch → smRoman\n\t    5: 0,  // langSwedish → smRoman\n\t    6: 0,  // langSpanish → smRoman\n\t    7: 0,  // langDanish → smRoman\n\t    8: 0,  // langPortuguese → smRoman\n\t    9: 0,  // langNorwegian → smRoman\n\t    10: 5,  // langHebrew → smHebrew\n\t    11: 1,  // langJapanese → smJapanese\n\t    12: 4,  // langArabic → smArabic\n\t    13: 0,  // langFinnish → smRoman\n\t    14: 6,  // langGreek → smGreek\n\t    15: 0,  // langIcelandic → smRoman (modified)\n\t    16: 0,  // langMaltese → smRoman\n\t    17: 0,  // langTurkish → smRoman (modified)\n\t    18: 0,  // langCroatian → smRoman (modified)\n\t    19: 2,  // langTradChinese → smTradChinese\n\t    20: 4,  // langUrdu → smArabic\n\t    21: 9,  // langHindi → smDevanagari\n\t    22: 21,  // langThai → smThai\n\t    23: 3,  // langKorean → smKorean\n\t    24: 29,  // langLithuanian → smCentralEuroRoman\n\t    25: 29,  // langPolish → smCentralEuroRoman\n\t    26: 29,  // langHungarian → smCentralEuroRoman\n\t    27: 29,  // langEstonian → smCentralEuroRoman\n\t    28: 29,  // langLatvian → smCentralEuroRoman\n\t    29: 0,  // langSami → smRoman\n\t    30: 0,  // langFaroese → smRoman (modified)\n\t    31: 4,  // langFarsi → smArabic (modified)\n\t    32: 7,  // langRussian → smCyrillic\n\t    33: 25,  // langSimpChinese → smSimpChinese\n\t    34: 0,  // langFlemish → smRoman\n\t    35: 0,  // langIrishGaelic → smRoman (modified)\n\t    36: 0,  // langAlbanian → smRoman\n\t    37: 0,  // langRomanian → smRoman (modified)\n\t    38: 29,  // langCzech → smCentralEuroRoman\n\t    39: 29,  // langSlovak → smCentralEuroRoman\n\t    40: 0,  // langSlovenian → smRoman (modified)\n\t    41: 5,  // langYiddish → smHebrew\n\t    42: 7,  // langSerbian → smCyrillic\n\t    43: 7,  // langMacedonian → smCyrillic\n\t    44: 7,  // langBulgarian → smCyrillic\n\t    45: 7,  // langUkrainian → smCyrillic (modified)\n\t    46: 7,  // langByelorussian → smCyrillic\n\t    47: 7,  // langUzbek → smCyrillic\n\t    48: 7,  // langKazakh → smCyrillic\n\t    49: 7,  // langAzerbaijani → smCyrillic\n\t    50: 4,  // langAzerbaijanAr → smArabic\n\t    51: 24,  // langArmenian → smArmenian\n\t    52: 23,  // langGeorgian → smGeorgian\n\t    53: 7,  // langMoldavian → smCyrillic\n\t    54: 7,  // langKirghiz → smCyrillic\n\t    55: 7,  // langTajiki → smCyrillic\n\t    56: 7,  // langTurkmen → smCyrillic\n\t    57: 27,  // langMongolian → smMongolian\n\t    58: 7,  // langMongolianCyr → smCyrillic\n\t    59: 4,  // langPashto → smArabic\n\t    60: 4,  // langKurdish → smArabic\n\t    61: 4,  // langKashmiri → smArabic\n\t    62: 4,  // langSindhi → smArabic\n\t    63: 26,  // langTibetan → smTibetan\n\t    64: 9,  // langNepali → smDevanagari\n\t    65: 9,  // langSanskrit → smDevanagari\n\t    66: 9,  // langMarathi → smDevanagari\n\t    67: 13,  // langBengali → smBengali\n\t    68: 13,  // langAssamese → smBengali\n\t    69: 11,  // langGujarati → smGujarati\n\t    70: 10,  // langPunjabi → smGurmukhi\n\t    71: 12,  // langOriya → smOriya\n\t    72: 17,  // langMalayalam → smMalayalam\n\t    73: 16,  // langKannada → smKannada\n\t    74: 14,  // langTamil → smTamil\n\t    75: 15,  // langTelugu → smTelugu\n\t    76: 18,  // langSinhalese → smSinhalese\n\t    77: 19,  // langBurmese → smBurmese\n\t    78: 20,  // langKhmer → smKhmer\n\t    79: 22,  // langLao → smLao\n\t    80: 30,  // langVietnamese → smVietnamese\n\t    81: 0,  // langIndonesian → smRoman\n\t    82: 0,  // langTagalog → smRoman\n\t    83: 0,  // langMalayRoman → smRoman\n\t    84: 4,  // langMalayArabic → smArabic\n\t    85: 28,  // langAmharic → smEthiopic\n\t    86: 28,  // langTigrinya → smEthiopic\n\t    87: 28,  // langOromo → smEthiopic\n\t    88: 0,  // langSomali → smRoman\n\t    89: 0,  // langSwahili → smRoman\n\t    90: 0,  // langKinyarwanda → smRoman\n\t    91: 0,  // langRundi → smRoman\n\t    92: 0,  // langNyanja → smRoman\n\t    93: 0,  // langMalagasy → smRoman\n\t    94: 0,  // langEsperanto → smRoman\n\t    128: 0,  // langWelsh → smRoman (modified)\n\t    129: 0,  // langBasque → smRoman\n\t    130: 0,  // langCatalan → smRoman\n\t    131: 0,  // langLatin → smRoman\n\t    132: 0,  // langQuechua → smRoman\n\t    133: 0,  // langGuarani → smRoman\n\t    134: 0,  // langAymara → smRoman\n\t    135: 7,  // langTatar → smCyrillic\n\t    136: 4,  // langUighur → smArabic\n\t    137: 26,  // langDzongkha → smTibetan\n\t    138: 0,  // langJavaneseRom → smRoman\n\t    139: 0,  // langSundaneseRom → smRoman\n\t    140: 0,  // langGalician → smRoman\n\t    141: 0,  // langAfrikaans → smRoman\n\t    142: 0,  // langBreton → smRoman (modified)\n\t    143: 28,  // langInuktitut → smEthiopic (modified)\n\t    144: 0,  // langScottishGaelic → smRoman (modified)\n\t    145: 0,  // langManxGaelic → smRoman (modified)\n\t    146: 0,  // langIrishGaelicScript → smRoman (modified)\n\t    147: 0,  // langTongan → smRoman\n\t    148: 6,  // langGreekAncient → smRoman\n\t    149: 0,  // langGreenlandic → smRoman\n\t    150: 0,  // langAzerbaijanRoman → smRoman\n\t    151: 0   // langNynorsk → smRoman\n\t};\n\t\n\t// While Microsoft indicates a region/country for all its language\n\t// IDs, we omit the region code if it's equal to the \"most likely\n\t// region subtag\" according to Unicode CLDR. For scripts, we omit\n\t// the subtag if it is equal to the Suppress-Script entry in the\n\t// IANA language subtag registry for IETF BCP 47.\n\t//\n\t// For example, Microsoft states that its language code 0x041A is\n\t// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'\n\t// and not 'hr-HR' because Croatia is the default country for Croatian,\n\t// according to Unicode CLDR. As another example, Microsoft states\n\t// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform\n\t// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script\n\t// for the Croatian language, according to IANA.\n\t//\n\t// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html\n\t// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n\tvar windowsLanguages = {\n\t    0x0436: 'af',\n\t    0x041C: 'sq',\n\t    0x0484: 'gsw',\n\t    0x045E: 'am',\n\t    0x1401: 'ar-DZ',\n\t    0x3C01: 'ar-BH',\n\t    0x0C01: 'ar',\n\t    0x0801: 'ar-IQ',\n\t    0x2C01: 'ar-JO',\n\t    0x3401: 'ar-KW',\n\t    0x3001: 'ar-LB',\n\t    0x1001: 'ar-LY',\n\t    0x1801: 'ary',\n\t    0x2001: 'ar-OM',\n\t    0x4001: 'ar-QA',\n\t    0x0401: 'ar-SA',\n\t    0x2801: 'ar-SY',\n\t    0x1C01: 'aeb',\n\t    0x3801: 'ar-AE',\n\t    0x2401: 'ar-YE',\n\t    0x042B: 'hy',\n\t    0x044D: 'as',\n\t    0x082C: 'az-Cyrl',\n\t    0x042C: 'az',\n\t    0x046D: 'ba',\n\t    0x042D: 'eu',\n\t    0x0423: 'be',\n\t    0x0845: 'bn',\n\t    0x0445: 'bn-IN',\n\t    0x201A: 'bs-Cyrl',\n\t    0x141A: 'bs',\n\t    0x047E: 'br',\n\t    0x0402: 'bg',\n\t    0x0403: 'ca',\n\t    0x0C04: 'zh-HK',\n\t    0x1404: 'zh-MO',\n\t    0x0804: 'zh',\n\t    0x1004: 'zh-SG',\n\t    0x0404: 'zh-TW',\n\t    0x0483: 'co',\n\t    0x041A: 'hr',\n\t    0x101A: 'hr-BA',\n\t    0x0405: 'cs',\n\t    0x0406: 'da',\n\t    0x048C: 'prs',\n\t    0x0465: 'dv',\n\t    0x0813: 'nl-BE',\n\t    0x0413: 'nl',\n\t    0x0C09: 'en-AU',\n\t    0x2809: 'en-BZ',\n\t    0x1009: 'en-CA',\n\t    0x2409: 'en-029',\n\t    0x4009: 'en-IN',\n\t    0x1809: 'en-IE',\n\t    0x2009: 'en-JM',\n\t    0x4409: 'en-MY',\n\t    0x1409: 'en-NZ',\n\t    0x3409: 'en-PH',\n\t    0x4809: 'en-SG',\n\t    0x1C09: 'en-ZA',\n\t    0x2C09: 'en-TT',\n\t    0x0809: 'en-GB',\n\t    0x0409: 'en',\n\t    0x3009: 'en-ZW',\n\t    0x0425: 'et',\n\t    0x0438: 'fo',\n\t    0x0464: 'fil',\n\t    0x040B: 'fi',\n\t    0x080C: 'fr-BE',\n\t    0x0C0C: 'fr-CA',\n\t    0x040C: 'fr',\n\t    0x140C: 'fr-LU',\n\t    0x180C: 'fr-MC',\n\t    0x100C: 'fr-CH',\n\t    0x0462: 'fy',\n\t    0x0456: 'gl',\n\t    0x0437: 'ka',\n\t    0x0C07: 'de-AT',\n\t    0x0407: 'de',\n\t    0x1407: 'de-LI',\n\t    0x1007: 'de-LU',\n\t    0x0807: 'de-CH',\n\t    0x0408: 'el',\n\t    0x046F: 'kl',\n\t    0x0447: 'gu',\n\t    0x0468: 'ha',\n\t    0x040D: 'he',\n\t    0x0439: 'hi',\n\t    0x040E: 'hu',\n\t    0x040F: 'is',\n\t    0x0470: 'ig',\n\t    0x0421: 'id',\n\t    0x045D: 'iu',\n\t    0x085D: 'iu-Latn',\n\t    0x083C: 'ga',\n\t    0x0434: 'xh',\n\t    0x0435: 'zu',\n\t    0x0410: 'it',\n\t    0x0810: 'it-CH',\n\t    0x0411: 'ja',\n\t    0x044B: 'kn',\n\t    0x043F: 'kk',\n\t    0x0453: 'km',\n\t    0x0486: 'quc',\n\t    0x0487: 'rw',\n\t    0x0441: 'sw',\n\t    0x0457: 'kok',\n\t    0x0412: 'ko',\n\t    0x0440: 'ky',\n\t    0x0454: 'lo',\n\t    0x0426: 'lv',\n\t    0x0427: 'lt',\n\t    0x082E: 'dsb',\n\t    0x046E: 'lb',\n\t    0x042F: 'mk',\n\t    0x083E: 'ms-BN',\n\t    0x043E: 'ms',\n\t    0x044C: 'ml',\n\t    0x043A: 'mt',\n\t    0x0481: 'mi',\n\t    0x047A: 'arn',\n\t    0x044E: 'mr',\n\t    0x047C: 'moh',\n\t    0x0450: 'mn',\n\t    0x0850: 'mn-CN',\n\t    0x0461: 'ne',\n\t    0x0414: 'nb',\n\t    0x0814: 'nn',\n\t    0x0482: 'oc',\n\t    0x0448: 'or',\n\t    0x0463: 'ps',\n\t    0x0415: 'pl',\n\t    0x0416: 'pt',\n\t    0x0816: 'pt-PT',\n\t    0x0446: 'pa',\n\t    0x046B: 'qu-BO',\n\t    0x086B: 'qu-EC',\n\t    0x0C6B: 'qu',\n\t    0x0418: 'ro',\n\t    0x0417: 'rm',\n\t    0x0419: 'ru',\n\t    0x243B: 'smn',\n\t    0x103B: 'smj-NO',\n\t    0x143B: 'smj',\n\t    0x0C3B: 'se-FI',\n\t    0x043B: 'se',\n\t    0x083B: 'se-SE',\n\t    0x203B: 'sms',\n\t    0x183B: 'sma-NO',\n\t    0x1C3B: 'sms',\n\t    0x044F: 'sa',\n\t    0x1C1A: 'sr-Cyrl-BA',\n\t    0x0C1A: 'sr',\n\t    0x181A: 'sr-Latn-BA',\n\t    0x081A: 'sr-Latn',\n\t    0x046C: 'nso',\n\t    0x0432: 'tn',\n\t    0x045B: 'si',\n\t    0x041B: 'sk',\n\t    0x0424: 'sl',\n\t    0x2C0A: 'es-AR',\n\t    0x400A: 'es-BO',\n\t    0x340A: 'es-CL',\n\t    0x240A: 'es-CO',\n\t    0x140A: 'es-CR',\n\t    0x1C0A: 'es-DO',\n\t    0x300A: 'es-EC',\n\t    0x440A: 'es-SV',\n\t    0x100A: 'es-GT',\n\t    0x480A: 'es-HN',\n\t    0x080A: 'es-MX',\n\t    0x4C0A: 'es-NI',\n\t    0x180A: 'es-PA',\n\t    0x3C0A: 'es-PY',\n\t    0x280A: 'es-PE',\n\t    0x500A: 'es-PR',\n\t\n\t    // Microsoft has defined two different language codes for\n\t    // “Spanish with modern sorting” and “Spanish with traditional\n\t    // sorting”. This makes sense for collation APIs, and it would be\n\t    // possible to express this in BCP 47 language tags via Unicode\n\t    // extensions (eg., es-u-co-trad is Spanish with traditional\n\t    // sorting). However, for storing names in fonts, the distinction\n\t    // does not make sense, so we give “es” in both cases.\n\t    0x0C0A: 'es',\n\t    0x040A: 'es',\n\t\n\t    0x540A: 'es-US',\n\t    0x380A: 'es-UY',\n\t    0x200A: 'es-VE',\n\t    0x081D: 'sv-FI',\n\t    0x041D: 'sv',\n\t    0x045A: 'syr',\n\t    0x0428: 'tg',\n\t    0x085F: 'tzm',\n\t    0x0449: 'ta',\n\t    0x0444: 'tt',\n\t    0x044A: 'te',\n\t    0x041E: 'th',\n\t    0x0451: 'bo',\n\t    0x041F: 'tr',\n\t    0x0442: 'tk',\n\t    0x0480: 'ug',\n\t    0x0422: 'uk',\n\t    0x042E: 'hsb',\n\t    0x0420: 'ur',\n\t    0x0843: 'uz-Cyrl',\n\t    0x0443: 'uz',\n\t    0x042A: 'vi',\n\t    0x0452: 'cy',\n\t    0x0488: 'wo',\n\t    0x0485: 'sah',\n\t    0x0478: 'ii',\n\t    0x046A: 'yo'\n\t};\n\t\n\t// Returns a IETF BCP 47 language code, for example 'zh-Hant'\n\t// for 'Chinese in the traditional script'.\n\tfunction getLanguageCode(platformID, languageID, ltag) {\n\t    switch (platformID) {\n\t        case 0:  // Unicode\n\t            if (languageID === 0xFFFF) {\n\t                return 'und';\n\t            } else if (ltag) {\n\t                return ltag[languageID];\n\t            }\n\t\n\t            break;\n\t\n\t        case 1:  // Macintosh\n\t            return macLanguages[languageID];\n\t\n\t        case 3:  // Windows\n\t            return windowsLanguages[languageID];\n\t    }\n\t\n\t    return undefined;\n\t}\n\t\n\tvar utf16 = 'utf-16';\n\t\n\t// MacOS script ID → encoding. This table stores the default case,\n\t// which can be overridden by macLanguageEncodings.\n\tvar macScriptEncodings = {\n\t    0: 'macintosh',           // smRoman\n\t    1: 'x-mac-japanese',      // smJapanese\n\t    2: 'x-mac-chinesetrad',   // smTradChinese\n\t    3: 'x-mac-korean',        // smKorean\n\t    6: 'x-mac-greek',         // smGreek\n\t    7: 'x-mac-cyrillic',      // smCyrillic\n\t    9: 'x-mac-devanagai',     // smDevanagari\n\t    10: 'x-mac-gurmukhi',     // smGurmukhi\n\t    11: 'x-mac-gujarati',     // smGujarati\n\t    12: 'x-mac-oriya',        // smOriya\n\t    13: 'x-mac-bengali',      // smBengali\n\t    14: 'x-mac-tamil',        // smTamil\n\t    15: 'x-mac-telugu',       // smTelugu\n\t    16: 'x-mac-kannada',      // smKannada\n\t    17: 'x-mac-malayalam',    // smMalayalam\n\t    18: 'x-mac-sinhalese',    // smSinhalese\n\t    19: 'x-mac-burmese',      // smBurmese\n\t    20: 'x-mac-khmer',        // smKhmer\n\t    21: 'x-mac-thai',         // smThai\n\t    22: 'x-mac-lao',          // smLao\n\t    23: 'x-mac-georgian',     // smGeorgian\n\t    24: 'x-mac-armenian',     // smArmenian\n\t    25: 'x-mac-chinesesimp',  // smSimpChinese\n\t    26: 'x-mac-tibetan',      // smTibetan\n\t    27: 'x-mac-mongolian',    // smMongolian\n\t    28: 'x-mac-ethiopic',     // smEthiopic\n\t    29: 'x-mac-ce',           // smCentralEuroRoman\n\t    30: 'x-mac-vietnamese',   // smVietnamese\n\t    31: 'x-mac-extarabic'     // smExtArabic\n\t};\n\t\n\t// MacOS language ID → encoding. This table stores the exceptional\n\t// cases, which override macScriptEncodings. For writing MacOS naming\n\t// tables, we need to emit a MacOS script ID. Therefore, we cannot\n\t// merge macScriptEncodings into macLanguageEncodings.\n\t//\n\t// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n\tvar macLanguageEncodings = {\n\t    15: 'x-mac-icelandic',    // langIcelandic\n\t    17: 'x-mac-turkish',      // langTurkish\n\t    18: 'x-mac-croatian',     // langCroatian\n\t    24: 'x-mac-ce',           // langLithuanian\n\t    25: 'x-mac-ce',           // langPolish\n\t    26: 'x-mac-ce',           // langHungarian\n\t    27: 'x-mac-ce',           // langEstonian\n\t    28: 'x-mac-ce',           // langLatvian\n\t    30: 'x-mac-icelandic',    // langFaroese\n\t    37: 'x-mac-romanian',     // langRomanian\n\t    38: 'x-mac-ce',           // langCzech\n\t    39: 'x-mac-ce',           // langSlovak\n\t    40: 'x-mac-ce',           // langSlovenian\n\t    143: 'x-mac-inuit',       // langInuktitut\n\t    146: 'x-mac-gaelic'       // langIrishGaelicScript\n\t};\n\t\n\tfunction getEncoding(platformID, encodingID, languageID) {\n\t    switch (platformID) {\n\t        case 0:  // Unicode\n\t            return utf16;\n\t\n\t        case 1:  // Apple Macintosh\n\t            return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];\n\t\n\t        case 3:  // Microsoft Windows\n\t            if (encodingID === 1 || encodingID === 10) {\n\t                return utf16;\n\t            }\n\t\n\t            break;\n\t    }\n\t\n\t    return undefined;\n\t}\n\t\n\t// Parse the naming `name` table.\n\t// FIXME: Format 1 additional fields are not supported yet.\n\t// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].\n\tfunction parseNameTable(data, start, ltag) {\n\t    var name = {};\n\t    var p = new parse.Parser(data, start);\n\t    var format = p.parseUShort();\n\t    var count = p.parseUShort();\n\t    var stringOffset = p.offset + p.parseUShort();\n\t    for (var i = 0; i < count; i++) {\n\t        var platformID = p.parseUShort();\n\t        var encodingID = p.parseUShort();\n\t        var languageID = p.parseUShort();\n\t        var nameID = p.parseUShort();\n\t        var property = nameTableNames[nameID] || nameID;\n\t        var byteLength = p.parseUShort();\n\t        var offset = p.parseUShort();\n\t        var language = getLanguageCode(platformID, languageID, ltag);\n\t        var encoding = getEncoding(platformID, encodingID, languageID);\n\t        if (encoding !== undefined && language !== undefined) {\n\t            var text;\n\t            if (encoding === utf16) {\n\t                text = decode.UTF16(data, stringOffset + offset, byteLength);\n\t            } else {\n\t                text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);\n\t            }\n\t\n\t            if (text) {\n\t                var translations = name[property];\n\t                if (translations === undefined) {\n\t                    translations = name[property] = {};\n\t                }\n\t\n\t                translations[language] = text;\n\t            }\n\t        }\n\t    }\n\t\n\t    var langTagCount = 0;\n\t    if (format === 1) {\n\t        // FIXME: Also handle Microsoft's 'name' table 1.\n\t        langTagCount = p.parseUShort();\n\t    }\n\t\n\t    return name;\n\t}\n\t\n\t// {23: 'foo'} → {'foo': 23}\n\t// ['bar', 'baz'] → {'bar': 0, 'baz': 1}\n\tfunction reverseDict(dict) {\n\t    var result = {};\n\t    for (var key in dict) {\n\t        result[dict[key]] = parseInt(key);\n\t    }\n\t\n\t    return result;\n\t}\n\t\n\tfunction makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {\n\t    return new table.Record('NameRecord', [\n\t        {name: 'platformID', type: 'USHORT', value: platformID},\n\t        {name: 'encodingID', type: 'USHORT', value: encodingID},\n\t        {name: 'languageID', type: 'USHORT', value: languageID},\n\t        {name: 'nameID', type: 'USHORT', value: nameID},\n\t        {name: 'length', type: 'USHORT', value: length},\n\t        {name: 'offset', type: 'USHORT', value: offset}\n\t    ]);\n\t}\n\t\n\t// Finds the position of needle in haystack, or -1 if not there.\n\t// Like String.indexOf(), but for arrays.\n\tfunction findSubArray(needle, haystack) {\n\t    var needleLength = needle.length;\n\t    var limit = haystack.length - needleLength + 1;\n\t\n\t    loop:\n\t    for (var pos = 0; pos < limit; pos++) {\n\t        for (; pos < limit; pos++) {\n\t            for (var k = 0; k < needleLength; k++) {\n\t                if (haystack[pos + k] !== needle[k]) {\n\t                    continue loop;\n\t                }\n\t            }\n\t\n\t            return pos;\n\t        }\n\t    }\n\t\n\t    return -1;\n\t}\n\t\n\tfunction addStringToPool(s, pool) {\n\t    var offset = findSubArray(s, pool);\n\t    if (offset < 0) {\n\t        offset = pool.length;\n\t        for (var i = 0, len = s.length; i < len; ++i) {\n\t            pool.push(s[i]);\n\t        }\n\t\n\t    }\n\t\n\t    return offset;\n\t}\n\t\n\tfunction makeNameTable(names, ltag) {\n\t    var nameID;\n\t    var nameIDs = [];\n\t\n\t    var namesWithNumericKeys = {};\n\t    var nameTableIds = reverseDict(nameTableNames);\n\t    for (var key in names) {\n\t        var id = nameTableIds[key];\n\t        if (id === undefined) {\n\t            id = key;\n\t        }\n\t\n\t        nameID = parseInt(id);\n\t\n\t        if (isNaN(nameID)) {\n\t            throw new Error('Name table entry \"' + key + '\" does not exist, see nameTableNames for complete list.');\n\t        }\n\t\n\t        namesWithNumericKeys[nameID] = names[key];\n\t        nameIDs.push(nameID);\n\t    }\n\t\n\t    var macLanguageIds = reverseDict(macLanguages);\n\t    var windowsLanguageIds = reverseDict(windowsLanguages);\n\t\n\t    var nameRecords = [];\n\t    var stringPool = [];\n\t\n\t    for (var i = 0; i < nameIDs.length; i++) {\n\t        nameID = nameIDs[i];\n\t        var translations = namesWithNumericKeys[nameID];\n\t        for (var lang in translations) {\n\t            var text = translations[lang];\n\t\n\t            // For MacOS, we try to emit the name in the form that was introduced\n\t            // in the initial version of the TrueType spec (in the late 1980s).\n\t            // However, this can fail for various reasons: the requested BCP 47\n\t            // language code might not have an old-style Mac equivalent;\n\t            // we might not have a codec for the needed character encoding;\n\t            // or the name might contain characters that cannot be expressed\n\t            // in the old-style Macintosh encoding. In case of failure, we emit\n\t            // the name in a more modern fashion (Unicode encoding with BCP 47\n\t            // language tags) that is recognized by MacOS 10.5, released in 2009.\n\t            // If fonts were only read by operating systems, we could simply\n\t            // emit all names in the modern form; this would be much easier.\n\t            // However, there are many applications and libraries that read\n\t            // 'name' tables directly, and these will usually only recognize\n\t            // the ancient form (silently skipping the unrecognized names).\n\t            var macPlatform = 1;  // Macintosh\n\t            var macLanguage = macLanguageIds[lang];\n\t            var macScript = macLanguageToScript[macLanguage];\n\t            var macEncoding = getEncoding(macPlatform, macScript, macLanguage);\n\t            var macName = encode.MACSTRING(text, macEncoding);\n\t            if (macName === undefined) {\n\t                macPlatform = 0;  // Unicode\n\t                macLanguage = ltag.indexOf(lang);\n\t                if (macLanguage < 0) {\n\t                    macLanguage = ltag.length;\n\t                    ltag.push(lang);\n\t                }\n\t\n\t                macScript = 4;  // Unicode 2.0 and later\n\t                macName = encode.UTF16(text);\n\t            }\n\t\n\t            var macNameOffset = addStringToPool(macName, stringPool);\n\t            nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,\n\t                                            nameID, macName.length, macNameOffset));\n\t\n\t            var winLanguage = windowsLanguageIds[lang];\n\t            if (winLanguage !== undefined) {\n\t                var winName = encode.UTF16(text);\n\t                var winNameOffset = addStringToPool(winName, stringPool);\n\t                nameRecords.push(makeNameRecord(3, 1, winLanguage,\n\t                                                nameID, winName.length, winNameOffset));\n\t            }\n\t        }\n\t    }\n\t\n\t    nameRecords.sort(function(a, b) {\n\t        return ((a.platformID - b.platformID) ||\n\t                (a.encodingID - b.encodingID) ||\n\t                (a.languageID - b.languageID) ||\n\t                (a.nameID - b.nameID));\n\t    });\n\t\n\t    var t = new table.Table('name', [\n\t        {name: 'format', type: 'USHORT', value: 0},\n\t        {name: 'count', type: 'USHORT', value: nameRecords.length},\n\t        {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}\n\t    ]);\n\t\n\t    for (var r = 0; r < nameRecords.length; r++) {\n\t        t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});\n\t    }\n\t\n\t    t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});\n\t    return t;\n\t}\n\t\n\texports.parse = parseNameTable;\n\texports.make = makeNameTable;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `OS/2` table contains metrics required in OpenType fonts.\n\t// https://www.microsoft.com/typography/OTSPEC/os2.htm\n\t\n\t'use strict';\n\t\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\tvar unicodeRanges = [\n\t    {begin: 0x0000, end: 0x007F}, // Basic Latin\n\t    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement\n\t    {begin: 0x0100, end: 0x017F}, // Latin Extended-A\n\t    {begin: 0x0180, end: 0x024F}, // Latin Extended-B\n\t    {begin: 0x0250, end: 0x02AF}, // IPA Extensions\n\t    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters\n\t    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks\n\t    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic\n\t    {begin: 0x2C80, end: 0x2CFF}, // Coptic\n\t    {begin: 0x0400, end: 0x04FF}, // Cyrillic\n\t    {begin: 0x0530, end: 0x058F}, // Armenian\n\t    {begin: 0x0590, end: 0x05FF}, // Hebrew\n\t    {begin: 0xA500, end: 0xA63F}, // Vai\n\t    {begin: 0x0600, end: 0x06FF}, // Arabic\n\t    {begin: 0x07C0, end: 0x07FF}, // NKo\n\t    {begin: 0x0900, end: 0x097F}, // Devanagari\n\t    {begin: 0x0980, end: 0x09FF}, // Bengali\n\t    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi\n\t    {begin: 0x0A80, end: 0x0AFF}, // Gujarati\n\t    {begin: 0x0B00, end: 0x0B7F}, // Oriya\n\t    {begin: 0x0B80, end: 0x0BFF}, // Tamil\n\t    {begin: 0x0C00, end: 0x0C7F}, // Telugu\n\t    {begin: 0x0C80, end: 0x0CFF}, // Kannada\n\t    {begin: 0x0D00, end: 0x0D7F}, // Malayalam\n\t    {begin: 0x0E00, end: 0x0E7F}, // Thai\n\t    {begin: 0x0E80, end: 0x0EFF}, // Lao\n\t    {begin: 0x10A0, end: 0x10FF}, // Georgian\n\t    {begin: 0x1B00, end: 0x1B7F}, // Balinese\n\t    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo\n\t    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional\n\t    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended\n\t    {begin: 0x2000, end: 0x206F}, // General Punctuation\n\t    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts\n\t    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol\n\t    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols\n\t    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols\n\t    {begin: 0x2150, end: 0x218F}, // Number Forms\n\t    {begin: 0x2190, end: 0x21FF}, // Arrows\n\t    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators\n\t    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical\n\t    {begin: 0x2400, end: 0x243F}, // Control Pictures\n\t    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition\n\t    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics\n\t    {begin: 0x2500, end: 0x257F}, // Box Drawing\n\t    {begin: 0x2580, end: 0x259F}, // Block Elements\n\t    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes\n\t    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols\n\t    {begin: 0x2700, end: 0x27BF}, // Dingbats\n\t    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation\n\t    {begin: 0x3040, end: 0x309F}, // Hiragana\n\t    {begin: 0x30A0, end: 0x30FF}, // Katakana\n\t    {begin: 0x3100, end: 0x312F}, // Bopomofo\n\t    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo\n\t    {begin: 0xA840, end: 0xA87F}, // Phags-pa\n\t    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months\n\t    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility\n\t    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables\n\t    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *\n\t    {begin: 0x10900, end: 0x1091F}, // Phoenicia\n\t    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs\n\t    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)\n\t    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes\n\t    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms\n\t    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A\n\t    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks\n\t    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms\n\t    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants\n\t    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B\n\t    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms\n\t    {begin: 0xFFF0, end: 0xFFFF}, // Specials\n\t    {begin: 0x0F00, end: 0x0FFF}, // Tibetan\n\t    {begin: 0x0700, end: 0x074F}, // Syriac\n\t    {begin: 0x0780, end: 0x07BF}, // Thaana\n\t    {begin: 0x0D80, end: 0x0DFF}, // Sinhala\n\t    {begin: 0x1000, end: 0x109F}, // Myanmar\n\t    {begin: 0x1200, end: 0x137F}, // Ethiopic\n\t    {begin: 0x13A0, end: 0x13FF}, // Cherokee\n\t    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics\n\t    {begin: 0x1680, end: 0x169F}, // Ogham\n\t    {begin: 0x16A0, end: 0x16FF}, // Runic\n\t    {begin: 0x1780, end: 0x17FF}, // Khmer\n\t    {begin: 0x1800, end: 0x18AF}, // Mongolian\n\t    {begin: 0x2800, end: 0x28FF}, // Braille Patterns\n\t    {begin: 0xA000, end: 0xA48F}, // Yi Syllables\n\t    {begin: 0x1700, end: 0x171F}, // Tagalog\n\t    {begin: 0x10300, end: 0x1032F}, // Old Italic\n\t    {begin: 0x10330, end: 0x1034F}, // Gothic\n\t    {begin: 0x10400, end: 0x1044F}, // Deseret\n\t    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols\n\t    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols\n\t    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)\n\t    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors\n\t    {begin: 0xE0000, end: 0xE007F}, // Tags\n\t    {begin: 0x1900, end: 0x194F}, // Limbu\n\t    {begin: 0x1950, end: 0x197F}, // Tai Le\n\t    {begin: 0x1980, end: 0x19DF}, // New Tai Lue\n\t    {begin: 0x1A00, end: 0x1A1F}, // Buginese\n\t    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic\n\t    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh\n\t    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols\n\t    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri\n\t    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary\n\t    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers\n\t    {begin: 0x10380, end: 0x1039F}, // Ugaritic\n\t    {begin: 0x103A0, end: 0x103DF}, // Old Persian\n\t    {begin: 0x10450, end: 0x1047F}, // Shavian\n\t    {begin: 0x10480, end: 0x104AF}, // Osmanya\n\t    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary\n\t    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi\n\t    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols\n\t    {begin: 0x12000, end: 0x123FF}, // Cuneiform\n\t    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals\n\t    {begin: 0x1B80, end: 0x1BBF}, // Sundanese\n\t    {begin: 0x1C00, end: 0x1C4F}, // Lepcha\n\t    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki\n\t    {begin: 0xA880, end: 0xA8DF}, // Saurashtra\n\t    {begin: 0xA900, end: 0xA92F}, // Kayah Li\n\t    {begin: 0xA930, end: 0xA95F}, // Rejang\n\t    {begin: 0xAA00, end: 0xAA5F}, // Cham\n\t    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols\n\t    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc\n\t    {begin: 0x102A0, end: 0x102DF}, // Carian\n\t    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles\n\t];\n\t\n\tfunction getUnicodeRange(unicode) {\n\t    for (var i = 0; i < unicodeRanges.length; i += 1) {\n\t        var range = unicodeRanges[i];\n\t        if (unicode >= range.begin && unicode < range.end) {\n\t            return i;\n\t        }\n\t    }\n\t\n\t    return -1;\n\t}\n\t\n\t// Parse the OS/2 and Windows metrics `OS/2` table\n\tfunction parseOS2Table(data, start) {\n\t    var os2 = {};\n\t    var p = new parse.Parser(data, start);\n\t    os2.version = p.parseUShort();\n\t    os2.xAvgCharWidth = p.parseShort();\n\t    os2.usWeightClass = p.parseUShort();\n\t    os2.usWidthClass = p.parseUShort();\n\t    os2.fsType = p.parseUShort();\n\t    os2.ySubscriptXSize = p.parseShort();\n\t    os2.ySubscriptYSize = p.parseShort();\n\t    os2.ySubscriptXOffset = p.parseShort();\n\t    os2.ySubscriptYOffset = p.parseShort();\n\t    os2.ySuperscriptXSize = p.parseShort();\n\t    os2.ySuperscriptYSize = p.parseShort();\n\t    os2.ySuperscriptXOffset = p.parseShort();\n\t    os2.ySuperscriptYOffset = p.parseShort();\n\t    os2.yStrikeoutSize = p.parseShort();\n\t    os2.yStrikeoutPosition = p.parseShort();\n\t    os2.sFamilyClass = p.parseShort();\n\t    os2.panose = [];\n\t    for (var i = 0; i < 10; i++) {\n\t        os2.panose[i] = p.parseByte();\n\t    }\n\t\n\t    os2.ulUnicodeRange1 = p.parseULong();\n\t    os2.ulUnicodeRange2 = p.parseULong();\n\t    os2.ulUnicodeRange3 = p.parseULong();\n\t    os2.ulUnicodeRange4 = p.parseULong();\n\t    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n\t    os2.fsSelection = p.parseUShort();\n\t    os2.usFirstCharIndex = p.parseUShort();\n\t    os2.usLastCharIndex = p.parseUShort();\n\t    os2.sTypoAscender = p.parseShort();\n\t    os2.sTypoDescender = p.parseShort();\n\t    os2.sTypoLineGap = p.parseShort();\n\t    os2.usWinAscent = p.parseUShort();\n\t    os2.usWinDescent = p.parseUShort();\n\t    if (os2.version >= 1) {\n\t        os2.ulCodePageRange1 = p.parseULong();\n\t        os2.ulCodePageRange2 = p.parseULong();\n\t    }\n\t\n\t    if (os2.version >= 2) {\n\t        os2.sxHeight = p.parseShort();\n\t        os2.sCapHeight = p.parseShort();\n\t        os2.usDefaultChar = p.parseUShort();\n\t        os2.usBreakChar = p.parseUShort();\n\t        os2.usMaxContent = p.parseUShort();\n\t    }\n\t\n\t    return os2;\n\t}\n\t\n\tfunction makeOS2Table(options) {\n\t    return new table.Table('OS/2', [\n\t        {name: 'version', type: 'USHORT', value: 0x0003},\n\t        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},\n\t        {name: 'usWeightClass', type: 'USHORT', value: 0},\n\t        {name: 'usWidthClass', type: 'USHORT', value: 0},\n\t        {name: 'fsType', type: 'USHORT', value: 0},\n\t        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},\n\t        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},\n\t        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},\n\t        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},\n\t        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},\n\t        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},\n\t        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},\n\t        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},\n\t        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},\n\t        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},\n\t        {name: 'sFamilyClass', type: 'SHORT', value: 0},\n\t        {name: 'bFamilyType', type: 'BYTE', value: 0},\n\t        {name: 'bSerifStyle', type: 'BYTE', value: 0},\n\t        {name: 'bWeight', type: 'BYTE', value: 0},\n\t        {name: 'bProportion', type: 'BYTE', value: 0},\n\t        {name: 'bContrast', type: 'BYTE', value: 0},\n\t        {name: 'bStrokeVariation', type: 'BYTE', value: 0},\n\t        {name: 'bArmStyle', type: 'BYTE', value: 0},\n\t        {name: 'bLetterform', type: 'BYTE', value: 0},\n\t        {name: 'bMidline', type: 'BYTE', value: 0},\n\t        {name: 'bXHeight', type: 'BYTE', value: 0},\n\t        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},\n\t        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},\n\t        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},\n\t        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},\n\t        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},\n\t        {name: 'fsSelection', type: 'USHORT', value: 0},\n\t        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},\n\t        {name: 'usLastCharIndex', type: 'USHORT', value: 0},\n\t        {name: 'sTypoAscender', type: 'SHORT', value: 0},\n\t        {name: 'sTypoDescender', type: 'SHORT', value: 0},\n\t        {name: 'sTypoLineGap', type: 'SHORT', value: 0},\n\t        {name: 'usWinAscent', type: 'USHORT', value: 0},\n\t        {name: 'usWinDescent', type: 'USHORT', value: 0},\n\t        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},\n\t        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},\n\t        {name: 'sxHeight', type: 'SHORT', value: 0},\n\t        {name: 'sCapHeight', type: 'SHORT', value: 0},\n\t        {name: 'usDefaultChar', type: 'USHORT', value: 0},\n\t        {name: 'usBreakChar', type: 'USHORT', value: 0},\n\t        {name: 'usMaxContext', type: 'USHORT', value: 0}\n\t    ], options);\n\t}\n\t\n\texports.unicodeRanges = unicodeRanges;\n\texports.getUnicodeRange = getUnicodeRange;\n\texports.parse = parseOS2Table;\n\texports.make = makeOS2Table;\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `post` table stores additional PostScript information, such as glyph names.\n\t// https://www.microsoft.com/typography/OTSPEC/post.htm\n\t\n\t'use strict';\n\t\n\tvar encoding = __webpack_require__(4);\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\t// Parse the PostScript `post` table\n\tfunction parsePostTable(data, start) {\n\t    var post = {};\n\t    var p = new parse.Parser(data, start);\n\t    var i;\n\t    post.version = p.parseVersion();\n\t    post.italicAngle = p.parseFixed();\n\t    post.underlinePosition = p.parseShort();\n\t    post.underlineThickness = p.parseShort();\n\t    post.isFixedPitch = p.parseULong();\n\t    post.minMemType42 = p.parseULong();\n\t    post.maxMemType42 = p.parseULong();\n\t    post.minMemType1 = p.parseULong();\n\t    post.maxMemType1 = p.parseULong();\n\t    switch (post.version) {\n\t        case 1:\n\t            post.names = encoding.standardNames.slice();\n\t            break;\n\t        case 2:\n\t            post.numberOfGlyphs = p.parseUShort();\n\t            post.glyphNameIndex = new Array(post.numberOfGlyphs);\n\t            for (i = 0; i < post.numberOfGlyphs; i++) {\n\t                post.glyphNameIndex[i] = p.parseUShort();\n\t            }\n\t\n\t            post.names = [];\n\t            for (i = 0; i < post.numberOfGlyphs; i++) {\n\t                if (post.glyphNameIndex[i] >= encoding.standardNames.length) {\n\t                    var nameLength = p.parseChar();\n\t                    post.names.push(p.parseString(nameLength));\n\t                }\n\t            }\n\t\n\t            break;\n\t        case 2.5:\n\t            post.numberOfGlyphs = p.parseUShort();\n\t            post.offset = new Array(post.numberOfGlyphs);\n\t            for (i = 0; i < post.numberOfGlyphs; i++) {\n\t                post.offset[i] = p.parseChar();\n\t            }\n\t\n\t            break;\n\t    }\n\t    return post;\n\t}\n\t\n\tfunction makePostTable() {\n\t    return new table.Table('post', [\n\t        {name: 'version', type: 'FIXED', value: 0x00030000},\n\t        {name: 'italicAngle', type: 'FIXED', value: 0},\n\t        {name: 'underlinePosition', type: 'FWORD', value: 0},\n\t        {name: 'underlineThickness', type: 'FWORD', value: 0},\n\t        {name: 'isFixedPitch', type: 'ULONG', value: 0},\n\t        {name: 'minMemType42', type: 'ULONG', value: 0},\n\t        {name: 'maxMemType42', type: 'ULONG', value: 0},\n\t        {name: 'minMemType1', type: 'ULONG', value: 0},\n\t        {name: 'maxMemType1', type: 'ULONG', value: 0}\n\t    ]);\n\t}\n\t\n\texports.parse = parsePostTable;\n\texports.make = makePostTable;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `GSUB` table contains ligatures, among other things.\n\t// https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar Parser = __webpack_require__(12).Parser;\n\tvar subtableParsers = new Array(9);         // subtableParsers[0] is unused\n\tvar table = __webpack_require__(9);\n\t\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\n\tsubtableParsers[1] = function parseLookup1() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var substFormat = this.parseUShort();\n\t    if (substFormat === 1) {\n\t        return {\n\t            substFormat: 1,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            deltaGlyphId: this.parseUShort()\n\t        };\n\t    } else if (substFormat === 2) {\n\t        return {\n\t            substFormat: 2,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            substitute: this.parseOffset16List()\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n\t};\n\t\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\n\tsubtableParsers[2] = function parseLookup2() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        sequences: this.parseListOfLists()\n\t    };\n\t};\n\t\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\n\tsubtableParsers[3] = function parseLookup3() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        alternateSets: this.parseListOfLists()\n\t    };\n\t};\n\t\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\n\tsubtableParsers[4] = function parseLookup4() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        ligatureSets: this.parseListOfLists(function() {\n\t            return {\n\t                ligGlyph: this.parseUShort(),\n\t                components: this.parseUShortList(this.parseUShort() - 1)\n\t            };\n\t        })\n\t    };\n\t};\n\t\n\tvar lookupRecordDesc = {\n\t    sequenceIndex: Parser.uShort,\n\t    lookupListIndex: Parser.uShort\n\t};\n\t\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\n\tsubtableParsers[5] = function parseLookup5() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var substFormat = this.parseUShort();\n\t\n\t    if (substFormat === 1) {\n\t        return {\n\t            substFormat: substFormat,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            ruleSets: this.parseListOfLists(function() {\n\t                var glyphCount = this.parseUShort();\n\t                var substCount = this.parseUShort();\n\t                return {\n\t                    input: this.parseUShortList(glyphCount - 1),\n\t                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 2) {\n\t        return {\n\t            substFormat: substFormat,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            classDef: this.parsePointer(Parser.classDef),\n\t            classSets: this.parseListOfLists(function() {\n\t                var glyphCount = this.parseUShort();\n\t                var substCount = this.parseUShort();\n\t                return {\n\t                    classes: this.parseUShortList(glyphCount - 1),\n\t                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 3) {\n\t        var glyphCount = this.parseUShort();\n\t        var substCount = this.parseUShort();\n\t        return {\n\t            substFormat: substFormat,\n\t            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n\t            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n\t};\n\t\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\n\tsubtableParsers[6] = function parseLookup6() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var substFormat = this.parseUShort();\n\t    if (substFormat === 1) {\n\t        return {\n\t            substFormat: 1,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            chainRuleSets: this.parseListOfLists(function() {\n\t                return {\n\t                    backtrack: this.parseUShortList(),\n\t                    input: this.parseUShortList(this.parseShort() - 1),\n\t                    lookahead: this.parseUShortList(),\n\t                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 2) {\n\t        return {\n\t            substFormat: 2,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            backtrackClassDef: this.parsePointer(Parser.classDef),\n\t            inputClassDef: this.parsePointer(Parser.classDef),\n\t            lookaheadClassDef: this.parsePointer(Parser.classDef),\n\t            chainClassSet: this.parseListOfLists(function() {\n\t                return {\n\t                    backtrack: this.parseUShortList(),\n\t                    input: this.parseUShortList(this.parseShort() - 1),\n\t                    lookahead: this.parseUShortList(),\n\t                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 3) {\n\t        return {\n\t            substFormat: 3,\n\t            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t            lookupRecords: this.parseRecordList(lookupRecordDesc)\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n\t};\n\t\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\n\tsubtableParsers[7] = function parseLookup7() {\n\t    // Extension Substitution subtable\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n\t    var extensionLookupType = this.parseUShort();\n\t    var extensionParser = new Parser(this.data, this.offset + this.parseULong());\n\t    return {\n\t        substFormat: 1,\n\t        lookupType: extensionLookupType,\n\t        extension: subtableParsers[extensionLookupType].call(extensionParser)\n\t    };\n\t};\n\t\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\n\tsubtableParsers[8] = function parseLookup8() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t        substitutes: this.parseUShortList()\n\t    };\n\t};\n\t\n\t// https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\tfunction parseGsubTable(data, start) {\n\t    start = start || 0;\n\t    var p = new Parser(data, start);\n\t    var tableVersion = p.parseVersion();\n\t    check.argument(tableVersion === 1, 'Unsupported GSUB table version.');\n\t    return {\n\t        version: tableVersion,\n\t        scripts: p.parseScriptList(),\n\t        features: p.parseFeatureList(),\n\t        lookups: p.parseLookupList(subtableParsers)\n\t    };\n\t}\n\t\n\t// GSUB Writing //////////////////////////////////////////////\n\tvar subtableMakers = new Array(9);\n\t\n\tsubtableMakers[1] = function makeLookup1(subtable) {\n\t    if (subtable.substFormat === 1) {\n\t        return new table.Table('substitutionTable', [\n\t            {name: 'substFormat', type: 'USHORT', value: 1},\n\t            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},\n\t            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}\n\t        ]);\n\t    } else {\n\t        return new table.Table('substitutionTable', [\n\t            {name: 'substFormat', type: 'USHORT', value: 2},\n\t            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t        ].concat(table.ushortList('substitute', subtable.substitute)));\n\t    }\n\t    check.fail('Lookup type 1 substFormat must be 1 or 2.');\n\t};\n\t\n\tsubtableMakers[3] = function makeLookup3(subtable) {\n\t    check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n\t    return new table.Table('substitutionTable', [\n\t        {name: 'substFormat', type: 'USHORT', value: 1},\n\t        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t    ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {\n\t        return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));\n\t    })));\n\t};\n\t\n\tsubtableMakers[4] = function makeLookup4(subtable) {\n\t    check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n\t    return new table.Table('substitutionTable', [\n\t        {name: 'substFormat', type: 'USHORT', value: 1},\n\t        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t    ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {\n\t        return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {\n\t            return new table.Table('ligatureTable',\n\t                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]\n\t                .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))\n\t            );\n\t        }));\n\t    })));\n\t};\n\t\n\tfunction makeGsubTable(gsub) {\n\t    return new table.Table('GSUB', [\n\t        {name: 'version', type: 'ULONG', value: 0x10000},\n\t        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},\n\t        {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},\n\t        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}\n\t    ]);\n\t}\n\t\n\texports.parse = parseGsubTable;\n\texports.make = makeGsubTable;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `GPOS` table contains kerning pairs, among other things.\n\t// https://www.microsoft.com/typography/OTSPEC/gpos.htm\n\t\n\t'use strict';\n\t\n\tvar types = __webpack_require__(10);\n\tvar decode = types.decode;\n\tvar check = __webpack_require__(8);\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\t// Parse the metadata `meta` table.\n\t// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\n\tfunction parseMetaTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseULong();\n\t    check.argument(tableVersion === 1, 'Unsupported META table version.');\n\t    p.parseULong(); // flags - currently unused and set to 0\n\t    p.parseULong(); // tableOffset\n\t    var numDataMaps = p.parseULong();\n\t\n\t    var tags = {};\n\t    for (var i = 0; i < numDataMaps; i++) {\n\t        var tag = p.parseTag();\n\t        var dataOffset = p.parseULong();\n\t        var dataLength = p.parseULong();\n\t        var text = decode.UTF8(data, start + dataOffset, dataLength);\n\t\n\t        tags[tag] = text;\n\t    }\n\t    return tags;\n\t}\n\t\n\tfunction makeMetaTable(tags) {\n\t    var numTags = Object.keys(tags).length;\n\t    var stringPool = '';\n\t    var stringPoolOffset = 16 + numTags * 12;\n\t\n\t    var result = new table.Table('meta', [\n\t        {name: 'version', type: 'ULONG', value: 1},\n\t        {name: 'flags', type: 'ULONG', value: 0},\n\t        {name: 'offset', type: 'ULONG', value: stringPoolOffset},\n\t        {name: 'numTags', type: 'ULONG', value: numTags}\n\t    ]);\n\t\n\t    for (var tag in tags) {\n\t        var pos = stringPool.length;\n\t        stringPool += tags[tag];\n\t\n\t        result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});\n\t        result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});\n\t        result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});\n\t    }\n\t\n\t    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n\t\n\t    return result;\n\t}\n\t\n\texports.parse = parseMetaTable;\n\texports.make = makeMetaTable;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The Substitution object provides utility methods to manipulate\n\t// the GSUB substitution table.\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar Layout = __webpack_require__(28);\n\t\n\t/**\n\t * @exports opentype.Substitution\n\t * @class\n\t * @extends opentype.Layout\n\t * @param {opentype.Font}\n\t * @constructor\n\t */\n\tvar Substitution = function(font) {\n\t    this.font = font;\n\t};\n\t\n\t// Check if 2 arrays of primitives are equal.\n\tfunction arraysEqual(ar1, ar2) {\n\t    var n = ar1.length;\n\t    if (n !== ar2.length) { return false; }\n\t    for (var i = 0; i < n; i++) {\n\t        if (ar1[i] !== ar2[i]) { return false; }\n\t    }\n\t    return true;\n\t}\n\t\n\t// Find the first subtable of a lookup table in a particular format.\n\tfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n\t    var subtables = lookupTable.subtables;\n\t    for (var i = 0; i < subtables.length; i++) {\n\t        var subtable = subtables[i];\n\t        if (subtable.substFormat === format) {\n\t            return subtable;\n\t        }\n\t    }\n\t    if (defaultSubtable) {\n\t        subtables.push(defaultSubtable);\n\t        return defaultSubtable;\n\t    }\n\t}\n\t\n\tSubstitution.prototype = Layout;\n\t\n\t/**\n\t * Get or create the GSUB table.\n\t * @param  {boolean} create - Whether to create a new one.\n\t * @return {Object} gsub - The GSUB table.\n\t */\n\tSubstitution.prototype.getGsubTable = function(create) {\n\t    var gsub = this.font.tables.gsub;\n\t    if (!gsub && create) {\n\t        // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n\t        this.font.tables.gsub = gsub = {\n\t            version: 1,\n\t            scripts: [{\n\t                tag: 'DFLT',\n\t                script: {\n\t                    defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n\t                    langSysRecords: []\n\t                }\n\t            }],\n\t            features: [],\n\t            lookups: []\n\t        };\n\t    }\n\t    return gsub;\n\t};\n\t\n\t/**\n\t * List all single substitutions (lookup type 1) for a given script, language, and feature.\n\t * @param {string} script\n\t * @param {string} language\n\t * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n\t * @return {Array} substitutions - The list of substitutions.\n\t */\n\tSubstitution.prototype.getSingle = function(feature, script, language) {\n\t    var substitutions = [];\n\t    var lookupTable = this.getLookupTable(script, language, feature, 1);\n\t    if (!lookupTable) { return substitutions; }\n\t    var subtables = lookupTable.subtables;\n\t    for (var i = 0; i < subtables.length; i++) {\n\t        var subtable = subtables[i];\n\t        var glyphs = this.expandCoverage(subtable.coverage);\n\t        var j;\n\t        if (subtable.substFormat === 1) {\n\t            var delta = subtable.deltaGlyphId;\n\t            for (j = 0; j < glyphs.length; j++) {\n\t                var glyph = glyphs[j];\n\t                substitutions.push({ sub: glyph, by: glyph + delta });\n\t            }\n\t        } else {\n\t            var substitute = subtable.substitute;\n\t            for (j = 0; j < glyphs.length; j++) {\n\t                substitutions.push({ sub: glyphs[j], by: substitute[j] });\n\t            }\n\t        }\n\t    }\n\t    return substitutions;\n\t};\n\t\n\t/**\n\t * List all alternates (lookup type 3) for a given script, language, and feature.\n\t * @param {string} script\n\t * @param {string} language\n\t * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n\t * @return {Array} alternates - The list of alternates\n\t */\n\tSubstitution.prototype.getAlternates = function(feature, script, language) {\n\t    var alternates = [];\n\t    var lookupTable = this.getLookupTable(script, language, feature, 3);\n\t    if (!lookupTable) { return alternates; }\n\t    var subtables = lookupTable.subtables;\n\t    for (var i = 0; i < subtables.length; i++) {\n\t        var subtable = subtables[i];\n\t        var glyphs = this.expandCoverage(subtable.coverage);\n\t        var alternateSets = subtable.alternateSets;\n\t        for (var j = 0; j < glyphs.length; j++) {\n\t            alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n\t        }\n\t    }\n\t    return alternates;\n\t};\n\t\n\t/**\n\t * List all ligatures (lookup type 4) for a given script, language, and feature.\n\t * The result is an array of ligature objects like { sub: [ids], by: id }\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {string} script\n\t * @param {string} language\n\t * @return {Array} ligatures - The list of ligatures.\n\t */\n\tSubstitution.prototype.getLigatures = function(feature, script, language) {\n\t    var ligatures = [];\n\t    var lookupTable = this.getLookupTable(script, language, feature, 4);\n\t    if (!lookupTable) { return []; }\n\t    var subtables = lookupTable.subtables;\n\t    for (var i = 0; i < subtables.length; i++) {\n\t        var subtable = subtables[i];\n\t        var glyphs = this.expandCoverage(subtable.coverage);\n\t        var ligatureSets = subtable.ligatureSets;\n\t        for (var j = 0; j < glyphs.length; j++) {\n\t            var startGlyph = glyphs[j];\n\t            var ligSet = ligatureSets[j];\n\t            for (var k = 0; k < ligSet.length; k++) {\n\t                var lig = ligSet[k];\n\t                ligatures.push({\n\t                    sub: [startGlyph].concat(lig.components),\n\t                    by: lig.ligGlyph\n\t                });\n\t            }\n\t        }\n\t    }\n\t    return ligatures;\n\t};\n\t\n\t/**\n\t * Add or modify a single substitution (lookup type 1)\n\t * Format 2, more flexible, is always used.\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='DFLT']\n\t */\n\tSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n\t    var lookupTable = this.getLookupTable(script, language, feature, 1, true);\n\t    var subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1\n\t        substFormat: 2,\n\t        coverage: { format: 1, glyphs: [] },\n\t        substitute: []\n\t    });\n\t    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = substitution.sub;\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos < 0) {\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.substitute.splice(pos, 0, 0);\n\t    }\n\t    subtable.substitute[pos] = substitution.by;\n\t};\n\t\n\t/**\n\t * Add or modify an alternate substitution (lookup type 1)\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {Object} substitution - { sub: id, by: [ids] }\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='DFLT']\n\t */\n\tSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n\t    var lookupTable = this.getLookupTable(script, language, feature, 3, true);\n\t    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1\n\t        substFormat: 1,\n\t        coverage: { format: 1, glyphs: [] },\n\t        alternateSets: []\n\t    });\n\t    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = substitution.sub;\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos < 0) {\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.alternateSets.splice(pos, 0, 0);\n\t    }\n\t    subtable.alternateSets[pos] = substitution.by;\n\t};\n\t\n\t/**\n\t * Add a ligature (lookup type 4)\n\t * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {Object} ligature - { sub: [ids], by: id }\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='DFLT']\n\t */\n\tSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n\t    script = script || 'DFLT';\n\t    language = language || 'DFLT';\n\t    var lookupTable = this.getLookupTable(script, language, feature, 4, true);\n\t    var subtable = lookupTable.subtables[0];\n\t    if (!subtable) {\n\t        subtable = {                // lookup type 4 subtable, format 1, coverage format 1\n\t            substFormat: 1,\n\t            coverage: { format: 1, glyphs: [] },\n\t            ligatureSets: []\n\t        };\n\t        lookupTable.subtables[0] = subtable;\n\t    }\n\t    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = ligature.sub[0];\n\t    var ligComponents = ligature.sub.slice(1);\n\t    var ligatureTable = {\n\t        ligGlyph: ligature.by,\n\t        components: ligComponents\n\t    };\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos >= 0) {\n\t        // ligatureSet already exists\n\t        var ligatureSet = subtable.ligatureSets[pos];\n\t        for (var i = 0; i < ligatureSet.length; i++) {\n\t            // If ligature already exists, return.\n\t            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n\t                return;\n\t            }\n\t        }\n\t        // ligature does not exist: add it.\n\t        ligatureSet.push(ligatureTable);\n\t    } else {\n\t        // Create a new ligatureSet and add coverage for the first glyph.\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n\t    }\n\t};\n\t\n\t/**\n\t * List all feature data for a given script and language.\n\t * @param {string} feature - 4-letter feature name\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='DFLT']\n\t * @return {Array} substitutions - The list of substitutions.\n\t */\n\tSubstitution.prototype.getFeature = function(feature, script, language) {\n\t    script = script || 'DFLT';\n\t    language = language || 'DFLT';\n\t    if (/ss\\d\\d/.test(feature)) {               // ss01 - ss20\n\t        return this.getSingle(feature, script, language);\n\t    }\n\t    switch (feature) {\n\t        case 'aalt':\n\t        case 'salt':\n\t            return this.getSingle(feature, script, language)\n\t                    .concat(this.getAlternates(feature, script, language));\n\t        case 'dlig':\n\t        case 'liga':\n\t        case 'rlig': return this.getLigatures(feature, script, language);\n\t    }\n\t};\n\t\n\t/**\n\t * Add a substitution to a feature for a given script and language.\n\t * @param {string} feature - 4-letter feature name\n\t * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='DFLT']\n\t */\n\tSubstitution.prototype.add = function(feature, sub, script, language) {\n\t    script = script || 'DFLT';\n\t    language = language || 'DFLT';\n\t    if (/ss\\d\\d/.test(feature)) {               // ss01 - ss20\n\t        return this.addSingle(feature, sub, script, language);\n\t    }\n\t    switch (feature) {\n\t        case 'aalt':\n\t        case 'salt':\n\t            if (typeof sub.by === 'number') {\n\t                return this.addSingle(feature, sub, script, language);\n\t            }\n\t            return this.addAlternate(feature, sub, script, language);\n\t        case 'dlig':\n\t        case 'liga':\n\t        case 'rlig':\n\t            return this.addLigature(feature, sub, script, language);\n\t    }\n\t};\n\t\n\tmodule.exports = Substitution;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The Layout object is the prototype of Substition objects, and provides utility methods to manipulate\n\t// common layout tables (GPOS, GSUB, GDEF...)\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\t\n\tfunction searchTag(arr, tag) {\n\t    /* jshint bitwise: false */\n\t    var imin = 0;\n\t    var imax = arr.length - 1;\n\t    while (imin <= imax) {\n\t        var imid = (imin + imax) >>> 1;\n\t        var val = arr[imid].tag;\n\t        if (val === tag) {\n\t            return imid;\n\t        } else if (val < tag) {\n\t            imin = imid + 1;\n\t        } else { imax = imid - 1; }\n\t    }\n\t    // Not found: return -1-insertion point\n\t    return -imin - 1;\n\t}\n\t\n\tfunction binSearch(arr, value) {\n\t    /* jshint bitwise: false */\n\t    var imin = 0;\n\t    var imax = arr.length - 1;\n\t    while (imin <= imax) {\n\t        var imid = (imin + imax) >>> 1;\n\t        var val = arr[imid];\n\t        if (val === value) {\n\t            return imid;\n\t        } else if (val < value) {\n\t            imin = imid + 1;\n\t        } else { imax = imid - 1; }\n\t    }\n\t    // Not found: return -1-insertion point\n\t    return -imin - 1;\n\t}\n\t\n\t/**\n\t * @exports opentype.Layout\n\t * @class\n\t */\n\tvar Layout = {\n\t\n\t    /**\n\t     * Binary search an object by \"tag\" property\n\t     * @instance\n\t     * @function searchTag\n\t     * @memberof opentype.Layout\n\t     * @param  {Array} arr\n\t     * @param  {string} tag\n\t     * @return {number}\n\t     */\n\t    searchTag: searchTag,\n\t    /**\n\t     * Binary search in a list of numbers\n\t     * @instance\n\t     * @function binSearch\n\t     * @memberof opentype.Layout\n\t     * @param  {Array} arr\n\t     * @param  {number} value\n\t     * @return {number}\n\t     */\n\t    binSearch: binSearch,\n\t\n\t    /**\n\t     * Returns all scripts in the substitution table.\n\t     * @instance\n\t     * @return {Array}\n\t     */\n\t    getScriptNames: function() {\n\t        var gsub = this.getGsubTable();\n\t        if (!gsub) { return []; }\n\t        return gsub.scripts.map(function(script) {\n\t            return script.tag;\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Returns all LangSysRecords in the given script.\n\t     * @instance\n\t     * @param {string} script - Use 'DFLT' for default script\n\t     * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n\t     * @return {Object} An object with tag and script properties.\n\t     */\n\t    getScriptTable: function(script, create) {\n\t        var gsub = this.getGsubTable(create);\n\t        if (gsub) {\n\t            var scripts = gsub.scripts;\n\t            var pos = searchTag(gsub.scripts, script);\n\t            if (pos >= 0) {\n\t                return scripts[pos].script;\n\t            } else {\n\t                var scr = {\n\t                    tag: script,\n\t                    script: {\n\t                        defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n\t                        langSysRecords: []\n\t                    }\n\t                };\n\t                scripts.splice(-1 - pos, 0, scr.script);\n\t                return scr;\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Returns a language system table\n\t     * @instance\n\t     * @param {string} script - Use 'DFLT' for default script\n\t     * @param {string} language - Use 'DFLT' for default language\n\t     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n\t     * @return {Object}\n\t     */\n\t    getLangSysTable: function(script, language, create) {\n\t        var scriptTable = this.getScriptTable(script, create);\n\t        if (scriptTable) {\n\t            if (language === 'DFLT') {\n\t                return scriptTable.defaultLangSys;\n\t            }\n\t            var pos = searchTag(scriptTable.langSysRecords, language);\n\t            if (pos >= 0) {\n\t                return scriptTable.langSysRecords[pos].langSys;\n\t            } else if (create) {\n\t                var langSysRecord = {\n\t                    tag: language,\n\t                    langSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] }\n\t                };\n\t                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n\t                return langSysRecord.langSys;\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Get a specific feature table.\n\t     * @instance\n\t     * @param {string} script - Use 'DFLT' for default script\n\t     * @param {string} language - Use 'DFLT' for default language\n\t     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n\t     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n\t     * @return {Object}\n\t     */\n\t    getFeatureTable: function(script, language, feature, create) {\n\t        var langSysTable = this.getLangSysTable(script, language, create);\n\t        if (langSysTable) {\n\t            var featureRecord;\n\t            var featIndexes = langSysTable.featureIndexes;\n\t            var allFeatures = this.font.tables.gsub.features;\n\t            // The FeatureIndex array of indices is in arbitrary order,\n\t            // even if allFeatures is sorted alphabetically by feature tag.\n\t            for (var i = 0; i < featIndexes.length; i++) {\n\t                featureRecord = allFeatures[featIndexes[i]];\n\t                if (featureRecord.tag === feature) {\n\t                    return featureRecord.feature;\n\t                }\n\t            }\n\t            if (create) {\n\t                var index = allFeatures.length;\n\t                // Automatic ordering of features would require to shift feature indexes in the script list.\n\t                check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');\n\t                featureRecord = {\n\t                    tag: feature,\n\t                    feature: { params: 0, lookupListIndexes: [] }\n\t                };\n\t                allFeatures.push(featureRecord);\n\t                featIndexes.push(index);\n\t                return featureRecord.feature;\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Get the first lookup table of a given type for a script/language/feature.\n\t     * @instance\n\t     * @param {string} script - Use 'DFLT' for default script\n\t     * @param {string} language - Use 'DFLT' for default language\n\t     * @param {string} feature - 4-letter feature code\n\t     * @param {number} lookupType - 1 to 8\n\t     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n\t     * @return {Object}\n\t     */\n\t    getLookupTable: function(script, language, feature, lookupType, create) {\n\t        var featureTable = this.getFeatureTable(script, language, feature, create);\n\t        if (featureTable) {\n\t            var lookupTable;\n\t            var lookupListIndexes = featureTable.lookupListIndexes;\n\t            var allLookups = this.font.tables.gsub.lookups;\n\t            // lookupListIndexes are in no particular order, so use naïve search.\n\t            for (var i = 0; i < lookupListIndexes.length; i++) {\n\t                lookupTable = allLookups[lookupListIndexes[i]];\n\t                if (lookupTable.lookupType === lookupType) {\n\t                    return lookupTable;\n\t                }\n\t            }\n\t            if (create) {\n\t                lookupTable = {\n\t                    lookupType: lookupType,\n\t                    lookupFlag: 0,\n\t                    subtables: [],\n\t                    markFilteringSet: undefined\n\t                };\n\t                var index = allLookups.length;\n\t                allLookups.push(lookupTable);\n\t                lookupListIndexes.push(index);\n\t                return lookupTable;\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Returns the list of glyph indexes of a coverage table.\n\t     * Format 1: the list is stored raw\n\t     * Format 2: compact list as range records.\n\t     * @instance\n\t     * @param  {Object} coverageTable\n\t     * @return {Array}\n\t     */\n\t    expandCoverage: function(coverageTable) {\n\t        if (coverageTable.format === 1) {\n\t            return coverageTable.glyphs;\n\t        } else {\n\t            var glyphs = [];\n\t            var ranges = coverageTable.ranges;\n\t            for (var i = 0; i < ranges; i++) {\n\t                var range = ranges[i];\n\t                var start = range.start;\n\t                var end = range.end;\n\t                for (var j = start; j <= end; j++) {\n\t                    glyphs.push(j);\n\t                }\n\t            }\n\t            return glyphs;\n\t        }\n\t    }\n\t\n\t};\n\t\n\tmodule.exports = Layout;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.isBrowser = function() {\n\t    return typeof window !== 'undefined';\n\t};\n\t\n\texports.isNode = function() {\n\t    return typeof window === 'undefined';\n\t};\n\t\n\texports.nodeBufferToArrayBuffer = function(buffer) {\n\t    var ab = new ArrayBuffer(buffer.length);\n\t    var view = new Uint8Array(ab);\n\t    for (var i = 0; i < buffer.length; ++i) {\n\t        view[i] = buffer[i];\n\t    }\n\t\n\t    return ab;\n\t};\n\t\n\texports.arrayBufferToNodeBuffer = function(ab) {\n\t    var buffer = new Buffer(ab.byteLength);\n\t    var view = new Uint8Array(ab);\n\t    for (var i = 0; i < buffer.length; ++i) {\n\t        buffer[i] = view[i];\n\t    }\n\t\n\t    return buffer;\n\t};\n\t\n\texports.checkArgument = function(expression, message) {\n\t    if (!expression) {\n\t        throw message;\n\t    }\n\t};\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t/* (ignored) */\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `fvar` table stores font variation axes and instances.\n\t// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6fvar.html\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar parse = __webpack_require__(12);\n\tvar table = __webpack_require__(9);\n\t\n\tfunction addName(name, names) {\n\t    var nameString = JSON.stringify(name);\n\t    var nameID = 256;\n\t    for (var nameKey in names) {\n\t        var n = parseInt(nameKey);\n\t        if (!n || n < 256) {\n\t            continue;\n\t        }\n\t\n\t        if (JSON.stringify(names[nameKey]) === nameString) {\n\t            return n;\n\t        }\n\t\n\t        if (nameID <= n) {\n\t            nameID = n + 1;\n\t        }\n\t    }\n\t\n\t    names[nameID] = name;\n\t    return nameID;\n\t}\n\t\n\tfunction makeFvarAxis(n, axis, names) {\n\t    var nameID = addName(axis.name, names);\n\t    return [\n\t        {name: 'tag_' + n, type: 'TAG', value: axis.tag},\n\t        {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},\n\t        {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},\n\t        {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},\n\t        {name: 'flags_' + n, type: 'USHORT', value: 0},\n\t        {name: 'nameID_' + n, type: 'USHORT', value: nameID}\n\t    ];\n\t}\n\t\n\tfunction parseFvarAxis(data, start, names) {\n\t    var axis = {};\n\t    var p = new parse.Parser(data, start);\n\t    axis.tag = p.parseTag();\n\t    axis.minValue = p.parseFixed();\n\t    axis.defaultValue = p.parseFixed();\n\t    axis.maxValue = p.parseFixed();\n\t    p.skip('uShort', 1);  // reserved for flags; no values defined\n\t    axis.name = names[p.parseUShort()] || {};\n\t    return axis;\n\t}\n\t\n\tfunction makeFvarInstance(n, inst, axes, names) {\n\t    var nameID = addName(inst.name, names);\n\t    var fields = [\n\t        {name: 'nameID_' + n, type: 'USHORT', value: nameID},\n\t        {name: 'flags_' + n, type: 'USHORT', value: 0}\n\t    ];\n\t\n\t    for (var i = 0; i < axes.length; ++i) {\n\t        var axisTag = axes[i].tag;\n\t        fields.push({\n\t            name: 'axis_' + n + ' ' + axisTag,\n\t            type: 'FIXED',\n\t            value: inst.coordinates[axisTag] << 16\n\t        });\n\t    }\n\t\n\t    return fields;\n\t}\n\t\n\tfunction parseFvarInstance(data, start, axes, names) {\n\t    var inst = {};\n\t    var p = new parse.Parser(data, start);\n\t    inst.name = names[p.parseUShort()] || {};\n\t    p.skip('uShort', 1);  // reserved for flags; no values defined\n\t\n\t    inst.coordinates = {};\n\t    for (var i = 0; i < axes.length; ++i) {\n\t        inst.coordinates[axes[i].tag] = p.parseFixed();\n\t    }\n\t\n\t    return inst;\n\t}\n\t\n\tfunction makeFvarTable(fvar, names) {\n\t    var result = new table.Table('fvar', [\n\t        {name: 'version', type: 'ULONG', value: 0x10000},\n\t        {name: 'offsetToData', type: 'USHORT', value: 0},\n\t        {name: 'countSizePairs', type: 'USHORT', value: 2},\n\t        {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},\n\t        {name: 'axisSize', type: 'USHORT', value: 20},\n\t        {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},\n\t        {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}\n\t    ]);\n\t    result.offsetToData = result.sizeOf();\n\t\n\t    for (var i = 0; i < fvar.axes.length; i++) {\n\t        result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));\n\t    }\n\t\n\t    for (var j = 0; j < fvar.instances.length; j++) {\n\t        result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));\n\t    }\n\t\n\t    return result;\n\t}\n\t\n\tfunction parseFvarTable(data, start, names) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseULong();\n\t    check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');\n\t    var offsetToData = p.parseOffset16();\n\t    // Skip countSizePairs.\n\t    p.skip('uShort', 1);\n\t    var axisCount = p.parseUShort();\n\t    var axisSize = p.parseUShort();\n\t    var instanceCount = p.parseUShort();\n\t    var instanceSize = p.parseUShort();\n\t\n\t    var axes = [];\n\t    for (var i = 0; i < axisCount; i++) {\n\t        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n\t    }\n\t\n\t    var instances = [];\n\t    var instanceStart = start + offsetToData + axisCount * axisSize;\n\t    for (var j = 0; j < instanceCount; j++) {\n\t        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n\t    }\n\t\n\t    return {axes: axes, instances: instances};\n\t}\n\t\n\texports.make = makeFvarTable;\n\texports.parse = parseFvarTable;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `glyf` table describes the glyphs in TrueType outline format.\n\t// http://www.microsoft.com/typography/otspec/glyf.htm\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar glyphset = __webpack_require__(14);\n\tvar parse = __webpack_require__(12);\n\tvar path = __webpack_require__(6);\n\t\n\t// Parse the coordinate data for a glyph.\n\tfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n\t    var v;\n\t    if ((flag & shortVectorBitMask) > 0) {\n\t        // The coordinate is 1 byte long.\n\t        v = p.parseByte();\n\t        // The `same` bit is re-used for short values to signify the sign of the value.\n\t        if ((flag & sameBitMask) === 0) {\n\t            v = -v;\n\t        }\n\t\n\t        v = previousValue + v;\n\t    } else {\n\t        //  The coordinate is 2 bytes long.\n\t        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n\t        if ((flag & sameBitMask) > 0) {\n\t            v = previousValue;\n\t        } else {\n\t            // Parse the coordinate as a signed 16-bit delta value.\n\t            v = previousValue + p.parseShort();\n\t        }\n\t    }\n\t\n\t    return v;\n\t}\n\t\n\t// Parse a TrueType glyph.\n\tfunction parseGlyph(glyph, data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    glyph.numberOfContours = p.parseShort();\n\t    glyph._xMin = p.parseShort();\n\t    glyph._yMin = p.parseShort();\n\t    glyph._xMax = p.parseShort();\n\t    glyph._yMax = p.parseShort();\n\t    var flags;\n\t    var flag;\n\t    if (glyph.numberOfContours > 0) {\n\t        var i;\n\t        // This glyph is not a composite.\n\t        var endPointIndices = glyph.endPointIndices = [];\n\t        for (i = 0; i < glyph.numberOfContours; i += 1) {\n\t            endPointIndices.push(p.parseUShort());\n\t        }\n\t\n\t        glyph.instructionLength = p.parseUShort();\n\t        glyph.instructions = [];\n\t        for (i = 0; i < glyph.instructionLength; i += 1) {\n\t            glyph.instructions.push(p.parseByte());\n\t        }\n\t\n\t        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n\t        flags = [];\n\t        for (i = 0; i < numberOfCoordinates; i += 1) {\n\t            flag = p.parseByte();\n\t            flags.push(flag);\n\t            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n\t            if ((flag & 8) > 0) {\n\t                var repeatCount = p.parseByte();\n\t                for (var j = 0; j < repeatCount; j += 1) {\n\t                    flags.push(flag);\n\t                    i += 1;\n\t                }\n\t            }\n\t        }\n\t\n\t        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\t\n\t        if (endPointIndices.length > 0) {\n\t            var points = [];\n\t            var point;\n\t            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n\t            if (numberOfCoordinates > 0) {\n\t                for (i = 0; i < numberOfCoordinates; i += 1) {\n\t                    flag = flags[i];\n\t                    point = {};\n\t                    point.onCurve = !!(flag & 1);\n\t                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;\n\t                    points.push(point);\n\t                }\n\t\n\t                var px = 0;\n\t                for (i = 0; i < numberOfCoordinates; i += 1) {\n\t                    flag = flags[i];\n\t                    point = points[i];\n\t                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n\t                    px = point.x;\n\t                }\n\t\n\t                var py = 0;\n\t                for (i = 0; i < numberOfCoordinates; i += 1) {\n\t                    flag = flags[i];\n\t                    point = points[i];\n\t                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n\t                    py = point.y;\n\t                }\n\t            }\n\t\n\t            glyph.points = points;\n\t        } else {\n\t            glyph.points = [];\n\t        }\n\t    } else if (glyph.numberOfContours === 0) {\n\t        glyph.points = [];\n\t    } else {\n\t        glyph.isComposite = true;\n\t        glyph.points = [];\n\t        glyph.components = [];\n\t        var moreComponents = true;\n\t        while (moreComponents) {\n\t            flags = p.parseUShort();\n\t            var component = {\n\t                glyphIndex: p.parseUShort(),\n\t                xScale: 1,\n\t                scale01: 0,\n\t                scale10: 0,\n\t                yScale: 1,\n\t                dx: 0,\n\t                dy: 0\n\t            };\n\t            if ((flags & 1) > 0) {\n\t                // The arguments are words\n\t                if ((flags & 2) > 0) {\n\t                    // values are offset\n\t                    component.dx = p.parseShort();\n\t                    component.dy = p.parseShort();\n\t                } else {\n\t                    // values are matched points\n\t                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n\t                }\n\t\n\t            } else {\n\t                // The arguments are bytes\n\t                if ((flags & 2) > 0) {\n\t                    // values are offset\n\t                    component.dx = p.parseChar();\n\t                    component.dy = p.parseChar();\n\t                } else {\n\t                    // values are matched points\n\t                    component.matchedPoints = [p.parseByte(), p.parseByte()];\n\t                }\n\t            }\n\t\n\t            if ((flags & 8) > 0) {\n\t                // We have a scale\n\t                component.xScale = component.yScale = p.parseF2Dot14();\n\t            } else if ((flags & 64) > 0) {\n\t                // We have an X / Y scale\n\t                component.xScale = p.parseF2Dot14();\n\t                component.yScale = p.parseF2Dot14();\n\t            } else if ((flags & 128) > 0) {\n\t                // We have a 2x2 transformation\n\t                component.xScale = p.parseF2Dot14();\n\t                component.scale01 = p.parseF2Dot14();\n\t                component.scale10 = p.parseF2Dot14();\n\t                component.yScale = p.parseF2Dot14();\n\t            }\n\t\n\t            glyph.components.push(component);\n\t            moreComponents = !!(flags & 32);\n\t        }\n\t    }\n\t}\n\t\n\t// Transform an array of points and return a new array.\n\tfunction transformPoints(points, transform) {\n\t    var newPoints = [];\n\t    for (var i = 0; i < points.length; i += 1) {\n\t        var pt = points[i];\n\t        var newPt = {\n\t            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n\t            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n\t            onCurve: pt.onCurve,\n\t            lastPointOfContour: pt.lastPointOfContour\n\t        };\n\t        newPoints.push(newPt);\n\t    }\n\t\n\t    return newPoints;\n\t}\n\t\n\tfunction getContours(points) {\n\t    var contours = [];\n\t    var currentContour = [];\n\t    for (var i = 0; i < points.length; i += 1) {\n\t        var pt = points[i];\n\t        currentContour.push(pt);\n\t        if (pt.lastPointOfContour) {\n\t            contours.push(currentContour);\n\t            currentContour = [];\n\t        }\n\t    }\n\t\n\t    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n\t    return contours;\n\t}\n\t\n\t// Convert the TrueType glyph outline to a Path.\n\tfunction getPath(points) {\n\t    var p = new path.Path();\n\t    if (!points) {\n\t        return p;\n\t    }\n\t\n\t    var contours = getContours(points);\n\t    for (var i = 0; i < contours.length; i += 1) {\n\t        var contour = contours[i];\n\t        var firstPt = contour[0];\n\t        var lastPt = contour[contour.length - 1];\n\t        var curvePt;\n\t        var realFirstPoint;\n\t        if (firstPt.onCurve) {\n\t            curvePt = null;\n\t            // The first point will be consumed by the moveTo command,\n\t            // so skip it in the loop.\n\t            realFirstPoint = true;\n\t        } else {\n\t            if (lastPt.onCurve) {\n\t                // If the first point is off-curve and the last point is on-curve,\n\t                // start at the last point.\n\t                firstPt = lastPt;\n\t            } else {\n\t                // If both first and last points are off-curve, start at their middle.\n\t                firstPt = { x: (firstPt.x + lastPt.x) / 2, y: (firstPt.y + lastPt.y) / 2 };\n\t            }\n\t\n\t            curvePt = firstPt;\n\t            // The first point is synthesized, so don't skip the real first point.\n\t            realFirstPoint = false;\n\t        }\n\t\n\t        p.moveTo(firstPt.x, firstPt.y);\n\t\n\t        for (var j = realFirstPoint ? 1 : 0; j < contour.length; j += 1) {\n\t            var pt = contour[j];\n\t            var prevPt = j === 0 ? firstPt : contour[j - 1];\n\t            if (prevPt.onCurve && pt.onCurve) {\n\t                // This is a straight line.\n\t                p.lineTo(pt.x, pt.y);\n\t            } else if (prevPt.onCurve && !pt.onCurve) {\n\t                curvePt = pt;\n\t            } else if (!prevPt.onCurve && !pt.onCurve) {\n\t                var midPt = { x: (prevPt.x + pt.x) / 2, y: (prevPt.y + pt.y) / 2 };\n\t                p.quadraticCurveTo(prevPt.x, prevPt.y, midPt.x, midPt.y);\n\t                curvePt = pt;\n\t            } else if (!prevPt.onCurve && pt.onCurve) {\n\t                // Previous point off-curve, this point on-curve.\n\t                p.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n\t                curvePt = null;\n\t            } else {\n\t                throw new Error('Invalid state.');\n\t            }\n\t        }\n\t\n\t        if (firstPt !== lastPt) {\n\t            // Connect the last and first points\n\t            if (curvePt) {\n\t                p.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n\t            } else {\n\t                p.lineTo(firstPt.x, firstPt.y);\n\t            }\n\t        }\n\t    }\n\t\n\t    p.closePath();\n\t    return p;\n\t}\n\t\n\tfunction buildPath(glyphs, glyph) {\n\t    if (glyph.isComposite) {\n\t        for (var j = 0; j < glyph.components.length; j += 1) {\n\t            var component = glyph.components[j];\n\t            var componentGlyph = glyphs.get(component.glyphIndex);\n\t            // Force the ttfGlyphLoader to parse the glyph.\n\t            componentGlyph.getPath();\n\t            if (componentGlyph.points) {\n\t                var transformedPoints;\n\t                if (component.matchedPoints === undefined) {\n\t                    // component positioned by offset\n\t                    transformedPoints = transformPoints(componentGlyph.points, component);\n\t                } else {\n\t                    // component positioned by matched points\n\t                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n\t                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n\t                        throw Error('Matched points out of range in ' + glyph.name);\n\t                    }\n\t                    var firstPt = glyph.points[component.matchedPoints[0]];\n\t                    var secondPt = componentGlyph.points[component.matchedPoints[1]];\n\t                    var transform = {\n\t                        xScale: component.xScale, scale01: component.scale01,\n\t                        scale10: component.scale10, yScale: component.yScale,\n\t                        dx: 0, dy: 0\n\t                    };\n\t                    secondPt = transformPoints([secondPt], transform)[0];\n\t                    transform.dx = firstPt.x - secondPt.x;\n\t                    transform.dy = firstPt.y - secondPt.y;\n\t                    transformedPoints = transformPoints(componentGlyph.points, transform);\n\t                }\n\t                glyph.points = glyph.points.concat(transformedPoints);\n\t            }\n\t        }\n\t    }\n\t\n\t    return getPath(glyph.points);\n\t}\n\t\n\t// Parse all the glyphs according to the offsets from the `loca` table.\n\tfunction parseGlyfTable(data, start, loca, font) {\n\t    var glyphs = new glyphset.GlyphSet(font);\n\t    var i;\n\t\n\t    // The last element of the loca table is invalid.\n\t    for (i = 0; i < loca.length - 1; i += 1) {\n\t        var offset = loca[i];\n\t        var nextOffset = loca[i + 1];\n\t        if (offset !== nextOffset) {\n\t            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n\t        } else {\n\t            glyphs.push(i, glyphset.glyphLoader(font, i));\n\t        }\n\t    }\n\t\n\t    return glyphs;\n\t}\n\t\n\texports.parse = parseGlyfTable;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `GPOS` table contains kerning pairs, among other things.\n\t// https://www.microsoft.com/typography/OTSPEC/gpos.htm\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar parse = __webpack_require__(12);\n\t\n\t// Parse ScriptList and FeatureList tables of GPOS, GSUB, GDEF, BASE, JSTF tables.\n\t// These lists are unused by now, this function is just the basis for a real parsing.\n\tfunction parseTaggedListTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var n = p.parseUShort();\n\t    var list = [];\n\t    for (var i = 0; i < n; i++) {\n\t        list[p.parseTag()] = { offset: p.parseUShort() };\n\t    }\n\t\n\t    return list;\n\t}\n\t\n\t// Parse a coverage table in a GSUB, GPOS or GDEF table.\n\t// Format 1 is a simple list of glyph ids,\n\t// Format 2 is a list of ranges. It is expanded in a list of glyphs, maybe not the best idea.\n\tfunction parseCoverageTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var format = p.parseUShort();\n\t    var count =  p.parseUShort();\n\t    if (format === 1) {\n\t        return p.parseUShortList(count);\n\t    } else if (format === 2) {\n\t        var coverage = [];\n\t        for (; count--;) {\n\t            var begin = p.parseUShort();\n\t            var end = p.parseUShort();\n\t            var index = p.parseUShort();\n\t            for (var i = begin; i <= end; i++) {\n\t                coverage[index++] = i;\n\t            }\n\t        }\n\t\n\t        return coverage;\n\t    }\n\t}\n\t\n\t// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n\t// Returns a function that gets a class value from a glyph ID.\n\tfunction parseClassDefTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var format = p.parseUShort();\n\t    if (format === 1) {\n\t        // Format 1 specifies a range of consecutive glyph indices, one class per glyph ID.\n\t        var startGlyph = p.parseUShort();\n\t        var glyphCount = p.parseUShort();\n\t        var classes = p.parseUShortList(glyphCount);\n\t        return function(glyphID) {\n\t            return classes[glyphID - startGlyph] || 0;\n\t        };\n\t    } else if (format === 2) {\n\t        // Format 2 defines multiple groups of glyph indices that belong to the same class.\n\t        var rangeCount = p.parseUShort();\n\t        var startGlyphs = [];\n\t        var endGlyphs = [];\n\t        var classValues = [];\n\t        for (var i = 0; i < rangeCount; i++) {\n\t            startGlyphs[i] = p.parseUShort();\n\t            endGlyphs[i] = p.parseUShort();\n\t            classValues[i] = p.parseUShort();\n\t        }\n\t\n\t        return function(glyphID) {\n\t            var l = 0;\n\t            var r = startGlyphs.length - 1;\n\t            while (l < r) {\n\t                var c = (l + r + 1) >> 1;\n\t                if (glyphID < startGlyphs[c]) {\n\t                    r = c - 1;\n\t                } else {\n\t                    l = c;\n\t                }\n\t            }\n\t\n\t            if (startGlyphs[l] <= glyphID && glyphID <= endGlyphs[l]) {\n\t                return classValues[l] || 0;\n\t            }\n\t\n\t            return 0;\n\t        };\n\t    }\n\t}\n\t\n\t// Parse a pair adjustment positioning subtable, format 1 or format 2\n\t// The subtable is returned in the form of a lookup function.\n\tfunction parsePairPosSubTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    // This part is common to format 1 and format 2 subtables\n\t    var format = p.parseUShort();\n\t    var coverageOffset = p.parseUShort();\n\t    var coverage = parseCoverageTable(data, start + coverageOffset);\n\t    // valueFormat 4: XAdvance only, 1: XPlacement only, 0: no ValueRecord for second glyph\n\t    // Only valueFormat1=4 and valueFormat2=0 is supported.\n\t    var valueFormat1 = p.parseUShort();\n\t    var valueFormat2 = p.parseUShort();\n\t    var value1;\n\t    var value2;\n\t    if (valueFormat1 !== 4 || valueFormat2 !== 0) return;\n\t    var sharedPairSets = {};\n\t    if (format === 1) {\n\t        // Pair Positioning Adjustment: Format 1\n\t        var pairSetCount = p.parseUShort();\n\t        var pairSet = [];\n\t        // Array of offsets to PairSet tables-from beginning of PairPos subtable-ordered by Coverage Index\n\t        var pairSetOffsets = p.parseOffset16List(pairSetCount);\n\t        for (var firstGlyph = 0; firstGlyph < pairSetCount; firstGlyph++) {\n\t            var pairSetOffset = pairSetOffsets[firstGlyph];\n\t            var sharedPairSet = sharedPairSets[pairSetOffset];\n\t            if (!sharedPairSet) {\n\t                // Parse a pairset table in a pair adjustment subtable format 1\n\t                sharedPairSet = {};\n\t                p.relativeOffset = pairSetOffset;\n\t                var pairValueCount = p.parseUShort();\n\t                for (; pairValueCount--;) {\n\t                    var secondGlyph = p.parseUShort();\n\t                    if (valueFormat1) value1 = p.parseShort();\n\t                    if (valueFormat2) value2 = p.parseShort();\n\t                    // We only support valueFormat1 = 4 and valueFormat2 = 0,\n\t                    // so value1 is the XAdvance and value2 is empty.\n\t                    sharedPairSet[secondGlyph] = value1;\n\t                }\n\t            }\n\t\n\t            pairSet[coverage[firstGlyph]] = sharedPairSet;\n\t        }\n\t\n\t        return function(leftGlyph, rightGlyph) {\n\t            var pairs = pairSet[leftGlyph];\n\t            if (pairs) return pairs[rightGlyph];\n\t        };\n\t    } else if (format === 2) {\n\t        // Pair Positioning Adjustment: Format 2\n\t        var classDef1Offset = p.parseUShort();\n\t        var classDef2Offset = p.parseUShort();\n\t        var class1Count = p.parseUShort();\n\t        var class2Count = p.parseUShort();\n\t        var getClass1 = parseClassDefTable(data, start + classDef1Offset);\n\t        var getClass2 = parseClassDefTable(data, start + classDef2Offset);\n\t\n\t        // Parse kerning values by class pair.\n\t        var kerningMatrix = [];\n\t        for (var i = 0; i < class1Count; i++) {\n\t            var kerningRow = kerningMatrix[i] = [];\n\t            for (var j = 0; j < class2Count; j++) {\n\t                if (valueFormat1) value1 = p.parseShort();\n\t                if (valueFormat2) value2 = p.parseShort();\n\t                // We only support valueFormat1 = 4 and valueFormat2 = 0,\n\t                // so value1 is the XAdvance and value2 is empty.\n\t                kerningRow[j] = value1;\n\t            }\n\t        }\n\t\n\t        // Convert coverage list to a hash\n\t        var covered = {};\n\t        for (i = 0; i < coverage.length; i++) covered[coverage[i]] = 1;\n\t\n\t        // Get the kerning value for a specific glyph pair.\n\t        return function(leftGlyph, rightGlyph) {\n\t            if (!covered[leftGlyph]) return;\n\t            var class1 = getClass1(leftGlyph);\n\t            var class2 = getClass2(rightGlyph);\n\t            var kerningRow = kerningMatrix[class1];\n\t\n\t            if (kerningRow) {\n\t                return kerningRow[class2];\n\t            }\n\t        };\n\t    }\n\t}\n\t\n\t// Parse a LookupTable (present in of GPOS, GSUB, GDEF, BASE, JSTF tables).\n\tfunction parseLookupTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var lookupType = p.parseUShort();\n\t    var lookupFlag = p.parseUShort();\n\t    var useMarkFilteringSet = lookupFlag & 0x10;\n\t    var subTableCount = p.parseUShort();\n\t    var subTableOffsets = p.parseOffset16List(subTableCount);\n\t    var table = {\n\t        lookupType: lookupType,\n\t        lookupFlag: lookupFlag,\n\t        markFilteringSet: useMarkFilteringSet ? p.parseUShort() : -1\n\t    };\n\t    // LookupType 2, Pair adjustment\n\t    if (lookupType === 2) {\n\t        var subtables = [];\n\t        for (var i = 0; i < subTableCount; i++) {\n\t            subtables.push(parsePairPosSubTable(data, start + subTableOffsets[i]));\n\t        }\n\t        // Return a function which finds the kerning values in the subtables.\n\t        table.getKerningValue = function(leftGlyph, rightGlyph) {\n\t            for (var i = subtables.length; i--;) {\n\t                var value = subtables[i](leftGlyph, rightGlyph);\n\t                if (value !== undefined) return value;\n\t            }\n\t\n\t            return 0;\n\t        };\n\t    }\n\t\n\t    return table;\n\t}\n\t\n\t// Parse the `GPOS` table which contains, among other things, kerning pairs.\n\t// https://www.microsoft.com/typography/OTSPEC/gpos.htm\n\tfunction parseGposTable(data, start, font) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseFixed();\n\t    check.argument(tableVersion === 1, 'Unsupported GPOS table version.');\n\t\n\t    // ScriptList and FeatureList - ignored for now\n\t    parseTaggedListTable(data, start + p.parseUShort());\n\t    // 'kern' is the feature we are looking for.\n\t    parseTaggedListTable(data, start + p.parseUShort());\n\t\n\t    // LookupList\n\t    var lookupListOffset = p.parseUShort();\n\t    p.relativeOffset = lookupListOffset;\n\t    var lookupCount = p.parseUShort();\n\t    var lookupTableOffsets = p.parseOffset16List(lookupCount);\n\t    var lookupListAbsoluteOffset = start + lookupListOffset;\n\t    for (var i = 0; i < lookupCount; i++) {\n\t        var table = parseLookupTable(data, lookupListAbsoluteOffset + lookupTableOffsets[i]);\n\t        if (table.lookupType === 2 && !font.getGposKerningValue) font.getGposKerningValue = table.getKerningValue;\n\t    }\n\t}\n\t\n\texports.parse = parseGposTable;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `kern` table contains kerning pairs.\n\t// Note that some fonts use the GPOS OpenType layout table to specify kerning.\n\t// https://www.microsoft.com/typography/OTSPEC/kern.htm\n\t\n\t'use strict';\n\t\n\tvar check = __webpack_require__(8);\n\tvar parse = __webpack_require__(12);\n\t\n\t// Parse the `kern` table which contains kerning pairs.\n\tfunction parseKernTable(data, start) {\n\t    var pairs = {};\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseUShort();\n\t    check.argument(tableVersion === 0, 'Unsupported kern table version.');\n\t    // Skip nTables.\n\t    p.skip('uShort', 1);\n\t    var subTableVersion = p.parseUShort();\n\t    check.argument(subTableVersion === 0, 'Unsupported kern sub-table version.');\n\t    // Skip subTableLength, subTableCoverage\n\t    p.skip('uShort', 2);\n\t    var nPairs = p.parseUShort();\n\t    // Skip searchRange, entrySelector, rangeShift.\n\t    p.skip('uShort', 3);\n\t    for (var i = 0; i < nPairs; i += 1) {\n\t        var leftIndex = p.parseUShort();\n\t        var rightIndex = p.parseUShort();\n\t        var value = p.parseShort();\n\t        pairs[leftIndex + ',' + rightIndex] = value;\n\t    }\n\t\n\t    return pairs;\n\t}\n\t\n\texports.parse = parseKernTable;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// The `loca` table stores the offsets to the locations of the glyphs in the font.\n\t// https://www.microsoft.com/typography/OTSPEC/loca.htm\n\t\n\t'use strict';\n\t\n\tvar parse = __webpack_require__(12);\n\t\n\t// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n\t// relative to the beginning of the glyphData table.\n\t// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n\t// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n\t// version where offsets are stored as uLongs. The `head` table specifies which version to use\n\t// (under indexToLocFormat).\n\tfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n\t    var p = new parse.Parser(data, start);\n\t    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n\t    // There is an extra entry after the last index element to compute the length of the last glyph.\n\t    // That's why we use numGlyphs + 1.\n\t    var glyphOffsets = [];\n\t    for (var i = 0; i < numGlyphs + 1; i += 1) {\n\t        var glyphOffset = parseFn.call(p);\n\t        if (shortVersion) {\n\t            // The short table version stores the actual offset divided by 2.\n\t            glyphOffset *= 2;\n\t        }\n\t\n\t        glyphOffsets.push(glyphOffset);\n\t    }\n\t\n\t    return glyphOffsets;\n\t}\n\t\n\texports.parse = parseLocaTable;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * Paper.js v0.10.2-develop - The Swiss Army Knife of Vector Graphics Scripting.\n\t * http://paperjs.org/\n\t *\n\t * Copyright (c) 2011 - 2016, Juerg Lehni & Jonathan Puckey\n\t * http://scratchdisk.com/ & http://jonathanpuckey.com/\n\t *\n\t * Distributed under the MIT license. See LICENSE file for details.\n\t *\n\t * All rights reserved.\n\t *\n\t * Date: Tue Aug 9 10:01:35 2016 +0200\n\t *\n\t ***\n\t *\n\t * Straps.js - Class inheritance library with support for bean-style accessors\n\t *\n\t * Copyright (c) 2006 - 2016 Juerg Lehni\n\t * http://scratchdisk.com/\n\t *\n\t * Distributed under the MIT license.\n\t *\n\t ***\n\t *\n\t * Acorn.js\n\t * http://marijnhaverbeke.nl/acorn/\n\t *\n\t * Acorn is a tiny, fast JavaScript parser written in JavaScript,\n\t * created by Marijn Haverbeke and released under an MIT license.\n\t *\n\t */\n\t\n\tvar paper = function(self, undefined) {\n\t\n\tself = self || __webpack_require__(37);\n\t\n\tvar window = self.window,\n\t\tdocument = self.document;\n\t\n\tvar Base = new function() {\n\t\tvar hidden = /^(statics|enumerable|beans|preserve)$/,\n\t\t\tarray = [],\n\t\t\tslice = array.slice,\n\t\t\tcreate = Object.create,\n\t\t\tdescribe = Object.getOwnPropertyDescriptor,\n\t\t\tdefine = Object.defineProperty,\n\t\n\t\t\tforEach = array.forEach || function(iter, bind) {\n\t\t\t\tfor (var i = 0, l = this.length; i < l; i++) {\n\t\t\t\t\titer.call(bind, this[i], i, this);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tforIn = function(iter, bind) {\n\t\t\t\tfor (var i in this) {\n\t\t\t\t\tif (this.hasOwnProperty(i))\n\t\t\t\t\t\titer.call(bind, this[i], i, this);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tset = Object.assign || function(dst) {\n\t\t\t\tfor (var i = 1, l = arguments.length; i < l; i++) {\n\t\t\t\t\tvar src = arguments[i];\n\t\t\t\t\tfor (var key in src) {\n\t\t\t\t\t\tif (src.hasOwnProperty(key))\n\t\t\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn dst;\n\t\t\t},\n\t\n\t\t\teach = function(obj, iter, bind) {\n\t\t\t\tif (obj) {\n\t\t\t\t\tvar desc = describe(obj, 'length');\n\t\t\t\t\t(desc && typeof desc.value === 'number' ? forEach : forIn)\n\t\t\t\t\t\t.call(obj, iter, bind = bind || obj);\n\t\t\t\t}\n\t\t\t\treturn bind;\n\t\t\t};\n\t\n\t\tfunction inject(dest, src, enumerable, beans, preserve) {\n\t\t\tvar beansNames = {};\n\t\n\t\t\tfunction field(name, val) {\n\t\t\t\tval = val || (val = describe(src, name))\n\t\t\t\t\t\t&& (val.get ? val : val.value);\n\t\t\t\tif (typeof val === 'string' && val[0] === '#')\n\t\t\t\t\tval = dest[val.substring(1)] || val;\n\t\t\t\tvar isFunc = typeof val === 'function',\n\t\t\t\t\tres = val,\n\t\t\t\t\tprev = preserve || isFunc && !val.base\n\t\t\t\t\t\t\t? (val && val.get ? name in dest : dest[name])\n\t\t\t\t\t\t\t: null,\n\t\t\t\t\tbean;\n\t\t\t\tif (!preserve || !prev) {\n\t\t\t\t\tif (isFunc && prev)\n\t\t\t\t\t\tval.base = prev;\n\t\t\t\t\tif (isFunc && beans !== false\n\t\t\t\t\t\t\t&& (bean = name.match(/^([gs]et|is)(([A-Z])(.*))$/)))\n\t\t\t\t\t\tbeansNames[bean[3].toLowerCase() + bean[4]] = bean[2];\n\t\t\t\t\tif (!res || isFunc || !res.get || typeof res.get !== 'function'\n\t\t\t\t\t\t\t|| !Base.isPlainObject(res))\n\t\t\t\t\t\tres = { value: res, writable: true };\n\t\t\t\t\tif ((describe(dest, name)\n\t\t\t\t\t\t\t|| { configurable: true }).configurable) {\n\t\t\t\t\t\tres.configurable = true;\n\t\t\t\t\t\tres.enumerable = enumerable;\n\t\t\t\t\t}\n\t\t\t\t\tdefine(dest, name, res);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (src) {\n\t\t\t\tfor (var name in src) {\n\t\t\t\t\tif (src.hasOwnProperty(name) && !hidden.test(name))\n\t\t\t\t\t\tfield(name);\n\t\t\t\t}\n\t\t\t\tfor (var name in beansNames) {\n\t\t\t\t\tvar part = beansNames[name],\n\t\t\t\t\t\tset = dest['set' + part],\n\t\t\t\t\t\tget = dest['get' + part] || set && dest['is' + part];\n\t\t\t\t\tif (get && (beans === true || get.length === 0))\n\t\t\t\t\t\tfield(name, { get: get, set: set });\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn dest;\n\t\t}\n\t\n\t\tfunction Base() {\n\t\t\tfor (var i = 0, l = arguments.length; i < l; i++) {\n\t\t\t\tvar src = arguments[i];\n\t\t\t\tif (src)\n\t\t\t\t\tset(this, src);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\n\t\treturn inject(Base, {\n\t\t\tinject: function(src) {\n\t\t\t\tif (src) {\n\t\t\t\t\tvar statics = src.statics === true ? src : src.statics,\n\t\t\t\t\t\tbeans = src.beans,\n\t\t\t\t\t\tpreserve = src.preserve;\n\t\t\t\t\tif (statics !== src)\n\t\t\t\t\t\tinject(this.prototype, src, src.enumerable, beans, preserve);\n\t\t\t\t\tinject(this, statics, true, beans, preserve);\n\t\t\t\t}\n\t\t\t\tfor (var i = 1, l = arguments.length; i < l; i++)\n\t\t\t\t\tthis.inject(arguments[i]);\n\t\t\t\treturn this;\n\t\t\t},\n\t\n\t\t\textend: function() {\n\t\t\t\tvar base = this,\n\t\t\t\t\tctor,\n\t\t\t\t\tproto;\n\t\t\t\tfor (var i = 0, obj, l = arguments.length;\n\t\t\t\t\t\ti < l && !(ctor && proto); i++) {\n\t\t\t\t\tobj = arguments[i];\n\t\t\t\t\tctor = ctor || obj.initialize;\n\t\t\t\t\tproto = proto || obj.prototype;\n\t\t\t\t}\n\t\t\t\tctor = ctor || function() {\n\t\t\t\t\tbase.apply(this, arguments);\n\t\t\t\t};\n\t\t\t\tproto = ctor.prototype = proto || create(this.prototype);\n\t\t\t\tdefine(proto, 'constructor',\n\t\t\t\t\t\t{ value: ctor, writable: true, configurable: true });\n\t\t\t\tinject(ctor, this, true);\n\t\t\t\tif (arguments.length)\n\t\t\t\t\tthis.inject.apply(ctor, arguments);\n\t\t\t\tctor.base = base;\n\t\t\t\treturn ctor;\n\t\t\t}\n\t\t}, true).inject({\n\t\t\tinitialize: Base,\n\t\n\t\t\tset: Base,\n\t\n\t\t\tinject: function() {\n\t\t\t\tfor (var i = 0, l = arguments.length; i < l; i++) {\n\t\t\t\t\tvar src = arguments[i];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tinject(this, src, src.enumerable, src.beans, src.preserve);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\n\t\t\textend: function() {\n\t\t\t\tvar res = create(this);\n\t\t\t\treturn res.inject.apply(res, arguments);\n\t\t\t},\n\t\n\t\t\teach: function(iter, bind) {\n\t\t\t\treturn each(this, iter, bind);\n\t\t\t},\n\t\n\t\t\tclone: function() {\n\t\t\t\treturn new this.constructor(this);\n\t\t\t},\n\t\n\t\t\tstatics: {\n\t\t\t\tset: set,\n\t\t\t\teach: each,\n\t\t\t\tcreate: create,\n\t\t\t\tdefine: define,\n\t\t\t\tdescribe: describe,\n\t\n\t\t\t\tclone: function(obj) {\n\t\t\t\t\treturn set(new obj.constructor(), obj);\n\t\t\t\t},\n\t\n\t\t\t\tisPlainObject: function(obj) {\n\t\t\t\t\tvar ctor = obj != null && obj.constructor;\n\t\t\t\t\treturn ctor && (ctor === Object || ctor === Base\n\t\t\t\t\t\t\t|| ctor.name === 'Object');\n\t\t\t\t},\n\t\n\t\t\t\tpick: function(a, b) {\n\t\t\t\t\treturn a !== undefined ? a : b;\n\t\t\t\t},\n\t\n\t\t\t\tslice: function(list, begin, end) {\n\t\t\t\t\treturn slice.call(list, begin, end);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\t\n\tif (true)\n\t\tmodule.exports = Base;\n\t\n\tBase.inject({\n\t\ttoString: function() {\n\t\t\treturn this._id != null\n\t\t\t\t?  (this._class || 'Object') + (this._name\n\t\t\t\t\t? \" '\" + this._name + \"'\"\n\t\t\t\t\t: ' @' + this._id)\n\t\t\t\t: '{ ' + Base.each(this, function(value, key) {\n\t\t\t\t\tif (!/^_/.test(key)) {\n\t\t\t\t\t\tvar type = typeof value;\n\t\t\t\t\t\tthis.push(key + ': ' + (type === 'number'\n\t\t\t\t\t\t\t\t? Formatter.instance.number(value)\n\t\t\t\t\t\t\t\t: type === 'string' ? \"'\" + value + \"'\" : value));\n\t\t\t\t\t}\n\t\t\t\t}, []).join(', ') + ' }';\n\t\t},\n\t\n\t\tgetClassName: function() {\n\t\t\treturn this._class || '';\n\t\t},\n\t\n\t\timportJSON: function(json) {\n\t\t\treturn Base.importJSON(json, this);\n\t\t},\n\t\n\t\texportJSON: function(options) {\n\t\t\treturn Base.exportJSON(this, options);\n\t\t},\n\t\n\t\ttoJSON: function() {\n\t\t\treturn Base.serialize(this);\n\t\t},\n\t\n\t\tset: function(props, exclude) {\n\t\t\tif (props)\n\t\t\t\tBase.filter(this, props, exclude, this._prioritize);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tstatics: {\n\t\n\t\t\texports: {\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\n\t\t\textend: function extend() {\n\t\t\t\tvar res = extend.base.apply(this, arguments),\n\t\t\t\t\tname = res.prototype._class;\n\t\t\t\tif (name && !Base.exports[name])\n\t\t\t\t\tBase.exports[name] = res;\n\t\t\t\treturn res;\n\t\t\t},\n\t\n\t\t\tequals: function(obj1, obj2) {\n\t\t\t\tif (obj1 === obj2)\n\t\t\t\t\treturn true;\n\t\t\t\tif (obj1 && obj1.equals)\n\t\t\t\t\treturn obj1.equals(obj2);\n\t\t\t\tif (obj2 && obj2.equals)\n\t\t\t\t\treturn obj2.equals(obj1);\n\t\t\t\tif (obj1 && obj2\n\t\t\t\t\t\t&& typeof obj1 === 'object' && typeof obj2 === 'object') {\n\t\t\t\t\tif (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\t\t\t\t\tvar length = obj1.length;\n\t\t\t\t\t\tif (length !== obj2.length)\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\twhile (length--) {\n\t\t\t\t\t\t\tif (!Base.equals(obj1[length], obj2[length]))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar keys = Object.keys(obj1),\n\t\t\t\t\t\t\tlength = keys.length;\n\t\t\t\t\t\tif (length !== Object.keys(obj2).length)\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\twhile (length--) {\n\t\t\t\t\t\t\tvar key = keys[length];\n\t\t\t\t\t\t\tif (!(obj2.hasOwnProperty(key)\n\t\t\t\t\t\t\t\t\t&& Base.equals(obj1[key], obj2[key])))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\n\t\t\tread: function(list, start, options, amount) {\n\t\t\t\tif (this === Base) {\n\t\t\t\t\tvar value = this.peek(list, start);\n\t\t\t\t\tlist.__index++;\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tvar proto = this.prototype,\n\t\t\t\t\treadIndex = proto._readIndex,\n\t\t\t\t\tbegin = start || readIndex && list.__index || 0,\n\t\t\t\t\tlength = list.length,\n\t\t\t\t\tobj = list[begin];\n\t\t\t\tamount = amount || length - begin;\n\t\t\t\tif (obj instanceof this\n\t\t\t\t\t|| options && options.readNull && obj == null && amount <= 1) {\n\t\t\t\t\tif (readIndex)\n\t\t\t\t\t\tlist.__index = begin + 1;\n\t\t\t\t\treturn obj && options && options.clone ? obj.clone() : obj;\n\t\t\t\t}\n\t\t\t\tobj = Base.create(proto);\n\t\t\t\tif (readIndex)\n\t\t\t\t\tobj.__read = true;\n\t\t\t\tobj = obj.initialize.apply(obj, begin > 0 || begin + amount < length\n\t\t\t\t\t\t? Base.slice(list, begin, begin + amount)\n\t\t\t\t\t\t: list) || obj;\n\t\t\t\tif (readIndex) {\n\t\t\t\t\tlist.__index = begin + obj.__read;\n\t\t\t\t\tobj.__read = undefined;\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t},\n\t\n\t\t\tpeek: function(list, start) {\n\t\t\t\treturn list[list.__index = start || list.__index || 0];\n\t\t\t},\n\t\n\t\t\tremain: function(list) {\n\t\t\t\treturn list.length - (list.__index || 0);\n\t\t\t},\n\t\n\t\t\treadList: function(list, start, options, amount) {\n\t\t\t\tvar res = [],\n\t\t\t\t\tentry,\n\t\t\t\t\tbegin = start || 0,\n\t\t\t\t\tend = amount ? begin + amount : list.length;\n\t\t\t\tfor (var i = begin; i < end; i++) {\n\t\t\t\t\tres.push(Array.isArray(entry = list[i])\n\t\t\t\t\t\t\t? this.read(entry, 0, options)\n\t\t\t\t\t\t\t: this.read(list, i, options, 1));\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t},\n\t\n\t\t\treadNamed: function(list, name, start, options, amount) {\n\t\t\t\tvar value = this.getNamed(list, name),\n\t\t\t\t\thasObject = value !== undefined;\n\t\t\t\tif (hasObject) {\n\t\t\t\t\tvar filtered = list._filtered;\n\t\t\t\t\tif (!filtered) {\n\t\t\t\t\t\tfiltered = list._filtered = Base.create(list[0]);\n\t\t\t\t\t\tfiltered._unfiltered = list[0];\n\t\t\t\t\t}\n\t\t\t\t\tfiltered[name] = undefined;\n\t\t\t\t}\n\t\t\t\treturn this.read(hasObject ? [value] : list, start, options, amount);\n\t\t\t},\n\t\n\t\t\tgetNamed: function(list, name) {\n\t\t\t\tvar arg = list[0];\n\t\t\t\tif (list._hasObject === undefined)\n\t\t\t\t\tlist._hasObject = list.length === 1 && Base.isPlainObject(arg);\n\t\t\t\tif (list._hasObject)\n\t\t\t\t\treturn name ? arg[name] : list._filtered || arg;\n\t\t\t},\n\t\n\t\t\thasNamed: function(list, name) {\n\t\t\t\treturn !!this.getNamed(list, name);\n\t\t\t},\n\t\n\t\t\tfilter: function(dest, source, exclude, prioritize) {\n\t\t\t\tvar processed;\n\t\n\t\t\t\tfunction handleKey(key) {\n\t\t\t\t\tif (!(exclude && key in exclude) &&\n\t\t\t\t\t\t!(processed && key in processed)) {\n\t\t\t\t\t\tvar value = source[key];\n\t\t\t\t\t\tif (value !== undefined)\n\t\t\t\t\t\t\tdest[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (prioritize) {\n\t\t\t\t\tvar keys = {};\n\t\t\t\t\tfor (var i = 0, key, l = prioritize.length; i < l; i++) {\n\t\t\t\t\t\tif ((key = prioritize[i]) in source) {\n\t\t\t\t\t\t\thandleKey(key);\n\t\t\t\t\t\t\tkeys[key] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprocessed = keys;\n\t\t\t\t}\n\t\n\t\t\t\tObject.keys(source._unfiltered || source).forEach(handleKey);\n\t\t\t\treturn dest;\n\t\t\t},\n\t\n\t\t\tisPlainValue: function(obj, asString) {\n\t\t\t\treturn Base.isPlainObject(obj) || Array.isArray(obj)\n\t\t\t\t\t\t|| asString && typeof obj === 'string';\n\t\t\t},\n\t\n\t\t\tserialize: function(obj, options, compact, dictionary) {\n\t\t\t\toptions = options || {};\n\t\n\t\t\t\tvar isRoot = !dictionary,\n\t\t\t\t\tres;\n\t\t\t\tif (isRoot) {\n\t\t\t\t\toptions.formatter = new Formatter(options.precision);\n\t\t\t\t\tdictionary = {\n\t\t\t\t\t\tlength: 0,\n\t\t\t\t\t\tdefinitions: {},\n\t\t\t\t\t\treferences: {},\n\t\t\t\t\t\tadd: function(item, create) {\n\t\t\t\t\t\t\tvar id = '#' + item._id,\n\t\t\t\t\t\t\t\tref = this.references[id];\n\t\t\t\t\t\t\tif (!ref) {\n\t\t\t\t\t\t\t\tthis.length++;\n\t\t\t\t\t\t\t\tvar res = create.call(item),\n\t\t\t\t\t\t\t\t\tname = item._class;\n\t\t\t\t\t\t\t\tif (name && res[0] !== name)\n\t\t\t\t\t\t\t\t\tres.unshift(name);\n\t\t\t\t\t\t\t\tthis.definitions[id] = res;\n\t\t\t\t\t\t\t\tref = this.references[id] = [id];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ref;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (obj && obj._serialize) {\n\t\t\t\t\tres = obj._serialize(options, dictionary);\n\t\t\t\t\tvar name = obj._class;\n\t\t\t\t\tif (name && !obj._compactSerialize && (isRoot || !compact)\n\t\t\t\t\t\t\t&& res[0] !== name) {\n\t\t\t\t\t\tres.unshift(name);\n\t\t\t\t\t}\n\t\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\t\tres = [];\n\t\t\t\t\tfor (var i = 0, l = obj.length; i < l; i++)\n\t\t\t\t\t\tres[i] = Base.serialize(obj[i], options, compact,\n\t\t\t\t\t\t\t\tdictionary);\n\t\t\t\t} else if (Base.isPlainObject(obj)) {\n\t\t\t\t\tres = {};\n\t\t\t\t\tvar keys = Object.keys(obj);\n\t\t\t\t\tfor (var i = 0, l = keys.length; i < l; i++) {\n\t\t\t\t\t\tvar key = keys[i];\n\t\t\t\t\t\tres[key] = Base.serialize(obj[key], options, compact,\n\t\t\t\t\t\t\t\tdictionary);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof obj === 'number') {\n\t\t\t\t\tres = options.formatter.number(obj, options.precision);\n\t\t\t\t} else {\n\t\t\t\t\tres = obj;\n\t\t\t\t}\n\t\t\t\treturn isRoot && dictionary.length > 0\n\t\t\t\t\t\t? [['dictionary', dictionary.definitions], res]\n\t\t\t\t\t\t: res;\n\t\t\t},\n\t\n\t\t\tdeserialize: function(json, create, _data, _setDictionary, _isRoot) {\n\t\t\t\tvar res = json,\n\t\t\t\t\tisFirst = !_data,\n\t\t\t\t\thasDictionary = isFirst && json && json.length\n\t\t\t\t\t\t&& json[0][0] === 'dictionary';\n\t\t\t\t_data = _data || {};\n\t\t\t\tif (Array.isArray(json)) {\n\t\t\t\t\tvar type = json[0],\n\t\t\t\t\t\tisDictionary = type === 'dictionary';\n\t\t\t\t\tif (json.length == 1 && /^#/.test(type)) {\n\t\t\t\t\t\treturn _data.dictionary[type];\n\t\t\t\t\t}\n\t\t\t\t\ttype = Base.exports[type];\n\t\t\t\t\tres = [];\n\t\t\t\t\tfor (var i = type ? 1 : 0, l = json.length; i < l; i++) {\n\t\t\t\t\t\tres.push(Base.deserialize(json[i], create, _data,\n\t\t\t\t\t\t\t\tisDictionary, hasDictionary));\n\t\t\t\t\t}\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar args = res;\n\t\t\t\t\t\tif (create) {\n\t\t\t\t\t\t\tres = create(type, args, isFirst || _isRoot);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres = Base.create(type.prototype);\n\t\t\t\t\t\t\ttype.apply(res, args);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (Base.isPlainObject(json)) {\n\t\t\t\t\tres = {};\n\t\t\t\t\tif (_setDictionary)\n\t\t\t\t\t\t_data.dictionary = res;\n\t\t\t\t\tfor (var key in json)\n\t\t\t\t\t\tres[key] = Base.deserialize(json[key], create, _data);\n\t\t\t\t}\n\t\t\t\treturn hasDictionary ? res[1] : res;\n\t\t\t},\n\t\n\t\t\texportJSON: function(obj, options) {\n\t\t\t\tvar json = Base.serialize(obj, options);\n\t\t\t\treturn options && options.asString === false\n\t\t\t\t\t\t? json\n\t\t\t\t\t\t: JSON.stringify(json);\n\t\t\t},\n\t\n\t\t\timportJSON: function(json, target) {\n\t\t\t\treturn Base.deserialize(\n\t\t\t\t\t\ttypeof json === 'string' ? JSON.parse(json) : json,\n\t\t\t\t\t\tfunction(ctor, args, isRoot) {\n\t\t\t\t\t\t\tvar useTarget = isRoot && target\n\t\t\t\t\t\t\t\t\t&& target.constructor === ctor,\n\t\t\t\t\t\t\t\tobj = useTarget ? target\n\t\t\t\t\t\t\t\t\t: Base.create(ctor.prototype);\n\t\t\t\t\t\t\tif (args.length === 1 && obj instanceof Item\n\t\t\t\t\t\t\t\t\t&& (useTarget || !(obj instanceof Layer))) {\n\t\t\t\t\t\t\t\tvar arg = args[0];\n\t\t\t\t\t\t\t\tif (Base.isPlainObject(arg))\n\t\t\t\t\t\t\t\t\targ.insert = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t(useTarget ? obj.set : ctor).apply(obj, args);\n\t\t\t\t\t\t\tif (useTarget)\n\t\t\t\t\t\t\t\ttarget = null;\n\t\t\t\t\t\t\treturn obj;\n\t\t\t\t\t\t});\n\t\t\t},\n\t\n\t\t\tsplice: function(list, items, index, remove) {\n\t\t\t\tvar amount = items && items.length,\n\t\t\t\t\tappend = index === undefined;\n\t\t\t\tindex = append ? list.length : index;\n\t\t\t\tif (index > list.length)\n\t\t\t\t\tindex = list.length;\n\t\t\t\tfor (var i = 0; i < amount; i++)\n\t\t\t\t\titems[i]._index = index + i;\n\t\t\t\tif (append) {\n\t\t\t\t\tlist.push.apply(list, items);\n\t\t\t\t\treturn [];\n\t\t\t\t} else {\n\t\t\t\t\tvar args = [index, remove];\n\t\t\t\t\tif (items)\n\t\t\t\t\t\targs.push.apply(args, items);\n\t\t\t\t\tvar removed = list.splice.apply(list, args);\n\t\t\t\t\tfor (var i = 0, l = removed.length; i < l; i++)\n\t\t\t\t\t\tremoved[i]._index = undefined;\n\t\t\t\t\tfor (var i = index + amount, l = list.length; i < l; i++)\n\t\t\t\t\t\tlist[i]._index = i;\n\t\t\t\t\treturn removed;\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tcapitalize: function(str) {\n\t\t\t\treturn str.replace(/\\b[a-z]/g, function(match) {\n\t\t\t\t\treturn match.toUpperCase();\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\tcamelize: function(str) {\n\t\t\t\treturn str.replace(/-(.)/g, function(match, chr) {\n\t\t\t\t\treturn chr.toUpperCase();\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\thyphenate: function(str) {\n\t\t\t\treturn str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tvar Emitter = {\n\t\ton: function(type, func) {\n\t\t\tif (typeof type !== 'string') {\n\t\t\t\tBase.each(type, function(value, key) {\n\t\t\t\t\tthis.on(key, value);\n\t\t\t\t}, this);\n\t\t\t} else {\n\t\t\t\tvar types = this._eventTypes,\n\t\t\t\t\tentry = types && types[type],\n\t\t\t\t\thandlers = this._callbacks = this._callbacks || {};\n\t\t\t\thandlers = handlers[type] = handlers[type] || [];\n\t\t\t\tif (handlers.indexOf(func) === -1) {\n\t\t\t\t\thandlers.push(func);\n\t\t\t\t\tif (entry && entry.install && handlers.length === 1)\n\t\t\t\t\t\tentry.install.call(this, type);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\toff: function(type, func) {\n\t\t\tif (typeof type !== 'string') {\n\t\t\t\tBase.each(type, function(value, key) {\n\t\t\t\t\tthis.off(key, value);\n\t\t\t\t}, this);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar types = this._eventTypes,\n\t\t\t\tentry = types && types[type],\n\t\t\t\thandlers = this._callbacks && this._callbacks[type],\n\t\t\t\tindex;\n\t\t\tif (handlers) {\n\t\t\t\tif (!func || (index = handlers.indexOf(func)) !== -1\n\t\t\t\t\t\t&& handlers.length === 1) {\n\t\t\t\t\tif (entry && entry.uninstall)\n\t\t\t\t\t\tentry.uninstall.call(this, type);\n\t\t\t\t\tdelete this._callbacks[type];\n\t\t\t\t} else if (index !== -1) {\n\t\t\t\t\thandlers.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\tonce: function(type, func) {\n\t\t\treturn this.on(type, function() {\n\t\t\t\tfunc.apply(this, arguments);\n\t\t\t\tthis.off(type, func);\n\t\t\t});\n\t\t},\n\t\n\t\temit: function(type, event) {\n\t\t\tvar handlers = this._callbacks && this._callbacks[type];\n\t\t\tif (!handlers)\n\t\t\t\treturn false;\n\t\t\tvar args = Base.slice(arguments, 1),\n\t\t\t\tsetTarget = event && event.target && !event.currentTarget;\n\t\t\thandlers = handlers.slice();\n\t\t\tif (setTarget)\n\t\t\t\tevent.currentTarget = this;\n\t\t\tfor (var i = 0, l = handlers.length; i < l; i++) {\n\t\t\t\tif (handlers[i].apply(this, args) === false) {\n\t\t\t\t\tif (event && event.stop)\n\t\t\t\t\t\tevent.stop();\n\t\t\t\t\tbreak;\n\t\t\t   }\n\t\t\t}\n\t\t\tif (setTarget)\n\t\t\t\tdelete event.currentTarget;\n\t\t\treturn true;\n\t\t},\n\t\n\t\tresponds: function(type) {\n\t\t\treturn !!(this._callbacks && this._callbacks[type]);\n\t\t},\n\t\n\t\tattach: '#on',\n\t\tdetach: '#off',\n\t\tfire: '#emit',\n\t\n\t\t_installEvents: function(install) {\n\t\t\tvar types = this._eventTypes,\n\t\t\t\thandlers = this._callbacks,\n\t\t\t\tkey = install ? 'install' : 'uninstall';\n\t\t\tif (types) {\n\t\t\t\tfor (var type in handlers) {\n\t\t\t\t\tif (handlers[type].length > 0) {\n\t\t\t\t\t\tvar entry = types[type],\n\t\t\t\t\t\t\tfunc = entry && entry[key];\n\t\t\t\t\t\tif (func)\n\t\t\t\t\t\t\tfunc.call(this, type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tstatics: {\n\t\t\tinject: function inject(src) {\n\t\t\t\tvar events = src._events;\n\t\t\t\tif (events) {\n\t\t\t\t\tvar types = {};\n\t\t\t\t\tBase.each(events, function(entry, key) {\n\t\t\t\t\t\tvar isString = typeof entry === 'string',\n\t\t\t\t\t\t\tname = isString ? entry : key,\n\t\t\t\t\t\t\tpart = Base.capitalize(name),\n\t\t\t\t\t\t\ttype = name.substring(2).toLowerCase();\n\t\t\t\t\t\ttypes[type] = isString ? {} : entry;\n\t\t\t\t\t\tname = '_' + name;\n\t\t\t\t\t\tsrc['get' + part] = function() {\n\t\t\t\t\t\t\treturn this[name];\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsrc['set' + part] = function(func) {\n\t\t\t\t\t\t\tvar prev = this[name];\n\t\t\t\t\t\t\tif (prev)\n\t\t\t\t\t\t\t\tthis.off(type, prev);\n\t\t\t\t\t\t\tif (func)\n\t\t\t\t\t\t\t\tthis.on(type, func);\n\t\t\t\t\t\t\tthis[name] = func;\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tsrc._eventTypes = types;\n\t\t\t\t}\n\t\t\t\treturn inject.base.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar PaperScope = Base.extend({\n\t\t_class: 'PaperScope',\n\t\n\t\tinitialize: function PaperScope() {\n\t\t\tpaper = this;\n\t\t\tthis.settings = new Base({\n\t\t\t\tapplyMatrix: true,\n\t\t\t\tinsertItems: true,\n\t\t\t\thandleSize: 4,\n\t\t\t\thitTolerance: 0\n\t\t\t});\n\t\t\tthis.project = null;\n\t\t\tthis.projects = [];\n\t\t\tthis.tools = [];\n\t\t\tthis.palettes = [];\n\t\t\tthis._id = PaperScope._id++;\n\t\t\tPaperScope._scopes[this._id] = this;\n\t\t\tvar proto = PaperScope.prototype;\n\t\t\tif (!this.support) {\n\t\t\t\tvar ctx = CanvasProvider.getContext(1, 1) || {};\n\t\t\t\tproto.support = {\n\t\t\t\t\tnativeDash: 'setLineDash' in ctx || 'mozDash' in ctx,\n\t\t\t\t\tnativeBlendModes: BlendMode.nativeModes\n\t\t\t\t};\n\t\t\t\tCanvasProvider.release(ctx);\n\t\t\t}\n\t\t\tif (!this.agent) {\n\t\t\t\tvar user = self.navigator.userAgent.toLowerCase(),\n\t\t\t\t\tos = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(user)||[])[0],\n\t\t\t\t\tplatform = os === 'darwin' ? 'mac' : os,\n\t\t\t\t\tagent = proto.agent = proto.browser = { platform: platform };\n\t\t\t\tif (platform)\n\t\t\t\t\tagent[platform] = true;\n\t\t\t\tuser.replace(\n\t\t\t\t\t/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node)\\/?\\s*([.\\d]+)(?:.*version\\/([.\\d]+))?(?:.*rv\\:v?([.\\d]+))?/g,\n\t\t\t\t\tfunction(match, n, v1, v2, rv) {\n\t\t\t\t\t\tif (!agent.chrome) {\n\t\t\t\t\t\t\tvar v = n === 'opera' ? v2 :\n\t\t\t\t\t\t\t\t\t/^(node|trident)$/.test(n) ? rv : v1;\n\t\t\t\t\t\t\tagent.version = v;\n\t\t\t\t\t\t\tagent.versionNumber = parseFloat(v);\n\t\t\t\t\t\t\tn = n === 'trident' ? 'msie' : n;\n\t\t\t\t\t\t\tagent.name = n;\n\t\t\t\t\t\t\tagent[n] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tif (agent.chrome)\n\t\t\t\t\tdelete agent.webkit;\n\t\t\t\tif (agent.atom)\n\t\t\t\t\tdelete agent.chrome;\n\t\t\t}\n\t\t},\n\t\n\t\tversion: \"0.10.2-develop\",\n\t\n\t\tgetView: function() {\n\t\t\tvar project = this.project;\n\t\t\treturn project && project._view;\n\t\t},\n\t\n\t\tgetPaper: function() {\n\t\t\treturn this;\n\t\t},\n\t\n\t\texecute: function(code, options) {\n\t\t\tpaper.PaperScript.execute(code, this, options);\n\t\t\tView.updateFocus();\n\t\t},\n\t\n\t\tinstall: function(scope) {\n\t\t\tvar that = this;\n\t\t\tBase.each(['project', 'view', 'tool'], function(key) {\n\t\t\t\tBase.define(scope, key, {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\treturn that[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tfor (var key in this)\n\t\t\t\tif (!/^_/.test(key) && this[key])\n\t\t\t\t\tscope[key] = this[key];\n\t\t},\n\t\n\t\tsetup: function(element) {\n\t\t\tpaper = this;\n\t\t\tthis.project = new Project(element);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tcreateCanvas: function(width, height) {\n\t\t\treturn CanvasProvider.getCanvas(width, height);\n\t\t},\n\t\n\t\tactivate: function() {\n\t\t\tpaper = this;\n\t\t},\n\t\n\t\tclear: function() {\n\t\t\tvar projects = this.projects,\n\t\t\t\ttools = this.tools,\n\t\t\t\tpalettes = this.palettes;\n\t\t\tfor (var i = projects.length - 1; i >= 0; i--)\n\t\t\t\tprojects[i].remove();\n\t\t\tfor (var i = tools.length - 1; i >= 0; i--)\n\t\t\t\ttools[i].remove();\n\t\t\tfor (var i = palettes.length - 1; i >= 0; i--)\n\t\t\t\tpalettes[i].remove();\n\t\t},\n\t\n\t\tremove: function() {\n\t\t\tthis.clear();\n\t\t\tdelete PaperScope._scopes[this._id];\n\t\t},\n\t\n\t\tstatics: new function() {\n\t\t\tfunction handleAttribute(name) {\n\t\t\t\tname += 'Attribute';\n\t\t\t\treturn function(el, attr) {\n\t\t\t\t\treturn el[name](attr) || el[name]('data-paper-' + attr);\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\t_scopes: {},\n\t\t\t\t_id: 0,\n\t\n\t\t\t\tget: function(id) {\n\t\t\t\t\treturn this._scopes[id] || null;\n\t\t\t\t},\n\t\n\t\t\t\tgetAttribute: handleAttribute('get'),\n\t\t\t\thasAttribute: handleAttribute('has')\n\t\t\t};\n\t\t}\n\t});\n\t\n\tvar PaperScopeItem = Base.extend(Emitter, {\n\t\n\t\tinitialize: function(activate) {\n\t\t\tthis._scope = paper;\n\t\t\tthis._index = this._scope[this._list].push(this) - 1;\n\t\t\tif (activate || !this._scope[this._reference])\n\t\t\t\tthis.activate();\n\t\t},\n\t\n\t\tactivate: function() {\n\t\t\tif (!this._scope)\n\t\t\t\treturn false;\n\t\t\tvar prev = this._scope[this._reference];\n\t\t\tif (prev && prev !== this)\n\t\t\t\tprev.emit('deactivate');\n\t\t\tthis._scope[this._reference] = this;\n\t\t\tthis.emit('activate', prev);\n\t\t\treturn true;\n\t\t},\n\t\n\t\tisActive: function() {\n\t\t\treturn this._scope[this._reference] === this;\n\t\t},\n\t\n\t\tremove: function() {\n\t\t\tif (this._index == null)\n\t\t\t\treturn false;\n\t\t\tBase.splice(this._scope[this._list], null, this._index, 1);\n\t\t\tif (this._scope[this._reference] == this)\n\t\t\t\tthis._scope[this._reference] = null;\n\t\t\tthis._scope = null;\n\t\t\treturn true;\n\t\t},\n\t\n\t\tgetView: function() {\n\t\t\treturn this._scope.getView();\n\t\t}\n\t});\n\t\n\tvar Formatter = Base.extend({\n\t\tinitialize: function(precision) {\n\t\t\tthis.precision = Base.pick(precision, 5);\n\t\t\tthis.multiplier = Math.pow(10, this.precision);\n\t\t},\n\t\n\t\tnumber: function(val) {\n\t\t\treturn this.precision < 16\n\t\t\t\t\t? Math.round(val * this.multiplier) / this.multiplier : val;\n\t\t},\n\t\n\t\tpair: function(val1, val2, separator) {\n\t\t\treturn this.number(val1) + (separator || ',') + this.number(val2);\n\t\t},\n\t\n\t\tpoint: function(val, separator) {\n\t\t\treturn this.number(val.x) + (separator || ',') + this.number(val.y);\n\t\t},\n\t\n\t\tsize: function(val, separator) {\n\t\t\treturn this.number(val.width) + (separator || ',')\n\t\t\t\t\t+ this.number(val.height);\n\t\t},\n\t\n\t\trectangle: function(val, separator) {\n\t\t\treturn this.point(val, separator) + (separator || ',')\n\t\t\t\t\t+ this.size(val, separator);\n\t\t}\n\t});\n\t\n\tFormatter.instance = new Formatter();\n\t\n\tvar Numerical = new function() {\n\t\n\t\tvar abscissas = [\n\t\t\t[  0.5773502691896257645091488],\n\t\t\t[0,0.7745966692414833770358531],\n\t\t\t[  0.3399810435848562648026658,0.8611363115940525752239465],\n\t\t\t[0,0.5384693101056830910363144,0.9061798459386639927976269],\n\t\t\t[  0.2386191860831969086305017,0.6612093864662645136613996,0.9324695142031520278123016],\n\t\t\t[0,0.4058451513773971669066064,0.7415311855993944398638648,0.9491079123427585245261897],\n\t\t\t[  0.1834346424956498049394761,0.5255324099163289858177390,0.7966664774136267395915539,0.9602898564975362316835609],\n\t\t\t[0,0.3242534234038089290385380,0.6133714327005903973087020,0.8360311073266357942994298,0.9681602395076260898355762],\n\t\t\t[  0.1488743389816312108848260,0.4333953941292471907992659,0.6794095682990244062343274,0.8650633666889845107320967,0.9739065285171717200779640],\n\t\t\t[0,0.2695431559523449723315320,0.5190961292068118159257257,0.7301520055740493240934163,0.8870625997680952990751578,0.9782286581460569928039380],\n\t\t\t[  0.1252334085114689154724414,0.3678314989981801937526915,0.5873179542866174472967024,0.7699026741943046870368938,0.9041172563704748566784659,0.9815606342467192506905491],\n\t\t\t[0,0.2304583159551347940655281,0.4484927510364468528779129,0.6423493394403402206439846,0.8015780907333099127942065,0.9175983992229779652065478,0.9841830547185881494728294],\n\t\t\t[  0.1080549487073436620662447,0.3191123689278897604356718,0.5152486363581540919652907,0.6872929048116854701480198,0.8272013150697649931897947,0.9284348836635735173363911,0.9862838086968123388415973],\n\t\t\t[0,0.2011940939974345223006283,0.3941513470775633698972074,0.5709721726085388475372267,0.7244177313601700474161861,0.8482065834104272162006483,0.9372733924007059043077589,0.9879925180204854284895657],\n\t\t\t[  0.0950125098376374401853193,0.2816035507792589132304605,0.4580167776572273863424194,0.6178762444026437484466718,0.7554044083550030338951012,0.8656312023878317438804679,0.9445750230732325760779884,0.9894009349916499325961542]\n\t\t];\n\t\n\t\tvar weights = [\n\t\t\t[1],\n\t\t\t[0.8888888888888888888888889,0.5555555555555555555555556],\n\t\t\t[0.6521451548625461426269361,0.3478548451374538573730639],\n\t\t\t[0.5688888888888888888888889,0.4786286704993664680412915,0.2369268850561890875142640],\n\t\t\t[0.4679139345726910473898703,0.3607615730481386075698335,0.1713244923791703450402961],\n\t\t\t[0.4179591836734693877551020,0.3818300505051189449503698,0.2797053914892766679014678,0.1294849661688696932706114],\n\t\t\t[0.3626837833783619829651504,0.3137066458778872873379622,0.2223810344533744705443560,0.1012285362903762591525314],\n\t\t\t[0.3302393550012597631645251,0.3123470770400028400686304,0.2606106964029354623187429,0.1806481606948574040584720,0.0812743883615744119718922],\n\t\t\t[0.2955242247147528701738930,0.2692667193099963550912269,0.2190863625159820439955349,0.1494513491505805931457763,0.0666713443086881375935688],\n\t\t\t[0.2729250867779006307144835,0.2628045445102466621806889,0.2331937645919904799185237,0.1862902109277342514260976,0.1255803694649046246346943,0.0556685671161736664827537],\n\t\t\t[0.2491470458134027850005624,0.2334925365383548087608499,0.2031674267230659217490645,0.1600783285433462263346525,0.1069393259953184309602547,0.0471753363865118271946160],\n\t\t\t[0.2325515532308739101945895,0.2262831802628972384120902,0.2078160475368885023125232,0.1781459807619457382800467,0.1388735102197872384636018,0.0921214998377284479144218,0.0404840047653158795200216],\n\t\t\t[0.2152638534631577901958764,0.2051984637212956039659241,0.1855383974779378137417166,0.1572031671581935345696019,0.1215185706879031846894148,0.0801580871597602098056333,0.0351194603317518630318329],\n\t\t\t[0.2025782419255612728806202,0.1984314853271115764561183,0.1861610000155622110268006,0.1662692058169939335532009,0.1395706779261543144478048,0.1071592204671719350118695,0.0703660474881081247092674,0.0307532419961172683546284],\n\t\t\t[0.1894506104550684962853967,0.1826034150449235888667637,0.1691565193950025381893121,0.1495959888165767320815017,0.1246289712555338720524763,0.0951585116824927848099251,0.0622535239386478928628438,0.0271524594117540948517806]\n\t\t];\n\t\n\t\tvar abs = Math.abs,\n\t\t\tsqrt = Math.sqrt,\n\t\t\tpow = Math.pow,\n\t\t\tlog2 = Math.log2 || function(x) {\n\t\t\t\treturn Math.log(x) * Math.LOG2E;\n\t\t\t},\n\t\t\tEPSILON = 1e-12,\n\t\t\tMACHINE_EPSILON = 1.12e-16;\n\t\n\t\tfunction clamp(value, min, max) {\n\t\t\treturn value < min ? min : value > max ? max : value;\n\t\t}\n\t\n\t\tfunction getDiscriminant(a, b, c) {\n\t\t\tfunction split(v) {\n\t\t\t\tvar x = v * 134217729,\n\t\t\t\t\ty = v - x,\n\t\t\t\t\thi = y + x,\n\t\t\t\t\tlo = v - hi;\n\t\t\t\treturn [hi, lo];\n\t\t\t}\n\t\n\t\t\tvar D = b * b - a * c,\n\t\t\t\tE = b * b + a * c;\n\t\t\tif (abs(D) * 3 < E) {\n\t\t\t\tvar ad = split(a),\n\t\t\t\t\tbd = split(b),\n\t\t\t\t\tcd = split(c),\n\t\t\t\t\tp = b * b,\n\t\t\t\t\tdp = (bd[0] * bd[0] - p + 2 * bd[0] * bd[1]) + bd[1] * bd[1],\n\t\t\t\t\tq = a * c,\n\t\t\t\t\tdq = (ad[0] * cd[0] - q + ad[0] * cd[1] + ad[1] * cd[0])\n\t\t\t\t\t\t\t+ ad[1] * cd[1];\n\t\t\t\tD = (p - q) + (dp - dq);\n\t\t\t}\n\t\t\treturn D;\n\t\t}\n\t\n\t\tfunction getNormalizationFactor() {\n\t\t\tvar norm = Math.max.apply(Math, arguments);\n\t\t\treturn norm && (norm < 1e-8 || norm > 1e8)\n\t\t\t\t\t? pow(2, -Math.round(log2(norm)))\n\t\t\t\t\t: 0;\n\t\t}\n\t\n\t\treturn {\n\t\t\tTOLERANCE: 1e-6,\n\t\t\tEPSILON: EPSILON,\n\t\t\tMACHINE_EPSILON: MACHINE_EPSILON,\n\t\t\tCURVETIME_EPSILON: 4e-7,\n\t\t\tGEOMETRIC_EPSILON: 1e-7,\n\t\t\tWINDING_EPSILON: 1e-8,\n\t\t\tTRIGONOMETRIC_EPSILON: 1e-8,\n\t\t\tCLIPPING_EPSILON: 1e-10,\n\t\t\tKAPPA: 4 * (sqrt(2) - 1) / 3,\n\t\n\t\t\tisZero: function(val) {\n\t\t\t\treturn val >= -EPSILON && val <= EPSILON;\n\t\t\t},\n\t\n\t\t\tclamp: clamp,\n\t\n\t\t\tintegrate: function(f, a, b, n) {\n\t\t\t\tvar x = abscissas[n - 2],\n\t\t\t\t\tw = weights[n - 2],\n\t\t\t\t\tA = (b - a) * 0.5,\n\t\t\t\t\tB = A + a,\n\t\t\t\t\ti = 0,\n\t\t\t\t\tm = (n + 1) >> 1,\n\t\t\t\t\tsum = n & 1 ? w[i++] * f(B) : 0;\n\t\t\t\twhile (i < m) {\n\t\t\t\t\tvar Ax = A * x[i];\n\t\t\t\t\tsum += w[i++] * (f(B + Ax) + f(B - Ax));\n\t\t\t\t}\n\t\t\t\treturn A * sum;\n\t\t\t},\n\t\n\t\t\tfindRoot: function(f, df, x, a, b, n, tolerance) {\n\t\t\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\t\tvar fx = f(x),\n\t\t\t\t\t\tdx = fx / df(x),\n\t\t\t\t\t\tnx = x - dx;\n\t\t\t\t\tif (abs(dx) < tolerance)\n\t\t\t\t\t\treturn nx;\n\t\t\t\t\tif (fx > 0) {\n\t\t\t\t\t\tb = x;\n\t\t\t\t\t\tx = nx <= a ? (a + b) * 0.5 : nx;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ta = x;\n\t\t\t\t\t\tx = nx >= b ? (a + b) * 0.5 : nx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn x;\n\t\t\t},\n\t\n\t\t\tsolveQuadratic: function(a, b, c, roots, min, max) {\n\t\t\t\tvar x1, x2 = Infinity;\n\t\t\t\tif (abs(a) < EPSILON) {\n\t\t\t\t\tif (abs(b) < EPSILON)\n\t\t\t\t\t\treturn abs(c) < EPSILON ? -1 : 0;\n\t\t\t\t\tx1 = -c / b;\n\t\t\t\t} else {\n\t\t\t\t\tb *= -0.5;\n\t\t\t\t\tvar D = getDiscriminant(a, b, c);\n\t\t\t\t\tif (D && abs(D) < MACHINE_EPSILON) {\n\t\t\t\t\t\tvar f = getNormalizationFactor(abs(a), abs(b), abs(c));\n\t\t\t\t\t\tif (f) {\n\t\t\t\t\t\t\ta *= f;\n\t\t\t\t\t\t\tb *= f;\n\t\t\t\t\t\t\tc *= f;\n\t\t\t\t\t\t\tD = getDiscriminant(a, b, c);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (D >= -MACHINE_EPSILON) {\n\t\t\t\t\t\tvar Q = D < 0 ? 0 : sqrt(D),\n\t\t\t\t\t\t\tR = b + (b < 0 ? -Q : Q);\n\t\t\t\t\t\tif (R === 0) {\n\t\t\t\t\t\t\tx1 = c / a;\n\t\t\t\t\t\t\tx2 = -x1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tx1 = R / a;\n\t\t\t\t\t\t\tx2 = c / R;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar count = 0,\n\t\t\t\t\tboundless = min == null,\n\t\t\t\t\tminB = min - EPSILON,\n\t\t\t\t\tmaxB = max + EPSILON;\n\t\t\t\tif (isFinite(x1) && (boundless || x1 > minB && x1 < maxB))\n\t\t\t\t\troots[count++] = boundless ? x1 : clamp(x1, min, max);\n\t\t\t\tif (x2 !== x1\n\t\t\t\t\t\t&& isFinite(x2) && (boundless || x2 > minB && x2 < maxB))\n\t\t\t\t\troots[count++] = boundless ? x2 : clamp(x2, min, max);\n\t\t\t\treturn count;\n\t\t\t},\n\t\n\t\t\tsolveCubic: function(a, b, c, d, roots, min, max) {\n\t\t\t\tvar f = getNormalizationFactor(abs(a), abs(b), abs(c), abs(d)),\n\t\t\t\t\tx, b1, c2, qd, q;\n\t\t\t\tif (f) {\n\t\t\t\t\ta *= f;\n\t\t\t\t\tb *= f;\n\t\t\t\t\tc *= f;\n\t\t\t\t\td *= f;\n\t\t\t\t}\n\t\n\t\t\t\tfunction evaluate(x0) {\n\t\t\t\t\tx = x0;\n\t\t\t\t\tvar tmp = a * x;\n\t\t\t\t\tb1 = tmp + b;\n\t\t\t\t\tc2 = b1 * x + c;\n\t\t\t\t\tqd = (tmp + b1) * x + c2;\n\t\t\t\t\tq = c2 * x + d;\n\t\t\t\t}\n\t\n\t\t\t\tif (abs(a) < EPSILON) {\n\t\t\t\t\ta = b;\n\t\t\t\t\tb1 = c;\n\t\t\t\t\tc2 = d;\n\t\t\t\t\tx = Infinity;\n\t\t\t\t} else if (abs(d) < EPSILON) {\n\t\t\t\t\tb1 = b;\n\t\t\t\t\tc2 = c;\n\t\t\t\t\tx = 0;\n\t\t\t\t} else {\n\t\t\t\t\tevaluate(-(b / a) / 3);\n\t\t\t\t\tvar t = q / a,\n\t\t\t\t\t\tr = pow(abs(t), 1/3),\n\t\t\t\t\t\ts = t < 0 ? -1 : 1,\n\t\t\t\t\t\ttd = -qd / a,\n\t\t\t\t\t\trd = td > 0 ? 1.324717957244746 * Math.max(r, sqrt(td)) : r,\n\t\t\t\t\t\tx0 = x - s * rd;\n\t\t\t\t\tif (x0 !== x) {\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tevaluate(x0);\n\t\t\t\t\t\t\tx0 = qd === 0 ? x : x - q / qd / (1 + MACHINE_EPSILON);\n\t\t\t\t\t\t} while (s * x0 > s * x);\n\t\t\t\t\t\tif (abs(a) * x * x > abs(d / x)) {\n\t\t\t\t\t\t\tc2 = -d / x;\n\t\t\t\t\t\t\tb1 = (c2 - c) / x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar count = Numerical.solveQuadratic(a, b1, c2, roots, min, max),\n\t\t\t\t\tboundless = min == null;\n\t\t\t\tif (isFinite(x) && (count === 0\n\t\t\t\t\t\t|| count > 0 && x !== roots[0] && x !== roots[1])\n\t\t\t\t\t\t&& (boundless || x > min - EPSILON && x < max + EPSILON))\n\t\t\t\t\troots[count++] = boundless ? x : clamp(x, min, max);\n\t\t\t\treturn count;\n\t\t\t}\n\t\t};\n\t};\n\t\n\tvar UID = {\n\t\t_id: 1,\n\t\t_pools: {},\n\t\n\t\tget: function(name) {\n\t\t\tif (name) {\n\t\t\t\tvar pool = this._pools[name];\n\t\t\t\tif (!pool)\n\t\t\t\t\tpool = this._pools[name] = { _id: 1 };\n\t\t\t\treturn pool._id++;\n\t\t\t} else {\n\t\t\t\treturn this._id++;\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar Point = Base.extend({\n\t\t_class: 'Point',\n\t\t_readIndex: true,\n\t\n\t\tinitialize: function Point(arg0, arg1) {\n\t\t\tvar type = typeof arg0,\n\t\t\t\treading = this.__read,\n\t\t\t\tread = 0;\n\t\t\tif (type === 'number') {\n\t\t\t\tvar hasY = typeof arg1 === 'number';\n\t\t\t\tthis._set(arg0, hasY ? arg1 : arg0);\n\t\t\t\tif (reading)\n\t\t\t\t\tread = hasY ? 2 : 1;\n\t\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\t\tthis._set(0, 0);\n\t\t\t\tif (reading)\n\t\t\t\t\tread = arg0 === null ? 1 : 0;\n\t\t\t} else {\n\t\t\t\tvar obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;\n\t\t\t\tread = 1;\n\t\t\t\tif (Array.isArray(obj)) {\n\t\t\t\t\tthis._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));\n\t\t\t\t} else if ('x' in obj) {\n\t\t\t\t\tthis._set(obj.x || 0, obj.y || 0);\n\t\t\t\t} else if ('width' in obj) {\n\t\t\t\t\tthis._set(obj.width || 0, obj.height || 0);\n\t\t\t\t} else if ('angle' in obj) {\n\t\t\t\t\tthis._set(obj.length || 0, 0);\n\t\t\t\t\tthis.setAngle(obj.angle || 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis._set(0, 0);\n\t\t\t\t\tread = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (reading)\n\t\t\t\tthis.__read = read;\n\t\t\treturn this;\n\t\t},\n\t\n\t\tset: '#initialize',\n\t\n\t\t_set: function(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t},\n\t\n\t\tequals: function(point) {\n\t\t\treturn this === point || point\n\t\t\t\t\t&& (this.x === point.x && this.y === point.y\n\t\t\t\t\t\t|| Array.isArray(point)\n\t\t\t\t\t\t\t&& this.x === point[0] && this.y === point[1])\n\t\t\t\t\t|| false;\n\t\t},\n\t\n\t\tclone: function() {\n\t\t\treturn new Point(this.x, this.y);\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\tvar f = Formatter.instance;\n\t\t\treturn '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ' }';\n\t\t},\n\t\n\t\t_serialize: function(options) {\n\t\t\tvar f = options.formatter;\n\t\t\treturn [f.number(this.x), f.number(this.y)];\n\t\t},\n\t\n\t\tgetLength: function() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t},\n\t\n\t\tsetLength: function(length) {\n\t\t\tif (this.isZero()) {\n\t\t\t\tvar angle = this._angle || 0;\n\t\t\t\tthis._set(\n\t\t\t\t\tMath.cos(angle) * length,\n\t\t\t\t\tMath.sin(angle) * length\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tvar scale = length / this.getLength();\n\t\t\t\tif (Numerical.isZero(scale))\n\t\t\t\t\tthis.getAngle();\n\t\t\t\tthis._set(\n\t\t\t\t\tthis.x * scale,\n\t\t\t\t\tthis.y * scale\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tgetAngle: function() {\n\t\t\treturn this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;\n\t\t},\n\t\n\t\tsetAngle: function(angle) {\n\t\t\tthis.setAngleInRadians.call(this, angle * Math.PI / 180);\n\t\t},\n\t\n\t\tgetAngleInDegrees: '#getAngle',\n\t\tsetAngleInDegrees: '#setAngle',\n\t\n\t\tgetAngleInRadians: function() {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this.isZero()\n\t\t\t\t\t\t? this._angle || 0\n\t\t\t\t\t\t: this._angle = Math.atan2(this.y, this.x);\n\t\t\t} else {\n\t\t\t\tvar point = Point.read(arguments),\n\t\t\t\t\tdiv = this.getLength() * point.getLength();\n\t\t\t\tif (Numerical.isZero(div)) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t} else {\n\t\t\t\t\tvar a = this.dot(point) / div;\n\t\t\t\t\treturn Math.acos(a < -1 ? -1 : a > 1 ? 1 : a);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tsetAngleInRadians: function(angle) {\n\t\t\tthis._angle = angle;\n\t\t\tif (!this.isZero()) {\n\t\t\t\tvar length = this.getLength();\n\t\t\t\tthis._set(\n\t\t\t\t\tMath.cos(angle) * length,\n\t\t\t\t\tMath.sin(angle) * length\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\n\t\tgetQuadrant: function() {\n\t\t\treturn this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3;\n\t\t}\n\t}, {\n\t\tbeans: false,\n\t\n\t\tgetDirectedAngle: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn Math.atan2(this.cross(point), this.dot(point)) * 180 / Math.PI;\n\t\t},\n\t\n\t\tgetDistance: function() {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tx = point.x - this.x,\n\t\t\t\ty = point.y - this.y,\n\t\t\t\td = x * x + y * y,\n\t\t\t\tsquared = Base.read(arguments);\n\t\t\treturn squared ? d : Math.sqrt(d);\n\t\t},\n\t\n\t\tnormalize: function(length) {\n\t\t\tif (length === undefined)\n\t\t\t\tlength = 1;\n\t\t\tvar current = this.getLength(),\n\t\t\t\tscale = current !== 0 ? length / current : 0,\n\t\t\t\tpoint = new Point(this.x * scale, this.y * scale);\n\t\t\tif (scale >= 0)\n\t\t\t\tpoint._angle = this._angle;\n\t\t\treturn point;\n\t\t},\n\t\n\t\trotate: function(angle, center) {\n\t\t\tif (angle === 0)\n\t\t\t\treturn this.clone();\n\t\t\tangle = angle * Math.PI / 180;\n\t\t\tvar point = center ? this.subtract(center) : this,\n\t\t\t\tsin = Math.sin(angle),\n\t\t\t\tcos = Math.cos(angle);\n\t\t\tpoint = new Point(\n\t\t\t\tpoint.x * cos - point.y * sin,\n\t\t\t\tpoint.x * sin + point.y * cos\n\t\t\t);\n\t\t\treturn center ? point.add(center) : point;\n\t\t},\n\t\n\t\ttransform: function(matrix) {\n\t\t\treturn matrix ? matrix._transformPoint(this) : this;\n\t\t},\n\t\n\t\tadd: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn new Point(this.x + point.x, this.y + point.y);\n\t\t},\n\t\n\t\tsubtract: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn new Point(this.x - point.x, this.y - point.y);\n\t\t},\n\t\n\t\tmultiply: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn new Point(this.x * point.x, this.y * point.y);\n\t\t},\n\t\n\t\tdivide: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn new Point(this.x / point.x, this.y / point.y);\n\t\t},\n\t\n\t\tmodulo: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn new Point(this.x % point.x, this.y % point.y);\n\t\t},\n\t\n\t\tnegate: function() {\n\t\t\treturn new Point(-this.x, -this.y);\n\t\t},\n\t\n\t\tisInside: function() {\n\t\t\treturn Rectangle.read(arguments).contains(this);\n\t\t},\n\t\n\t\tisClose: function() {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\ttolerance = Base.read(arguments);\n\t\t\treturn this.getDistance(point) <= tolerance;\n\t\t},\n\t\n\t\tisCollinear: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn Point.isCollinear(this.x, this.y, point.x, point.y);\n\t\t},\n\t\n\t\tisColinear: '#isCollinear',\n\t\n\t\tisOrthogonal: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn Point.isOrthogonal(this.x, this.y, point.x, point.y);\n\t\t},\n\t\n\t\tisZero: function() {\n\t\t\treturn Numerical.isZero(this.x) && Numerical.isZero(this.y);\n\t\t},\n\t\n\t\tisNaN: function() {\n\t\t\treturn isNaN(this.x) || isNaN(this.y);\n\t\t},\n\t\n\t\tdot: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn this.x * point.x + this.y * point.y;\n\t\t},\n\t\n\t\tcross: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\treturn this.x * point.y - this.y * point.x;\n\t\t},\n\t\n\t\tproject: function() {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tscale = point.isZero() ? 0 : this.dot(point) / point.dot(point);\n\t\t\treturn new Point(\n\t\t\t\tpoint.x * scale,\n\t\t\t\tpoint.y * scale\n\t\t\t);\n\t\t},\n\t\n\t\tstatics: {\n\t\t\tmin: function() {\n\t\t\t\tvar point1 = Point.read(arguments),\n\t\t\t\t\tpoint2 = Point.read(arguments);\n\t\t\t\treturn new Point(\n\t\t\t\t\tMath.min(point1.x, point2.x),\n\t\t\t\t\tMath.min(point1.y, point2.y)\n\t\t\t\t);\n\t\t\t},\n\t\n\t\t\tmax: function() {\n\t\t\t\tvar point1 = Point.read(arguments),\n\t\t\t\t\tpoint2 = Point.read(arguments);\n\t\t\t\treturn new Point(\n\t\t\t\t\tMath.max(point1.x, point2.x),\n\t\t\t\t\tMath.max(point1.y, point2.y)\n\t\t\t\t);\n\t\t\t},\n\t\n\t\t\trandom: function() {\n\t\t\t\treturn new Point(Math.random(), Math.random());\n\t\t\t},\n\t\n\t\t\tisCollinear: function(x1, y1, x2, y2) {\n\t\t\t\treturn Math.abs(x1 * y2 - y1 * x2)\n\t\t\t\t\t\t<= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))\n\t\t\t\t\t\t\t* 1e-8;\n\t\t\t},\n\t\n\t\t\tisOrthogonal: function(x1, y1, x2, y2) {\n\t\t\t\treturn Math.abs(x1 * x2 + y1 * y2)\n\t\t\t\t\t\t<= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))\n\t\t\t\t\t\t\t* 1e-8;\n\t\t\t}\n\t\t}\n\t}, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {\n\t\tvar op = Math[key];\n\t\tthis[key] = function() {\n\t\t\treturn new Point(op(this.x), op(this.y));\n\t\t};\n\t}, {}));\n\t\n\tvar LinkedPoint = Point.extend({\n\t\tinitialize: function Point(x, y, owner, setter) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._owner = owner;\n\t\t\tthis._setter = setter;\n\t\t},\n\t\n\t\t_set: function(x, y, _dontNotify) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tif (!_dontNotify)\n\t\t\t\tthis._owner[this._setter](this);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tgetX: function() {\n\t\t\treturn this._x;\n\t\t},\n\t\n\t\tsetX: function(x) {\n\t\t\tthis._x = x;\n\t\t\tthis._owner[this._setter](this);\n\t\t},\n\t\n\t\tgetY: function() {\n\t\t\treturn this._y;\n\t\t},\n\t\n\t\tsetY: function(y) {\n\t\t\tthis._y = y;\n\t\t\tthis._owner[this._setter](this);\n\t\t},\n\t\n\t\tisSelected: function() {\n\t\t\treturn !!(this._owner._selection & this._getSelection());\n\t\t},\n\t\n\t\tsetSelected: function(selected) {\n\t\t\tthis._owner.changeSelection(this._getSelection(), selected);\n\t\t},\n\t\n\t\t_getSelection: function() {\n\t\t\treturn this._setter === 'setPosition' ? 4 : 0;\n\t\t}\n\t});\n\t\n\tvar Size = Base.extend({\n\t\t_class: 'Size',\n\t\t_readIndex: true,\n\t\n\t\tinitialize: function Size(arg0, arg1) {\n\t\t\tvar type = typeof arg0,\n\t\t\t\treading = this.__read,\n\t\t\t\tread = 0;\n\t\t\tif (type === 'number') {\n\t\t\t\tvar hasHeight = typeof arg1 === 'number';\n\t\t\t\tthis._set(arg0, hasHeight ? arg1 : arg0);\n\t\t\t\tif (reading)\n\t\t\t\t\tread = hasHeight ? 2 : 1;\n\t\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\t\tthis._set(0, 0);\n\t\t\t\tif (reading)\n\t\t\t\t\tread = arg0 === null ? 1 : 0;\n\t\t\t} else {\n\t\t\t\tvar obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;\n\t\t\t\tread = 1;\n\t\t\t\tif (Array.isArray(obj)) {\n\t\t\t\t\tthis._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));\n\t\t\t\t} else if ('width' in obj) {\n\t\t\t\t\tthis._set(obj.width || 0, obj.height || 0);\n\t\t\t\t} else if ('x' in obj) {\n\t\t\t\t\tthis._set(obj.x || 0, obj.y || 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis._set(0, 0);\n\t\t\t\t\tread = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (reading)\n\t\t\t\tthis.__read = read;\n\t\t\treturn this;\n\t\t},\n\t\n\t\tset: '#initialize',\n\t\n\t\t_set: function(width, height) {\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\treturn this;\n\t\t},\n\t\n\t\tequals: function(size) {\n\t\t\treturn size === this || size && (this.width === size.width\n\t\t\t\t\t&& this.height === size.height\n\t\t\t\t\t|| Array.isArray(size) && this.width === size[0]\n\t\t\t\t\t\t&& this.height === size[1]) || false;\n\t\t},\n\t\n\t\tclone: function() {\n\t\t\treturn new Size(this.width, this.height);\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\tvar f = Formatter.instance;\n\t\t\treturn '{ width: ' + f.number(this.width)\n\t\t\t\t\t+ ', height: ' + f.number(this.height) + ' }';\n\t\t},\n\t\n\t\t_serialize: function(options) {\n\t\t\tvar f = options.formatter;\n\t\t\treturn [f.number(this.width),\n\t\t\t\t\tf.number(this.height)];\n\t\t},\n\t\n\t\tadd: function() {\n\t\t\tvar size = Size.read(arguments);\n\t\t\treturn new Size(this.width + size.width, this.height + size.height);\n\t\t},\n\t\n\t\tsubtract: function() {\n\t\t\tvar size = Size.read(arguments);\n\t\t\treturn new Size(this.width - size.width, this.height - size.height);\n\t\t},\n\t\n\t\tmultiply: function() {\n\t\t\tvar size = Size.read(arguments);\n\t\t\treturn new Size(this.width * size.width, this.height * size.height);\n\t\t},\n\t\n\t\tdivide: function() {\n\t\t\tvar size = Size.read(arguments);\n\t\t\treturn new Size(this.width / size.width, this.height / size.height);\n\t\t},\n\t\n\t\tmodulo: function() {\n\t\t\tvar size = Size.read(arguments);\n\t\t\treturn new Size(this.width % size.width, this.height % size.height);\n\t\t},\n\t\n\t\tnegate: function() {\n\t\t\treturn new Size(-this.width, -this.height);\n\t\t},\n\t\n\t\tisZero: function() {\n\t\t\treturn Numerical.isZero(this.width) && Numerical.isZero(this.height);\n\t\t},\n\t\n\t\tisNaN: function() {\n\t\t\treturn isNaN(this.width) || isNaN(this.height);\n\t\t},\n\t\n\t\tstatics: {\n\t\t\tmin: function(size1, size2) {\n\t\t\t\treturn new Size(\n\t\t\t\t\tMath.min(size1.width, size2.width),\n\t\t\t\t\tMath.min(size1.height, size2.height));\n\t\t\t},\n\t\n\t\t\tmax: function(size1, size2) {\n\t\t\t\treturn new Size(\n\t\t\t\t\tMath.max(size1.width, size2.width),\n\t\t\t\t\tMath.max(size1.height, size2.height));\n\t\t\t},\n\t\n\t\t\trandom: function() {\n\t\t\t\treturn new Size(Math.random(), Math.random());\n\t\t\t}\n\t\t}\n\t}, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {\n\t\tvar op = Math[key];\n\t\tthis[key] = function() {\n\t\t\treturn new Size(op(this.width), op(this.height));\n\t\t};\n\t}, {}));\n\t\n\tvar LinkedSize = Size.extend({\n\t\tinitialize: function Size(width, height, owner, setter) {\n\t\t\tthis._width = width;\n\t\t\tthis._height = height;\n\t\t\tthis._owner = owner;\n\t\t\tthis._setter = setter;\n\t\t},\n\t\n\t\t_set: function(width, height, _dontNotify) {\n\t\t\tthis._width = width;\n\t\t\tthis._height = height;\n\t\t\tif (!_dontNotify)\n\t\t\t\tthis._owner[this._setter](this);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tgetWidth: function() {\n\t\t\treturn this._width;\n\t\t},\n\t\n\t\tsetWidth: function(width) {\n\t\t\tthis._width = width;\n\t\t\tthis._owner[this._setter](this);\n\t\t},\n\t\n\t\tgetHeight: function() {\n\t\t\treturn this._height;\n\t\t},\n\t\n\t\tsetHeight: function(height) {\n\t\t\tthis._height = height;\n\t\t\tthis._owner[this._setter](this);\n\t\t}\n\t});\n\t\n\tvar Rectangle = Base.extend({\n\t\t_class: 'Rectangle',\n\t\t_readIndex: true,\n\t\tbeans: true,\n\t\n\t\tinitialize: function Rectangle(arg0, arg1, arg2, arg3) {\n\t\t\tvar type = typeof arg0,\n\t\t\t\tread;\n\t\t\tif (type === 'number') {\n\t\t\t\tthis._set(arg0, arg1, arg2, arg3);\n\t\t\t\tread = 4;\n\t\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\t\tthis._set(0, 0, 0, 0);\n\t\t\t\tread = arg0 === null ? 1 : 0;\n\t\t\t} else if (arguments.length === 1) {\n\t\t\t\tif (Array.isArray(arg0)) {\n\t\t\t\t\tthis._set.apply(this, arg0);\n\t\t\t\t\tread = 1;\n\t\t\t\t} else if (arg0.x !== undefined || arg0.width !== undefined) {\n\t\t\t\t\tthis._set(arg0.x || 0, arg0.y || 0,\n\t\t\t\t\t\t\targ0.width || 0, arg0.height || 0);\n\t\t\t\t\tread = 1;\n\t\t\t\t} else if (arg0.from === undefined && arg0.to === undefined) {\n\t\t\t\t\tthis._set(0, 0, 0, 0);\n\t\t\t\t\tBase.filter(this, arg0);\n\t\t\t\t\tread = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (read === undefined) {\n\t\t\t\tvar frm = Point.readNamed(arguments, 'from'),\n\t\t\t\t\tnext = Base.peek(arguments),\n\t\t\t\t\tx = frm.x,\n\t\t\t\t\ty = frm.y,\n\t\t\t\t\twidth,\n\t\t\t\t\theight;\n\t\t\t\tif (next && next.x !== undefined\n\t\t\t\t\t\t|| Base.hasNamed(arguments, 'to')) {\n\t\t\t\t\tvar to = Point.readNamed(arguments, 'to');\n\t\t\t\t\twidth = to.x - x;\n\t\t\t\t\theight = to.y - y;\n\t\t\t\t\tif (width < 0) {\n\t\t\t\t\t\tx = to.x;\n\t\t\t\t\t\twidth = -width;\n\t\t\t\t\t}\n\t\t\t\t\tif (height < 0) {\n\t\t\t\t\t\ty = to.y;\n\t\t\t\t\t\theight = -height;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar size = Size.read(arguments);\n\t\t\t\t\twidth = size.width;\n\t\t\t\t\theight = size.height;\n\t\t\t\t}\n\t\t\t\tthis._set(x, y, width, height);\n\t\t\t\tread = arguments.__index;\n\t\t\t}\n\t\t\tif (this.__read)\n\t\t\t\tthis.__read = read;\n\t\t\treturn this;\n\t\t},\n\t\n\t\tset: '#initialize',\n\t\n\t\t_set: function(x, y, width, height) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\treturn this;\n\t\t},\n\t\n\t\tclone: function() {\n\t\t\treturn new Rectangle(this.x, this.y, this.width, this.height);\n\t\t},\n\t\n\t\tequals: function(rect) {\n\t\t\tvar rt = Base.isPlainValue(rect)\n\t\t\t\t\t? Rectangle.read(arguments)\n\t\t\t\t\t: rect;\n\t\t\treturn rt === this\n\t\t\t\t\t|| rt && this.x === rt.x && this.y === rt.y\n\t\t\t\t\t\t&& this.width === rt.width && this.height === rt.height\n\t\t\t\t\t|| false;\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\tvar f = Formatter.instance;\n\t\t\treturn '{ x: ' + f.number(this.x)\n\t\t\t\t\t+ ', y: ' + f.number(this.y)\n\t\t\t\t\t+ ', width: ' + f.number(this.width)\n\t\t\t\t\t+ ', height: ' + f.number(this.height)\n\t\t\t\t\t+ ' }';\n\t\t},\n\t\n\t\t_serialize: function(options) {\n\t\t\tvar f = options.formatter;\n\t\t\treturn [f.number(this.x),\n\t\t\t\t\tf.number(this.y),\n\t\t\t\t\tf.number(this.width),\n\t\t\t\t\tf.number(this.height)];\n\t\t},\n\t\n\t\tgetPoint: function(_dontLink) {\n\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\t\treturn new ctor(this.x, this.y, this, 'setPoint');\n\t\t},\n\t\n\t\tsetPoint: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\tthis.x = point.x;\n\t\t\tthis.y = point.y;\n\t\t},\n\t\n\t\tgetSize: function(_dontLink) {\n\t\t\tvar ctor = _dontLink ? Size : LinkedSize;\n\t\t\treturn new ctor(this.width, this.height, this, 'setSize');\n\t\t},\n\t\n\t\tsetSize: function() {\n\t\t\tvar size = Size.read(arguments);\n\t\t\tif (this._fixX)\n\t\t\t\tthis.x += (this.width - size.width) * this._fixX;\n\t\t\tif (this._fixY)\n\t\t\t\tthis.y += (this.height - size.height) * this._fixY;\n\t\t\tthis.width = size.width;\n\t\t\tthis.height = size.height;\n\t\t\tthis._fixW = 1;\n\t\t\tthis._fixH = 1;\n\t\t},\n\t\n\t\tgetLeft: function() {\n\t\t\treturn this.x;\n\t\t},\n\t\n\t\tsetLeft: function(left) {\n\t\t\tif (!this._fixW)\n\t\t\t\tthis.width -= left - this.x;\n\t\t\tthis.x = left;\n\t\t\tthis._fixX = 0;\n\t\t},\n\t\n\t\tgetTop: function() {\n\t\t\treturn this.y;\n\t\t},\n\t\n\t\tsetTop: function(top) {\n\t\t\tif (!this._fixH)\n\t\t\t\tthis.height -= top - this.y;\n\t\t\tthis.y = top;\n\t\t\tthis._fixY = 0;\n\t\t},\n\t\n\t\tgetRight: function() {\n\t\t\treturn this.x + this.width;\n\t\t},\n\t\n\t\tsetRight: function(right) {\n\t\t\tif (this._fixX !== undefined && this._fixX !== 1)\n\t\t\t\tthis._fixW = 0;\n\t\t\tif (this._fixW)\n\t\t\t\tthis.x = right - this.width;\n\t\t\telse\n\t\t\t\tthis.width = right - this.x;\n\t\t\tthis._fixX = 1;\n\t\t},\n\t\n\t\tgetBottom: function() {\n\t\t\treturn this.y + this.height;\n\t\t},\n\t\n\t\tsetBottom: function(bottom) {\n\t\t\tif (this._fixY !== undefined && this._fixY !== 1)\n\t\t\t\tthis._fixH = 0;\n\t\t\tif (this._fixH)\n\t\t\t\tthis.y = bottom - this.height;\n\t\t\telse\n\t\t\t\tthis.height = bottom - this.y;\n\t\t\tthis._fixY = 1;\n\t\t},\n\t\n\t\tgetCenterX: function() {\n\t\t\treturn this.x + this.width * 0.5;\n\t\t},\n\t\n\t\tsetCenterX: function(x) {\n\t\t\tthis.x = x - this.width * 0.5;\n\t\t\tthis._fixX = 0.5;\n\t\t},\n\t\n\t\tgetCenterY: function() {\n\t\t\treturn this.y + this.height * 0.5;\n\t\t},\n\t\n\t\tsetCenterY: function(y) {\n\t\t\tthis.y = y - this.height * 0.5;\n\t\t\tthis._fixY = 0.5;\n\t\t},\n\t\n\t\tgetCenter: function(_dontLink) {\n\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\t\treturn new ctor(this.getCenterX(), this.getCenterY(), this, 'setCenter');\n\t\t},\n\t\n\t\tsetCenter: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\tthis.setCenterX(point.x);\n\t\t\tthis.setCenterY(point.y);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tgetArea: function() {\n\t\t\treturn this.width * this.height;\n\t\t},\n\t\n\t\tisEmpty: function() {\n\t\t\treturn this.width === 0 || this.height === 0;\n\t\t},\n\t\n\t\tcontains: function(arg) {\n\t\t\treturn arg && arg.width !== undefined\n\t\t\t\t\t|| (Array.isArray(arg) ? arg : arguments).length === 4\n\t\t\t\t\t? this._containsRectangle(Rectangle.read(arguments))\n\t\t\t\t\t: this._containsPoint(Point.read(arguments));\n\t\t},\n\t\n\t\t_containsPoint: function(point) {\n\t\t\tvar x = point.x,\n\t\t\t\ty = point.y;\n\t\t\treturn x >= this.x && y >= this.y\n\t\t\t\t\t&& x <= this.x + this.width\n\t\t\t\t\t&& y <= this.y + this.height;\n\t\t},\n\t\n\t\t_containsRectangle: function(rect) {\n\t\t\tvar x = rect.x,\n\t\t\t\ty = rect.y;\n\t\t\treturn x >= this.x && y >= this.y\n\t\t\t\t\t&& x + rect.width <= this.x + this.width\n\t\t\t\t\t&& y + rect.height <= this.y + this.height;\n\t\t},\n\t\n\t\tintersects: function() {\n\t\t\tvar rect = Rectangle.read(arguments);\n\t\t\treturn rect.x + rect.width > this.x\n\t\t\t\t\t&& rect.y + rect.height > this.y\n\t\t\t\t\t&& rect.x < this.x + this.width\n\t\t\t\t\t&& rect.y < this.y + this.height;\n\t\t},\n\t\n\t\ttouches: function() {\n\t\t\tvar rect = Rectangle.read(arguments);\n\t\t\treturn rect.x + rect.width >= this.x\n\t\t\t\t\t&& rect.y + rect.height >= this.y\n\t\t\t\t\t&& rect.x <= this.x + this.width\n\t\t\t\t\t&& rect.y <= this.y + this.height;\n\t\t},\n\t\n\t\tintersect: function() {\n\t\t\tvar rect = Rectangle.read(arguments),\n\t\t\t\tx1 = Math.max(this.x, rect.x),\n\t\t\t\ty1 = Math.max(this.y, rect.y),\n\t\t\t\tx2 = Math.min(this.x + this.width, rect.x + rect.width),\n\t\t\t\ty2 = Math.min(this.y + this.height, rect.y + rect.height);\n\t\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t\t},\n\t\n\t\tunite: function() {\n\t\t\tvar rect = Rectangle.read(arguments),\n\t\t\t\tx1 = Math.min(this.x, rect.x),\n\t\t\t\ty1 = Math.min(this.y, rect.y),\n\t\t\t\tx2 = Math.max(this.x + this.width, rect.x + rect.width),\n\t\t\t\ty2 = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t\t},\n\t\n\t\tinclude: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\tvar x1 = Math.min(this.x, point.x),\n\t\t\t\ty1 = Math.min(this.y, point.y),\n\t\t\t\tx2 = Math.max(this.x + this.width, point.x),\n\t\t\t\ty2 = Math.max(this.y + this.height, point.y);\n\t\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t\t},\n\t\n\t\texpand: function() {\n\t\t\tvar amount = Size.read(arguments),\n\t\t\t\thor = amount.width,\n\t\t\t\tver = amount.height;\n\t\t\treturn new Rectangle(this.x - hor / 2, this.y - ver / 2,\n\t\t\t\t\tthis.width + hor, this.height + ver);\n\t\t},\n\t\n\t\tscale: function(hor, ver) {\n\t\t\treturn this.expand(this.width * hor - this.width,\n\t\t\t\t\tthis.height * (ver === undefined ? hor : ver) - this.height);\n\t\t}\n\t}, Base.each([\n\t\t\t['Top', 'Left'], ['Top', 'Right'],\n\t\t\t['Bottom', 'Left'], ['Bottom', 'Right'],\n\t\t\t['Left', 'Center'], ['Top', 'Center'],\n\t\t\t['Right', 'Center'], ['Bottom', 'Center']\n\t\t],\n\t\tfunction(parts, index) {\n\t\t\tvar part = parts.join(''),\n\t\t\t\txFirst = /^[RL]/.test(part);\n\t\t\tif (index >= 4)\n\t\t\t\tparts[1] += xFirst ? 'Y' : 'X';\n\t\t\tvar x = parts[xFirst ? 0 : 1],\n\t\t\t\ty = parts[xFirst ? 1 : 0],\n\t\t\t\tgetX = 'get' + x,\n\t\t\t\tgetY = 'get' + y,\n\t\t\t\tsetX = 'set' + x,\n\t\t\t\tsetY = 'set' + y,\n\t\t\t\tget = 'get' + part,\n\t\t\t\tset = 'set' + part;\n\t\t\tthis[get] = function(_dontLink) {\n\t\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\t\t\treturn new ctor(this[getX](), this[getY](), this, set);\n\t\t\t};\n\t\t\tthis[set] = function() {\n\t\t\t\tvar point = Point.read(arguments);\n\t\t\t\tthis[setX](point.x);\n\t\t\t\tthis[setY](point.y);\n\t\t\t};\n\t\t}, {\n\t\t\tbeans: true\n\t\t}\n\t));\n\t\n\tvar LinkedRectangle = Rectangle.extend({\n\t\tinitialize: function Rectangle(x, y, width, height, owner, setter) {\n\t\t\tthis._set(x, y, width, height, true);\n\t\t\tthis._owner = owner;\n\t\t\tthis._setter = setter;\n\t\t},\n\t\n\t\t_set: function(x, y, width, height, _dontNotify) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._width = width;\n\t\t\tthis._height = height;\n\t\t\tif (!_dontNotify)\n\t\t\t\tthis._owner[this._setter](this);\n\t\t\treturn this;\n\t\t}\n\t},\n\tnew function() {\n\t\tvar proto = Rectangle.prototype;\n\t\n\t\treturn Base.each(['x', 'y', 'width', 'height'], function(key) {\n\t\t\tvar part = Base.capitalize(key),\n\t\t\t\tinternal = '_' + key;\n\t\t\tthis['get' + part] = function() {\n\t\t\t\treturn this[internal];\n\t\t\t};\n\t\n\t\t\tthis['set' + part] = function(value) {\n\t\t\t\tthis[internal] = value;\n\t\t\t\tif (!this._dontNotify)\n\t\t\t\t\tthis._owner[this._setter](this);\n\t\t\t};\n\t\t}, Base.each(['Point', 'Size', 'Center',\n\t\t\t\t'Left', 'Top', 'Right', 'Bottom', 'CenterX', 'CenterY',\n\t\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',\n\t\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'],\n\t\t\tfunction(key) {\n\t\t\t\tvar name = 'set' + key;\n\t\t\t\tthis[name] = function() {\n\t\t\t\t\tthis._dontNotify = true;\n\t\t\t\t\tproto[name].apply(this, arguments);\n\t\t\t\t\tthis._dontNotify = false;\n\t\t\t\t\tthis._owner[this._setter](this);\n\t\t\t\t};\n\t\t\t}, {\n\t\t\t\tisSelected: function() {\n\t\t\t\t\treturn !!(this._owner._selection & 2);\n\t\t\t\t},\n\t\n\t\t\t\tsetSelected: function(selected) {\n\t\t\t\t\tvar owner = this._owner;\n\t\t\t\t\tif (owner.changeSelection) {\n\t\t\t\t\t\towner.changeSelection(2, selected);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t});\n\t\n\tvar Matrix = Base.extend({\n\t\t_class: 'Matrix',\n\t\n\t\tinitialize: function Matrix(arg) {\n\t\t\tvar count = arguments.length,\n\t\t\t\tok = true;\n\t\t\tif (count === 6) {\n\t\t\t\tthis._set.apply(this, arguments);\n\t\t\t} else if (count === 1) {\n\t\t\t\tif (arg instanceof Matrix) {\n\t\t\t\t\tthis._set(arg._a, arg._b, arg._c, arg._d, arg._tx, arg._ty);\n\t\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\t\tthis._set.apply(this, arg);\n\t\t\t\t} else {\n\t\t\t\t\tok = false;\n\t\t\t\t}\n\t\t\t} else if (!count) {\n\t\t\t\tthis.reset();\n\t\t\t} else {\n\t\t\t\tok = false;\n\t\t\t}\n\t\t\tif (!ok) {\n\t\t\t\tthrow new Error('Unsupported matrix parameters');\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\tset: '#initialize',\n\t\n\t\t_set: function(a, b, c, d, tx, ty, _dontNotify) {\n\t\t\tthis._a = a;\n\t\t\tthis._b = b;\n\t\t\tthis._c = c;\n\t\t\tthis._d = d;\n\t\t\tthis._tx = tx;\n\t\t\tthis._ty = ty;\n\t\t\tif (!_dontNotify)\n\t\t\t\tthis._changed();\n\t\t\treturn this;\n\t\t},\n\t\n\t\t_serialize: function(options, dictionary) {\n\t\t\treturn Base.serialize(this.getValues(), options, true, dictionary);\n\t\t},\n\t\n\t\t_changed: function() {\n\t\t\tvar owner = this._owner;\n\t\t\tif (owner) {\n\t\t\t\tif (owner._applyMatrix) {\n\t\t\t\t\towner.transform(null, true);\n\t\t\t\t} else {\n\t\t\t\t\towner._changed(9);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tclone: function() {\n\t\t\treturn new Matrix(this._a, this._b, this._c, this._d,\n\t\t\t\t\tthis._tx, this._ty);\n\t\t},\n\t\n\t\tequals: function(mx) {\n\t\t\treturn mx === this || mx && this._a === mx._a && this._b === mx._b\n\t\t\t\t\t&& this._c === mx._c && this._d === mx._d\n\t\t\t\t\t&& this._tx === mx._tx && this._ty === mx._ty;\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\tvar f = Formatter.instance;\n\t\t\treturn '[[' + [f.number(this._a), f.number(this._c),\n\t\t\t\t\t\tf.number(this._tx)].join(', ') + '], ['\n\t\t\t\t\t+ [f.number(this._b), f.number(this._d),\n\t\t\t\t\t\tf.number(this._ty)].join(', ') + ']]';\n\t\t},\n\t\n\t\treset: function(_dontNotify) {\n\t\t\tthis._a = this._d = 1;\n\t\t\tthis._b = this._c = this._tx = this._ty = 0;\n\t\t\tif (!_dontNotify)\n\t\t\t\tthis._changed();\n\t\t\treturn this;\n\t\t},\n\t\n\t\tapply: function(recursively, _setApplyMatrix) {\n\t\t\tvar owner = this._owner;\n\t\t\tif (owner) {\n\t\t\t\towner.transform(null, true, Base.pick(recursively, true),\n\t\t\t\t\t\t_setApplyMatrix);\n\t\t\t\treturn this.isIdentity();\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\n\t\ttranslate: function() {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tx = point.x,\n\t\t\t\ty = point.y;\n\t\t\tthis._tx += x * this._a + y * this._c;\n\t\t\tthis._ty += x * this._b + y * this._d;\n\t\t\tthis._changed();\n\t\t\treturn this;\n\t\t},\n\t\n\t\tscale: function() {\n\t\t\tvar scale = Point.read(arguments),\n\t\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\t\tif (center)\n\t\t\t\tthis.translate(center);\n\t\t\tthis._a *= scale.x;\n\t\t\tthis._b *= scale.x;\n\t\t\tthis._c *= scale.y;\n\t\t\tthis._d *= scale.y;\n\t\t\tif (center)\n\t\t\t\tthis.translate(center.negate());\n\t\t\tthis._changed();\n\t\t\treturn this;\n\t\t},\n\t\n\t\trotate: function(angle ) {\n\t\t\tangle *= Math.PI / 180;\n\t\t\tvar center = Point.read(arguments, 1),\n\t\t\t\tx = center.x,\n\t\t\t\ty = center.y,\n\t\t\t\tcos = Math.cos(angle),\n\t\t\t\tsin = Math.sin(angle),\n\t\t\t\ttx = x - x * cos + y * sin,\n\t\t\t\tty = y - x * sin - y * cos,\n\t\t\t\ta = this._a,\n\t\t\t\tb = this._b,\n\t\t\t\tc = this._c,\n\t\t\t\td = this._d;\n\t\t\tthis._a = cos * a + sin * c;\n\t\t\tthis._b = cos * b + sin * d;\n\t\t\tthis._c = -sin * a + cos * c;\n\t\t\tthis._d = -sin * b + cos * d;\n\t\t\tthis._tx += tx * a + ty * c;\n\t\t\tthis._ty += tx * b + ty * d;\n\t\t\tthis._changed();\n\t\t\treturn this;\n\t\t},\n\t\n\t\tshear: function() {\n\t\t\tvar shear = Point.read(arguments),\n\t\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\t\tif (center)\n\t\t\t\tthis.translate(center);\n\t\t\tvar a = this._a,\n\t\t\t\tb = this._b;\n\t\t\tthis._a += shear.y * this._c;\n\t\t\tthis._b += shear.y * this._d;\n\t\t\tthis._c += shear.x * a;\n\t\t\tthis._d += shear.x * b;\n\t\t\tif (center)\n\t\t\t\tthis.translate(center.negate());\n\t\t\tthis._changed();\n\t\t\treturn this;\n\t\t},\n\t\n\t\tskew: function() {\n\t\t\tvar skew = Point.read(arguments),\n\t\t\t\tcenter = Point.read(arguments, 0, { readNull: true }),\n\t\t\t\ttoRadians = Math.PI / 180,\n\t\t\t\tshear = new Point(Math.tan(skew.x * toRadians),\n\t\t\t\t\tMath.tan(skew.y * toRadians));\n\t\t\treturn this.shear(shear, center);\n\t\t},\n\t\n\t\tappend: function(mx) {\n\t\t\tif (mx) {\n\t\t\t\tvar a1 = this._a,\n\t\t\t\t\tb1 = this._b,\n\t\t\t\t\tc1 = this._c,\n\t\t\t\t\td1 = this._d,\n\t\t\t\t\ta2 = mx._a,\n\t\t\t\t\tb2 = mx._c,\n\t\t\t\t\tc2 = mx._b,\n\t\t\t\t\td2 = mx._d,\n\t\t\t\t\ttx2 = mx._tx,\n\t\t\t\t\tty2 = mx._ty;\n\t\t\t\tthis._a = a2 * a1 + c2 * c1;\n\t\t\t\tthis._c = b2 * a1 + d2 * c1;\n\t\t\t\tthis._b = a2 * b1 + c2 * d1;\n\t\t\t\tthis._d = b2 * b1 + d2 * d1;\n\t\t\t\tthis._tx += tx2 * a1 + ty2 * c1;\n\t\t\t\tthis._ty += tx2 * b1 + ty2 * d1;\n\t\t\t\tthis._changed();\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\tprepend: function(mx) {\n\t\t\tif (mx) {\n\t\t\t\tvar a1 = this._a,\n\t\t\t\t\tb1 = this._b,\n\t\t\t\t\tc1 = this._c,\n\t\t\t\t\td1 = this._d,\n\t\t\t\t\ttx1 = this._tx,\n\t\t\t\t\tty1 = this._ty,\n\t\t\t\t\ta2 = mx._a,\n\t\t\t\t\tb2 = mx._c,\n\t\t\t\t\tc2 = mx._b,\n\t\t\t\t\td2 = mx._d,\n\t\t\t\t\ttx2 = mx._tx,\n\t\t\t\t\tty2 = mx._ty;\n\t\t\t\tthis._a = a2 * a1 + b2 * b1;\n\t\t\t\tthis._c = a2 * c1 + b2 * d1;\n\t\t\t\tthis._b = c2 * a1 + d2 * b1;\n\t\t\t\tthis._d = c2 * c1 + d2 * d1;\n\t\t\t\tthis._tx = a2 * tx1 + b2 * ty1 + tx2;\n\t\t\t\tthis._ty = c2 * tx1 + d2 * ty1 + ty2;\n\t\t\t\tthis._changed();\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\tappended: function(mx) {\n\t\t\treturn this.clone().append(mx);\n\t\t},\n\t\n\t\tprepended: function(mx) {\n\t\t\treturn this.clone().prepend(mx);\n\t\t},\n\t\n\t\tinvert: function() {\n\t\t\tvar a = this._a,\n\t\t\t\tb = this._b,\n\t\t\t\tc = this._c,\n\t\t\t\td = this._d,\n\t\t\t\ttx = this._tx,\n\t\t\t\tty = this._ty,\n\t\t\t\tdet = a * d - b * c,\n\t\t\t\tres = null;\n\t\t\tif (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {\n\t\t\t\tthis._a = d / det;\n\t\t\t\tthis._b = -b / det;\n\t\t\t\tthis._c = -c / det;\n\t\t\t\tthis._d = a / det;\n\t\t\t\tthis._tx = (c * ty - d * tx) / det;\n\t\t\t\tthis._ty = (b * tx - a * ty) / det;\n\t\t\t\tres = this;\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\n\t\tinverted: function() {\n\t\t\treturn this.clone().invert();\n\t\t},\n\t\n\t\tconcatenate: '#append',\n\t\tpreConcatenate: '#prepend',\n\t\tchain: '#appended',\n\t\n\t\t_shiftless: function() {\n\t\t\treturn new Matrix(this._a, this._b, this._c, this._d, 0, 0);\n\t\t},\n\t\n\t\t_orNullIfIdentity: function() {\n\t\t\treturn this.isIdentity() ? null : this;\n\t\t},\n\t\n\t\tisIdentity: function() {\n\t\t\treturn this._a === 1 && this._b === 0 && this._c === 0 && this._d === 1\n\t\t\t\t\t&& this._tx === 0 && this._ty === 0;\n\t\t},\n\t\n\t\tisInvertible: function() {\n\t\t\tvar det = this._a * this._d - this._c * this._b;\n\t\t\treturn det && !isNaN(det) && isFinite(this._tx) && isFinite(this._ty);\n\t\t},\n\t\n\t\tisSingular: function() {\n\t\t\treturn !this.isInvertible();\n\t\t},\n\t\n\t\ttransform: function( src, dst, count) {\n\t\t\treturn arguments.length < 3\n\t\t\t\t? this._transformPoint(Point.read(arguments))\n\t\t\t\t: this._transformCoordinates(src, dst, count);\n\t\t},\n\t\n\t\t_transformPoint: function(point, dest, _dontNotify) {\n\t\t\tvar x = point.x,\n\t\t\t\ty = point.y;\n\t\t\tif (!dest)\n\t\t\t\tdest = new Point();\n\t\t\treturn dest._set(\n\t\t\t\t\tx * this._a + y * this._c + this._tx,\n\t\t\t\t\tx * this._b + y * this._d + this._ty,\n\t\t\t\t\t_dontNotify);\n\t\t},\n\t\n\t\t_transformCoordinates: function(src, dst, count) {\n\t\t\tfor (var i = 0, max = 2 * count; i < max; i += 2) {\n\t\t\t\tvar x = src[i],\n\t\t\t\t\ty = src[i + 1];\n\t\t\t\tdst[i] = x * this._a + y * this._c + this._tx;\n\t\t\t\tdst[i + 1] = x * this._b + y * this._d + this._ty;\n\t\t\t}\n\t\t\treturn dst;\n\t\t},\n\t\n\t\t_transformCorners: function(rect) {\n\t\t\tvar x1 = rect.x,\n\t\t\t\ty1 = rect.y,\n\t\t\t\tx2 = x1 + rect.width,\n\t\t\t\ty2 = y1 + rect.height,\n\t\t\t\tcoords = [ x1, y1, x2, y1, x2, y2, x1, y2 ];\n\t\t\treturn this._transformCoordinates(coords, coords, 4);\n\t\t},\n\t\n\t\t_transformBounds: function(bounds, dest, _dontNotify) {\n\t\t\tvar coords = this._transformCorners(bounds),\n\t\t\t\tmin = coords.slice(0, 2),\n\t\t\t\tmax = min.slice();\n\t\t\tfor (var i = 2; i < 8; i++) {\n\t\t\t\tvar val = coords[i],\n\t\t\t\t\tj = i & 1;\n\t\t\t\tif (val < min[j]) {\n\t\t\t\t\tmin[j] = val;\n\t\t\t\t} else if (val > max[j]) {\n\t\t\t\t\tmax[j] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!dest)\n\t\t\t\tdest = new Rectangle();\n\t\t\treturn dest._set(min[0], min[1], max[0] - min[0], max[1] - min[1],\n\t\t\t\t\t_dontNotify);\n\t\t},\n\t\n\t\tinverseTransform: function() {\n\t\t\treturn this._inverseTransform(Point.read(arguments));\n\t\t},\n\t\n\t\t_inverseTransform: function(point, dest, _dontNotify) {\n\t\t\tvar a = this._a,\n\t\t\t\tb = this._b,\n\t\t\t\tc = this._c,\n\t\t\t\td = this._d,\n\t\t\t\ttx = this._tx,\n\t\t\t\tty = this._ty,\n\t\t\t\tdet = a * d - b * c,\n\t\t\t\tres = null;\n\t\t\tif (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {\n\t\t\t\tvar x = point.x - this._tx,\n\t\t\t\t\ty = point.y - this._ty;\n\t\t\t\tif (!dest)\n\t\t\t\t\tdest = new Point();\n\t\t\t\tres = dest._set(\n\t\t\t\t\t\t(x * d - y * c) / det,\n\t\t\t\t\t\t(y * a - x * b) / det,\n\t\t\t\t\t\t_dontNotify);\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\n\t\tdecompose: function() {\n\t\t\tvar a = this._a,\n\t\t\t\tb = this._b,\n\t\t\t\tc = this._c,\n\t\t\t\td = this._d,\n\t\t\t\tdet = a * d - b * c,\n\t\t\t\tsqrt = Math.sqrt,\n\t\t\t\tatan2 = Math.atan2,\n\t\t\t\tdegrees = 180 / Math.PI,\n\t\t\t\trotate,\n\t\t\t\tscale,\n\t\t\t\tskew;\n\t\t\tif (a !== 0 || b !== 0) {\n\t\t\t\tvar r = sqrt(a * a + b * b);\n\t\t\t\trotate = Math.acos(a / r) * (b > 0 ? 1 : -1);\n\t\t\t\tscale = [r, det / r];\n\t\t\t\tskew = [atan2(a * c + b * d, r * r), 0];\n\t\t\t} else if (c !== 0 || d !== 0) {\n\t\t\t\tvar s = sqrt(c * c + d * d);\n\t\t\t\trotate = Math.asin(c / s)  * (d > 0 ? 1 : -1);\n\t\t\t\tscale = [det / s, s];\n\t\t\t\tskew = [0, atan2(a * c + b * d, s * s)];\n\t\t\t} else {\n\t\t\t\trotate = 0;\n\t\t\t\tskew = scale = [0, 0];\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttranslation: this.getTranslation(),\n\t\t\t\trotation: rotate * degrees,\n\t\t\t\tscaling: new Point(scale),\n\t\t\t\tskewing: new Point(skew[0] * degrees, skew[1] * degrees)\n\t\t\t};\n\t\t},\n\t\n\t\tgetValues: function() {\n\t\t\treturn [ this._a, this._b, this._c, this._d, this._tx, this._ty ];\n\t\t},\n\t\n\t\tgetTranslation: function() {\n\t\t\treturn new Point(this._tx, this._ty);\n\t\t},\n\t\n\t\tgetScaling: function() {\n\t\t\treturn (this.decompose() || {}).scaling;\n\t\t},\n\t\n\t\tgetRotation: function() {\n\t\t\treturn (this.decompose() || {}).rotation;\n\t\t},\n\t\n\t\tapplyToContext: function(ctx) {\n\t\t\tif (!this.isIdentity()) {\n\t\t\t\tctx.transform(this._a, this._b, this._c, this._d,\n\t\t\t\t\t\tthis._tx, this._ty);\n\t\t\t}\n\t\t}\n\t}, Base.each(['a', 'b', 'c', 'd', 'tx', 'ty'], function(key) {\n\t\tvar part = Base.capitalize(key),\n\t\t\tprop = '_' + key;\n\t\tthis['get' + part] = function() {\n\t\t\treturn this[prop];\n\t\t};\n\t\tthis['set' + part] = function(value) {\n\t\t\tthis[prop] = value;\n\t\t\tthis._changed();\n\t\t};\n\t}, {}));\n\t\n\tvar Line = Base.extend({\n\t\t_class: 'Line',\n\t\n\t\tinitialize: function Line(arg0, arg1, arg2, arg3, arg4) {\n\t\t\tvar asVector = false;\n\t\t\tif (arguments.length >= 4) {\n\t\t\t\tthis._px = arg0;\n\t\t\t\tthis._py = arg1;\n\t\t\t\tthis._vx = arg2;\n\t\t\t\tthis._vy = arg3;\n\t\t\t\tasVector = arg4;\n\t\t\t} else {\n\t\t\t\tthis._px = arg0.x;\n\t\t\t\tthis._py = arg0.y;\n\t\t\t\tthis._vx = arg1.x;\n\t\t\t\tthis._vy = arg1.y;\n\t\t\t\tasVector = arg2;\n\t\t\t}\n\t\t\tif (!asVector) {\n\t\t\t\tthis._vx -= this._px;\n\t\t\t\tthis._vy -= this._py;\n\t\t\t}\n\t\t},\n\t\n\t\tgetPoint: function() {\n\t\t\treturn new Point(this._px, this._py);\n\t\t},\n\t\n\t\tgetVector: function() {\n\t\t\treturn new Point(this._vx, this._vy);\n\t\t},\n\t\n\t\tgetLength: function() {\n\t\t\treturn this.getVector().getLength();\n\t\t},\n\t\n\t\tintersect: function(line, isInfinite) {\n\t\t\treturn Line.intersect(\n\t\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\t\tline._px, line._py, line._vx, line._vy,\n\t\t\t\t\ttrue, isInfinite);\n\t\t},\n\t\n\t\tgetSide: function(point, isInfinite) {\n\t\t\treturn Line.getSide(\n\t\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\t\tpoint.x, point.y, true, isInfinite);\n\t\t},\n\t\n\t\tgetDistance: function(point) {\n\t\t\treturn Math.abs(Line.getSignedDistance(\n\t\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\t\tpoint.x, point.y, true));\n\t\t},\n\t\n\t\tisCollinear: function(line) {\n\t\t\treturn Point.isCollinear(this._vx, this._vy, line._vx, line._vy);\n\t\t},\n\t\n\t\tisOrthogonal: function(line) {\n\t\t\treturn Point.isOrthogonal(this._vx, this._vy, line._vx, line._vy);\n\t\t},\n\t\n\t\tstatics: {\n\t\t\tintersect: function(p1x, p1y, v1x, v1y, p2x, p2y, v2x, v2y, asVector,\n\t\t\t\t\tisInfinite) {\n\t\t\t\tif (!asVector) {\n\t\t\t\t\tv1x -= p1x;\n\t\t\t\t\tv1y -= p1y;\n\t\t\t\t\tv2x -= p2x;\n\t\t\t\t\tv2y -= p2y;\n\t\t\t\t}\n\t\t\t\tvar cross = v1x * v2y - v1y * v2x;\n\t\t\t\tif (!Numerical.isZero(cross)) {\n\t\t\t\t\tvar dx = p1x - p2x,\n\t\t\t\t\t\tdy = p1y - p2y,\n\t\t\t\t\t\tu1 = (v2x * dy - v2y * dx) / cross,\n\t\t\t\t\t\tu2 = (v1x * dy - v1y * dx) / cross,\n\t\t\t\t\t\tepsilon = 1e-12,\n\t\t\t\t\t\tuMin = -epsilon,\n\t\t\t\t\t\tuMax = 1 + epsilon;\n\t\t\t\t\tif (isInfinite\n\t\t\t\t\t\t\t|| uMin < u1 && u1 < uMax && uMin < u2 && u2 < uMax) {\n\t\t\t\t\t\tif (!isInfinite) {\n\t\t\t\t\t\t\tu1 = u1 <= 0 ? 0 : u1 >= 1 ? 1 : u1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new Point(\n\t\t\t\t\t\t\t\tp1x + u1 * v1x,\n\t\t\t\t\t\t\t\tp1y + u1 * v1y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tgetSide: function(px, py, vx, vy, x, y, asVector, isInfinite) {\n\t\t\t\tif (!asVector) {\n\t\t\t\t\tvx -= px;\n\t\t\t\t\tvy -= py;\n\t\t\t\t}\n\t\t\t\tvar v2x = x - px,\n\t\t\t\t\tv2y = y - py,\n\t\t\t\t\tccw = v2x * vy - v2y * vx;\n\t\t\t\tif (ccw === 0 && !isInfinite) {\n\t\t\t\t\tccw = (v2x * vx + v2x * vx) / (vx * vx + vy * vy);\n\t\t\t\t\tif (ccw >= 0 && ccw <= 1)\n\t\t\t\t\t\tccw = 0;\n\t\t\t\t}\n\t\t\t\treturn ccw < 0 ? -1 : ccw > 0 ? 1 : 0;\n\t\t\t},\n\t\n\t\t\tgetSignedDistance: function(px, py, vx, vy, x, y, asVector) {\n\t\t\t\tif (!asVector) {\n\t\t\t\t\tvx -= px;\n\t\t\t\t\tvy -= py;\n\t\t\t\t}\n\t\t\t\treturn vx === 0 ? vy > 0 ? x - px : px - x\n\t\t\t\t\t : vy === 0 ? vx < 0 ? y - py : py - y\n\t\t\t\t\t : ((x-px) * vy - (y-py) * vx) / Math.sqrt(vx * vx + vy * vy);\n\t\t\t}\n\t\t}\n\t});\n\t\n\tvar Project = PaperScopeItem.extend({\n\t\t_class: 'Project',\n\t\t_list: 'projects',\n\t\t_reference: 'project',\n\t\t_compactSerialize: true,\n\t\n\t\tinitialize: function Project(element) {\n\t\t\tPaperScopeItem.call(this, true);\n\t\t\tthis._children = [];\n\t\t\tthis._namedChildren = {};\n\t\t\tthis._activeLayer = null;\n\t\t\tthis._currentStyle = new Style(null, null, this);\n\t\t\tthis._view = View.create(this,\n\t\t\t\t\telement || CanvasProvider.getCanvas(1, 1));\n\t\t\tthis._selectionItems = {};\n\t\t\tthis._selectionCount = 0;\n\t\t\tthis._updateVersion = 0;\n\t\t},\n\t\n\t\t_serialize: function(options, dictionary) {\n\t\t\treturn Base.serialize(this._children, options, true, dictionary);\n\t\t},\n\t\n\t\t_changed: function(flags, item) {\n\t\t\tif (flags & 1) {\n\t\t\t\tvar view = this._view;\n\t\t\t\tif (view) {\n\t\t\t\t\tview._needsUpdate = true;\n\t\t\t\t\tif (!view._requested && view._autoUpdate)\n\t\t\t\t\t\tview.requestUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar changes = this._changes;\n\t\t\tif (changes && item) {\n\t\t\t\tvar changesById = this._changesById,\n\t\t\t\t\tid = item._id,\n\t\t\t\t\tentry = changesById[id];\n\t\t\t\tif (entry) {\n\t\t\t\t\tentry.flags |= flags;\n\t\t\t\t} else {\n\t\t\t\t\tchanges.push(changesById[id] = { item: item, flags: flags });\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tclear: function() {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = children.length - 1; i >= 0; i--)\n\t\t\t\tchildren[i].remove();\n\t\t},\n\t\n\t\tisEmpty: function() {\n\t\t\treturn !this._children.length;\n\t\t},\n\t\n\t\tremove: function remove() {\n\t\t\tif (!remove.base.call(this))\n\t\t\t\treturn false;\n\t\t\tif (this._view)\n\t\t\t\tthis._view.remove();\n\t\t\treturn true;\n\t\t},\n\t\n\t\tgetView: function() {\n\t\t\treturn this._view;\n\t\t},\n\t\n\t\tgetCurrentStyle: function() {\n\t\t\treturn this._currentStyle;\n\t\t},\n\t\n\t\tsetCurrentStyle: function(style) {\n\t\t\tthis._currentStyle.set(style);\n\t\t},\n\t\n\t\tgetIndex: function() {\n\t\t\treturn this._index;\n\t\t},\n\t\n\t\tgetOptions: function() {\n\t\t\treturn this._scope.settings;\n\t\t},\n\t\n\t\tgetLayers: function() {\n\t\t\treturn this._children;\n\t\t},\n\t\n\t\tgetActiveLayer: function() {\n\t\t\treturn this._activeLayer || new Layer({ project: this, insert: true });\n\t\t},\n\t\n\t\tgetSymbolDefinitions: function() {\n\t\t\tvar definitions = [],\n\t\t\t\tids = {};\n\t\t\tthis.getItems({\n\t\t\t\tclass: SymbolItem,\n\t\t\t\tmatch: function(item) {\n\t\t\t\t\tvar definition = item._definition,\n\t\t\t\t\t\tid = definition._id;\n\t\t\t\t\tif (!ids[id]) {\n\t\t\t\t\t\tids[id] = true;\n\t\t\t\t\t\tdefinitions.push(definition);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn definitions;\n\t\t},\n\t\n\t\tgetSymbols: 'getSymbolDefinitions',\n\t\n\t\tgetSelectedItems: function() {\n\t\t\tvar selectionItems = this._selectionItems,\n\t\t\t\titems = [];\n\t\t\tfor (var id in selectionItems) {\n\t\t\t\tvar item = selectionItems[id],\n\t\t\t\t\tselection = item._selection;\n\t\t\t\tif (selection & 1 && item.isInserted()) {\n\t\t\t\t\titems.push(item);\n\t\t\t\t} else if (!selection) {\n\t\t\t\t\tthis._updateSelection(item);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn items;\n\t\t},\n\t\n\t\t_updateSelection: function(item) {\n\t\t\tvar id = item._id,\n\t\t\t\tselectionItems = this._selectionItems;\n\t\t\tif (item._selection) {\n\t\t\t\tif (selectionItems[id] !== item) {\n\t\t\t\t\tthis._selectionCount++;\n\t\t\t\t\tselectionItems[id] = item;\n\t\t\t\t}\n\t\t\t} else if (selectionItems[id] === item) {\n\t\t\t\tthis._selectionCount--;\n\t\t\t\tdelete selectionItems[id];\n\t\t\t}\n\t\t},\n\t\n\t\tselectAll: function() {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].setFullySelected(true);\n\t\t},\n\t\n\t\tdeselectAll: function() {\n\t\t\tvar selectionItems = this._selectionItems;\n\t\t\tfor (var i in selectionItems)\n\t\t\t\tselectionItems[i].setFullySelected(false);\n\t\t},\n\t\n\t\taddLayer: function(layer) {\n\t\t\treturn this.insertLayer(undefined, layer);\n\t\t},\n\t\n\t\tinsertLayer: function(index, layer) {\n\t\t\tif (layer instanceof Layer) {\n\t\t\t\tlayer._remove(false, true);\n\t\t\t\tBase.splice(this._children, [layer], index, 0);\n\t\t\t\tlayer._setProject(this, true);\n\t\t\t\tvar name = layer._name;\n\t\t\t\tif (name)\n\t\t\t\t\tlayer.setName(name);\n\t\t\t\tif (this._changes)\n\t\t\t\t\tlayer._changed(5);\n\t\t\t\tif (!this._activeLayer)\n\t\t\t\t\tthis._activeLayer = layer;\n\t\t\t} else {\n\t\t\t\tlayer = null;\n\t\t\t}\n\t\t\treturn layer;\n\t\t},\n\t\n\t\t_insertItem: function(index, item, _created) {\n\t\t\titem = this.insertLayer(index, item)\n\t\t\t\t\t|| (this._activeLayer || this._insertItem(undefined,\n\t\t\t\t\t\t\tnew Layer(Item.NO_INSERT), true))\n\t\t\t\t\t\t\t.insertChild(index, item);\n\t\t\tif (_created && item.activate)\n\t\t\t\titem.activate();\n\t\t\treturn item;\n\t\t},\n\t\n\t\tgetItems: function(options) {\n\t\t\treturn Item._getItems(this, options);\n\t\t},\n\t\n\t\tgetItem: function(options) {\n\t\t\treturn Item._getItems(this, options, null, null, true)[0] || null;\n\t\t},\n\t\n\t\timportJSON: function(json) {\n\t\t\tthis.activate();\n\t\t\tvar layer = this._activeLayer;\n\t\t\treturn Base.importJSON(json, layer && layer.isEmpty() && layer);\n\t\t},\n\t\n\t\tremoveOn: function(type) {\n\t\t\tvar sets = this._removeSets;\n\t\t\tif (sets) {\n\t\t\t\tif (type === 'mouseup')\n\t\t\t\t\tsets.mousedrag = null;\n\t\t\t\tvar set = sets[type];\n\t\t\t\tif (set) {\n\t\t\t\t\tfor (var id in set) {\n\t\t\t\t\t\tvar item = set[id];\n\t\t\t\t\t\tfor (var key in sets) {\n\t\t\t\t\t\t\tvar other = sets[key];\n\t\t\t\t\t\t\tif (other && other != set)\n\t\t\t\t\t\t\t\tdelete other[item._id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\titem.remove();\n\t\t\t\t\t}\n\t\t\t\t\tsets[type] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tdraw: function(ctx, matrix, pixelRatio) {\n\t\t\tthis._updateVersion++;\n\t\t\tctx.save();\n\t\t\tmatrix.applyToContext(ctx);\n\t\t\tvar children = this._children,\n\t\t\t\tparam = new Base({\n\t\t\t\t\toffset: new Point(0, 0),\n\t\t\t\t\tpixelRatio: pixelRatio,\n\t\t\t\t\tviewMatrix: matrix.isIdentity() ? null : matrix,\n\t\t\t\t\tmatrices: [new Matrix()],\n\t\t\t\t\tupdateMatrix: true\n\t\t\t\t});\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].draw(ctx, param);\n\t\t\t}\n\t\t\tctx.restore();\n\t\n\t\t\tif (this._selectionCount > 0) {\n\t\t\t\tctx.save();\n\t\t\t\tctx.strokeWidth = 1;\n\t\t\t\tvar items = this._selectionItems,\n\t\t\t\t\tsize = this._scope.settings.handleSize,\n\t\t\t\t\tversion = this._updateVersion;\n\t\t\t\tfor (var id in items) {\n\t\t\t\t\titems[id]._drawSelection(ctx, matrix, size, items, version);\n\t\t\t\t}\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tvar Item = Base.extend(Emitter, {\n\t\tstatics: {\n\t\t\textend: function extend(src) {\n\t\t\t\tif (src._serializeFields)\n\t\t\t\t\tsrc._serializeFields = Base.set({},\n\t\t\t\t\t\tthis.prototype._serializeFields, src._serializeFields);\n\t\t\t\treturn extend.base.apply(this, arguments);\n\t\t\t},\n\t\n\t\t\tNO_INSERT: { insert: false }\n\t\t},\n\t\n\t\t_class: 'Item',\n\t\t_name: null,\n\t\t_applyMatrix: true,\n\t\t_canApplyMatrix: true,\n\t\t_canScaleStroke: false,\n\t\t_pivot: null,\n\t\t_visible: true,\n\t\t_blendMode: 'normal',\n\t\t_opacity: 1,\n\t\t_locked: false,\n\t\t_guide: false,\n\t\t_clipMask: false,\n\t\t_selection: 0,\n\t\t_selectBounds: true,\n\t\t_selectChildren: false,\n\t\t_serializeFields: {\n\t\t\tname: null,\n\t\t\tapplyMatrix: null,\n\t\t\tmatrix: new Matrix(),\n\t\t\tpivot: null,\n\t\t\tvisible: true,\n\t\t\tblendMode: 'normal',\n\t\t\topacity: 1,\n\t\t\tlocked: false,\n\t\t\tguide: false,\n\t\t\tclipMask: false,\n\t\t\tselected: false,\n\t\t\tdata: {}\n\t\t},\n\t\t_prioritize: ['applyMatrix']\n\t},\n\tnew function() {\n\t\tvar handlers = ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onClick',\n\t\t\t\t'onDoubleClick', 'onMouseMove', 'onMouseEnter', 'onMouseLeave'];\n\t\treturn Base.each(handlers,\n\t\t\tfunction(name) {\n\t\t\t\tthis._events[name] = {\n\t\t\t\t\tinstall: function(type) {\n\t\t\t\t\t\tthis.getView()._countItemEvent(type, 1);\n\t\t\t\t\t},\n\t\n\t\t\t\t\tuninstall: function(type) {\n\t\t\t\t\t\tthis.getView()._countItemEvent(type, -1);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}, {\n\t\t\t\t_events: {\n\t\t\t\t\tonFrame: {\n\t\t\t\t\t\tinstall: function() {\n\t\t\t\t\t\t\tthis.getView()._animateItem(this, true);\n\t\t\t\t\t\t},\n\t\n\t\t\t\t\t\tuninstall: function() {\n\t\t\t\t\t\t\tthis.getView()._animateItem(this, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\n\t\t\t\t\tonLoad: {},\n\t\t\t\t\tonError: {}\n\t\t\t\t},\n\t\t\t\tstatics: {\n\t\t\t\t\t_itemHandlers: handlers\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}, {\n\t\tinitialize: function Item() {\n\t\t},\n\t\n\t\t_initialize: function(props, point) {\n\t\t\tvar hasProps = props && Base.isPlainObject(props),\n\t\t\t\tinternal = hasProps && props.internal === true,\n\t\t\t\tmatrix = this._matrix = new Matrix(),\n\t\t\t\tproject = hasProps && props.project || paper.project,\n\t\t\t\tsettings = paper.settings;\n\t\t\tthis._id = internal ? null : UID.get();\n\t\t\tthis._parent = this._index = null;\n\t\t\tthis._applyMatrix = this._canApplyMatrix && settings.applyMatrix;\n\t\t\tif (point)\n\t\t\t\tmatrix.translate(point);\n\t\t\tmatrix._owner = this;\n\t\t\tthis._style = new Style(project._currentStyle, this, project);\n\t\t\tif (internal || hasProps && props.insert === false\n\t\t\t\t|| !settings.insertItems && !(hasProps && props.insert === true)) {\n\t\t\t\tthis._setProject(project);\n\t\t\t} else {\n\t\t\t\t(hasProps && props.parent || project)\n\t\t\t\t\t\t._insertItem(undefined, this, true);\n\t\t\t}\n\t\t\tif (hasProps && props !== Item.NO_INSERT) {\n\t\t\t\tthis.set(props, {\n\t\t\t\t\tinternal: true, insert: true, project: true, parent: true\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn hasProps;\n\t\t},\n\t\n\t\t_serialize: function(options, dictionary) {\n\t\t\tvar props = {},\n\t\t\t\tthat = this;\n\t\n\t\t\tfunction serialize(fields) {\n\t\t\t\tfor (var key in fields) {\n\t\t\t\t\tvar value = that[key];\n\t\t\t\t\tif (!Base.equals(value, key === 'leading'\n\t\t\t\t\t\t\t? fields.fontSize * 1.2 : fields[key])) {\n\t\t\t\t\t\tprops[key] = Base.serialize(value, options,\n\t\t\t\t\t\t\t\tkey !== 'data', dictionary);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tserialize(this._serializeFields);\n\t\t\tif (!(this instanceof Group))\n\t\t\t\tserialize(this._style._defaults);\n\t\t\treturn [ this._class, props ];\n\t\t},\n\t\n\t\t_changed: function(flags) {\n\t\t\tvar symbol = this._symbol,\n\t\t\t\tcacheParent = this._parent || symbol,\n\t\t\t\tproject = this._project;\n\t\t\tif (flags & 8) {\n\t\t\t\tthis._bounds = this._position = this._decomposed =\n\t\t\t\t\t\tthis._globalMatrix = undefined;\n\t\t\t}\n\t\t\tif (cacheParent\n\t\t\t\t\t&& (flags & 40)) {\n\t\t\t\tItem._clearBoundsCache(cacheParent);\n\t\t\t}\n\t\t\tif (flags & 2) {\n\t\t\t\tItem._clearBoundsCache(this);\n\t\t\t}\n\t\t\tif (project)\n\t\t\t\tproject._changed(flags, this);\n\t\t\tif (symbol)\n\t\t\t\tsymbol._changed(flags);\n\t\t},\n\t\n\t\tgetId: function() {\n\t\t\treturn this._id;\n\t\t},\n\t\n\t\tgetName: function() {\n\t\t\treturn this._name;\n\t\t},\n\t\n\t\tsetName: function(name) {\n\t\n\t\t\tif (this._name)\n\t\t\t\tthis._removeNamed();\n\t\t\tif (name === (+name) + '')\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Names consisting only of numbers are not supported.');\n\t\t\tvar owner = this._getOwner();\n\t\t\tif (name && owner) {\n\t\t\t\tvar children = owner._children,\n\t\t\t\t\tnamedChildren = owner._namedChildren;\n\t\t\t\t(namedChildren[name] = namedChildren[name] || []).push(this);\n\t\t\t\tif (!(name in children))\n\t\t\t\t\tchildren[name] = this;\n\t\t\t}\n\t\t\tthis._name = name || undefined;\n\t\t\tthis._changed(128);\n\t\t},\n\t\n\t\tgetStyle: function() {\n\t\t\treturn this._style;\n\t\t},\n\t\n\t\tsetStyle: function(style) {\n\t\t\tthis.getStyle().set(style);\n\t\t}\n\t}, Base.each(['locked', 'visible', 'blendMode', 'opacity', 'guide'],\n\t\tfunction(name) {\n\t\t\tvar part = Base.capitalize(name),\n\t\t\t\tname = '_' + name;\n\t\t\tthis['get' + part] = function() {\n\t\t\t\treturn this[name];\n\t\t\t};\n\t\t\tthis['set' + part] = function(value) {\n\t\t\t\tif (value != this[name]) {\n\t\t\t\t\tthis[name] = value;\n\t\t\t\t\tthis._changed(name === '_locked'\n\t\t\t\t\t\t\t? 128 : 129);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t{}), {\n\t\tbeans: true,\n\t\n\t\tgetSelection: function() {\n\t\t\treturn this._selection;\n\t\t},\n\t\n\t\tsetSelection: function(selection) {\n\t\t\tif (selection !== this._selection) {\n\t\t\t\tthis._selection = selection;\n\t\t\t\tvar project = this._project;\n\t\t\t\tif (project) {\n\t\t\t\t\tproject._updateSelection(this);\n\t\t\t\t\tthis._changed(129);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tchangeSelection: function(flag, selected) {\n\t\t\tvar selection = this._selection;\n\t\t\tthis.setSelection(selected ? selection | flag : selection & ~flag);\n\t\t},\n\t\n\t\tisSelected: function() {\n\t\t\tif (this._selectChildren) {\n\t\t\t\tvar children = this._children;\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\t\tif (children[i].isSelected())\n\t\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn !!(this._selection & 1);\n\t\t},\n\t\n\t\tsetSelected: function(selected) {\n\t\t\tif (this._selectChildren) {\n\t\t\t\tvar children = this._children;\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\t\tchildren[i].setSelected(selected);\n\t\t\t}\n\t\t\tthis.changeSelection(1, selected);\n\t\t},\n\t\n\t\tisFullySelected: function() {\n\t\t\tvar children = this._children,\n\t\t\t\tselected = !!(this._selection & 1);\n\t\t\tif (children && selected) {\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\t\tif (!children[i].isFullySelected())\n\t\t\t\t\t\treturn false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn selected;\n\t\t},\n\t\n\t\tsetFullySelected: function(selected) {\n\t\t\tvar children = this._children;\n\t\t\tif (children) {\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\t\tchildren[i].setFullySelected(selected);\n\t\t\t}\n\t\t\tthis.changeSelection(1, selected);\n\t\t},\n\t\n\t\tisClipMask: function() {\n\t\t\treturn this._clipMask;\n\t\t},\n\t\n\t\tsetClipMask: function(clipMask) {\n\t\t\tif (this._clipMask != (clipMask = !!clipMask)) {\n\t\t\t\tthis._clipMask = clipMask;\n\t\t\t\tif (clipMask) {\n\t\t\t\t\tthis.setFillColor(null);\n\t\t\t\t\tthis.setStrokeColor(null);\n\t\t\t\t}\n\t\t\t\tthis._changed(129);\n\t\t\t\tif (this._parent)\n\t\t\t\t\tthis._parent._changed(1024);\n\t\t\t}\n\t\t},\n\t\n\t\tgetData: function() {\n\t\t\tif (!this._data)\n\t\t\t\tthis._data = {};\n\t\t\treturn this._data;\n\t\t},\n\t\n\t\tsetData: function(data) {\n\t\t\tthis._data = data;\n\t\t},\n\t\n\t\tgetPosition: function(_dontLink) {\n\t\t\tvar position = this._position,\n\t\t\t\tctor = _dontLink ? Point : LinkedPoint;\n\t\t\tif (!position) {\n\t\t\t\tvar pivot = this._pivot;\n\t\t\t\tposition = this._position = pivot\n\t\t\t\t\t\t? this._matrix._transformPoint(pivot)\n\t\t\t\t\t\t: this.getBounds().getCenter(true);\n\t\t\t}\n\t\t\treturn new ctor(position.x, position.y, this, 'setPosition');\n\t\t},\n\t\n\t\tsetPosition: function() {\n\t\t\tthis.translate(Point.read(arguments).subtract(this.getPosition(true)));\n\t\t},\n\t\n\t\tgetPivot: function() {\n\t\t\tvar pivot = this._pivot;\n\t\t\treturn pivot\n\t\t\t\t\t? new LinkedPoint(pivot.x, pivot.y, this, 'setPivot')\n\t\t\t\t\t: null;\n\t\t},\n\t\n\t\tsetPivot: function() {\n\t\t\tthis._pivot = Point.read(arguments, 0, { clone: true, readNull: true });\n\t\t\tthis._position = undefined;\n\t\t}\n\t}, Base.each({\n\t\t\tgetStrokeBounds: { stroke: true },\n\t\t\tgetHandleBounds: { handle: true },\n\t\t\tgetInternalBounds: { internal: true }\n\t\t},\n\t\tfunction(options, key) {\n\t\t\tthis[key] = function(matrix) {\n\t\t\t\treturn this.getBounds(matrix, options);\n\t\t\t};\n\t\t},\n\t{\n\t\tbeans: true,\n\t\n\t\tgetBounds: function(matrix, options) {\n\t\t\tvar hasMatrix = options || matrix instanceof Matrix,\n\t\t\t\topts = Base.set({}, hasMatrix ? options : matrix,\n\t\t\t\t\t\tthis._boundsOptions);\n\t\t\tif (!opts.stroke || this.getStrokeScaling())\n\t\t\t\topts.cacheItem = this;\n\t\t\tvar bounds = this._getCachedBounds(hasMatrix && matrix, opts);\n\t\t\treturn !arguments.length\n\t\t\t\t\t? new LinkedRectangle(bounds.x, bounds.y, bounds.width,\n\t\t\t\t\t\t\tbounds.height, this, 'setBounds')\n\t\t\t\t\t: bounds;\n\t\t},\n\t\n\t\tsetBounds: function() {\n\t\t\tvar rect = Rectangle.read(arguments),\n\t\t\t\tbounds = this.getBounds(),\n\t\t\t\t_matrix = this._matrix,\n\t\t\t\tmatrix = new Matrix(),\n\t\t\t\tcenter = rect.getCenter();\n\t\t\tmatrix.translate(center);\n\t\t\tif (rect.width != bounds.width || rect.height != bounds.height) {\n\t\t\t\tif (!_matrix.isInvertible()) {\n\t\t\t\t\t_matrix.set(_matrix._backup\n\t\t\t\t\t\t\t|| new Matrix().translate(_matrix.getTranslation()));\n\t\t\t\t\tbounds = this.getBounds();\n\t\t\t\t}\n\t\t\t\tmatrix.scale(\n\t\t\t\t\t\tbounds.width !== 0 ? rect.width / bounds.width : 0,\n\t\t\t\t\t\tbounds.height !== 0 ? rect.height / bounds.height : 0);\n\t\t\t}\n\t\t\tcenter = bounds.getCenter();\n\t\t\tmatrix.translate(-center.x, -center.y);\n\t\t\tthis.transform(matrix);\n\t\t},\n\t\n\t\t_getBounds: function(matrix, options) {\n\t\t\tvar children = this._children;\n\t\t\tif (!children || !children.length)\n\t\t\t\treturn new Rectangle();\n\t\t\tItem._updateBoundsCache(this, options.cacheItem);\n\t\t\treturn Item._getBounds(children, matrix, options);\n\t\t},\n\t\n\t\t_getCachedBounds: function(matrix, options) {\n\t\t\tmatrix = matrix && matrix._orNullIfIdentity();\n\t\t\tvar internal = options.internal,\n\t\t\t\tcacheItem = options.cacheItem,\n\t\t\t\t_matrix = internal ? null : this._matrix._orNullIfIdentity(),\n\t\t\t\tcacheKey = cacheItem && (!matrix || matrix.equals(_matrix)) && [\n\t\t\t\t\toptions.stroke ? 1 : 0,\n\t\t\t\t\toptions.handle ? 1 : 0,\n\t\t\t\t\tinternal ? 1 : 0\n\t\t\t\t].join('');\n\t\t\tItem._updateBoundsCache(this._parent || this._symbol, cacheItem);\n\t\t\tif (cacheKey && this._bounds && cacheKey in this._bounds)\n\t\t\t\treturn this._bounds[cacheKey].rect.clone();\n\t\t\tvar bounds = this._getBounds(matrix || _matrix, options);\n\t\t\tif (cacheKey) {\n\t\t\t\tif (!this._bounds)\n\t\t\t\t\tthis._bounds = {};\n\t\t\t\tvar cached = this._bounds[cacheKey] = {\n\t\t\t\t\trect: bounds.clone(),\n\t\t\t\t\tinternal: options.internal\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn bounds;\n\t\t},\n\t\n\t\t_getStrokeMatrix: function(matrix, options) {\n\t\t\tvar parent = this.getStrokeScaling() ? null\n\t\t\t\t\t: options && options.internal ? this\n\t\t\t\t\t\t: this._parent || this._symbol && this._symbol._item,\n\t\t\t\tmx = parent ? parent.getViewMatrix().invert() : matrix;\n\t\t\treturn mx && mx._shiftless();\n\t\t},\n\t\n\t\tstatics: {\n\t\t\t_updateBoundsCache: function(parent, item) {\n\t\t\t\tif (parent && item) {\n\t\t\t\t\tvar id = item._id,\n\t\t\t\t\t\tref = parent._boundsCache = parent._boundsCache || {\n\t\t\t\t\t\t\tids: {},\n\t\t\t\t\t\t\tlist: []\n\t\t\t\t\t\t};\n\t\t\t\t\tif (!ref.ids[id]) {\n\t\t\t\t\t\tref.list.push(item);\n\t\t\t\t\t\tref.ids[id] = item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t_clearBoundsCache: function(item) {\n\t\t\t\tvar cache = item._boundsCache;\n\t\t\t\tif (cache) {\n\t\t\t\t\titem._bounds = item._position = item._boundsCache = undefined;\n\t\t\t\t\tfor (var i = 0, list = cache.list, l = list.length; i < l; i++){\n\t\t\t\t\t\tvar other = list[i];\n\t\t\t\t\t\tif (other !== item) {\n\t\t\t\t\t\t\tother._bounds = other._position = undefined;\n\t\t\t\t\t\t\tif (other._boundsCache)\n\t\t\t\t\t\t\t\tItem._clearBoundsCache(other);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t_getBounds: function(items, matrix, options) {\n\t\t\t\tvar x1 = Infinity,\n\t\t\t\t\tx2 = -x1,\n\t\t\t\t\ty1 = x1,\n\t\t\t\t\ty2 = x2;\n\t\t\t\toptions = options || {};\n\t\t\t\tfor (var i = 0, l = items.length; i < l; i++) {\n\t\t\t\t\tvar item = items[i];\n\t\t\t\t\tif (item._visible && !item.isEmpty()) {\n\t\t\t\t\t\tvar rect = item._getCachedBounds(\n\t\t\t\t\t\t\tmatrix && matrix.appended(item._matrix), options);\n\t\t\t\t\t\tx1 = Math.min(rect.x, x1);\n\t\t\t\t\t\ty1 = Math.min(rect.y, y1);\n\t\t\t\t\t\tx2 = Math.max(rect.x + rect.width, x2);\n\t\t\t\t\t\ty2 = Math.max(rect.y + rect.height, y2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn isFinite(x1)\n\t\t\t\t\t\t? new Rectangle(x1, y1, x2 - x1, y2 - y1)\n\t\t\t\t\t\t: new Rectangle();\n\t\t\t}\n\t\t}\n\t\n\t}), {\n\t\tbeans: true,\n\t\n\t\t_decompose: function() {\n\t\t\treturn this._decomposed || (this._decomposed = this._matrix.decompose());\n\t\t},\n\t\n\t\tgetRotation: function() {\n\t\t\tvar decomposed = this._decompose();\n\t\t\treturn decomposed && decomposed.rotation;\n\t\t},\n\t\n\t\tsetRotation: function(rotation) {\n\t\t\tvar current = this.getRotation();\n\t\t\tif (current != null && rotation != null) {\n\t\t\t\tthis.rotate(rotation - current);\n\t\t\t}\n\t\t},\n\t\n\t\tgetScaling: function() {\n\t\t\tvar decomposed = this._decompose(),\n\t\t\t\tscaling = decomposed && decomposed.scaling;\n\t\t\treturn scaling\n\t\t\t\t\t? new LinkedPoint(scaling.x, scaling.y, this, 'setScaling')\n\t\t\t\t\t: undefined;\n\t\t},\n\t\n\t\tsetScaling: function() {\n\t\t\tvar current = this.getScaling(),\n\t\t\t\tscaling = Point.read(arguments, 0, { clone: true, readNull: true });\n\t\t\tif (current && scaling) {\n\t\t\t\tthis.scale(scaling.x / current.x, scaling.y / current.y);\n\t\t\t}\n\t\t},\n\t\n\t\tgetMatrix: function() {\n\t\t\treturn this._matrix;\n\t\t},\n\t\n\t\tsetMatrix: function() {\n\t\t\tvar matrix = this._matrix;\n\t\t\tmatrix.initialize.apply(matrix, arguments);\n\t\t},\n\t\n\t\tgetGlobalMatrix: function(_dontClone) {\n\t\t\tvar matrix = this._globalMatrix,\n\t\t\t\tupdateVersion = this._project._updateVersion;\n\t\t\tif (matrix && matrix._updateVersion !== updateVersion)\n\t\t\t\tmatrix = null;\n\t\t\tif (!matrix) {\n\t\t\t\tmatrix = this._globalMatrix = this._matrix.clone();\n\t\t\t\tvar parent = this._parent;\n\t\t\t\tif (parent)\n\t\t\t\t\tmatrix.prepend(parent.getGlobalMatrix(true));\n\t\t\t\tmatrix._updateVersion = updateVersion;\n\t\t\t}\n\t\t\treturn _dontClone ? matrix : matrix.clone();\n\t\t},\n\t\n\t\tgetViewMatrix: function() {\n\t\t\treturn this.getGlobalMatrix().prepend(this.getView()._matrix);\n\t\t},\n\t\n\t\tgetApplyMatrix: function() {\n\t\t\treturn this._applyMatrix;\n\t\t},\n\t\n\t\tsetApplyMatrix: function(apply) {\n\t\t\tif (this._applyMatrix = this._canApplyMatrix && !!apply)\n\t\t\t\tthis.transform(null, true);\n\t\t},\n\t\n\t\tgetTransformContent: '#getApplyMatrix',\n\t\tsetTransformContent: '#setApplyMatrix',\n\t}, {\n\t\tgetProject: function() {\n\t\t\treturn this._project;\n\t\t},\n\t\n\t\t_setProject: function(project, installEvents) {\n\t\t\tif (this._project !== project) {\n\t\t\t\tif (this._project)\n\t\t\t\t\tthis._installEvents(false);\n\t\t\t\tthis._project = project;\n\t\t\t\tvar children = this._children;\n\t\t\t\tfor (var i = 0, l = children && children.length; i < l; i++)\n\t\t\t\t\tchildren[i]._setProject(project);\n\t\t\t\tinstallEvents = true;\n\t\t\t}\n\t\t\tif (installEvents)\n\t\t\t\tthis._installEvents(true);\n\t\t},\n\t\n\t\tgetView: function() {\n\t\t\treturn this._project._view;\n\t\t},\n\t\n\t\t_installEvents: function _installEvents(install) {\n\t\t\t_installEvents.base.call(this, install);\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children && children.length; i < l; i++)\n\t\t\t\tchildren[i]._installEvents(install);\n\t\t},\n\t\n\t\tgetLayer: function() {\n\t\t\tvar parent = this;\n\t\t\twhile (parent = parent._parent) {\n\t\t\t\tif (parent instanceof Layer)\n\t\t\t\t\treturn parent;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\n\t\tgetParent: function() {\n\t\t\treturn this._parent;\n\t\t},\n\t\n\t\tsetParent: function(item) {\n\t\t\treturn item.addChild(this);\n\t\t},\n\t\n\t\t_getOwner: '#getParent',\n\t\n\t\tgetChildren: function() {\n\t\t\treturn this._children;\n\t\t},\n\t\n\t\tsetChildren: function(items) {\n\t\t\tthis.removeChildren();\n\t\t\tthis.addChildren(items);\n\t\t},\n\t\n\t\tgetFirstChild: function() {\n\t\t\treturn this._children && this._children[0] || null;\n\t\t},\n\t\n\t\tgetLastChild: function() {\n\t\t\treturn this._children && this._children[this._children.length - 1]\n\t\t\t\t\t|| null;\n\t\t},\n\t\n\t\tgetNextSibling: function() {\n\t\t\tvar owner = this._getOwner();\n\t\t\treturn owner && owner._children[this._index + 1] || null;\n\t\t},\n\t\n\t\tgetPreviousSibling: function() {\n\t\t\tvar owner = this._getOwner();\n\t\t\treturn owner && owner._children[this._index - 1] || null;\n\t\t},\n\t\n\t\tgetIndex: function() {\n\t\t\treturn this._index;\n\t\t},\n\t\n\t\tequals: function(item) {\n\t\t\treturn item === this || item && this._class === item._class\n\t\t\t\t\t&& this._style.equals(item._style)\n\t\t\t\t\t&& this._matrix.equals(item._matrix)\n\t\t\t\t\t&& this._locked === item._locked\n\t\t\t\t\t&& this._visible === item._visible\n\t\t\t\t\t&& this._blendMode === item._blendMode\n\t\t\t\t\t&& this._opacity === item._opacity\n\t\t\t\t\t&& this._clipMask === item._clipMask\n\t\t\t\t\t&& this._guide === item._guide\n\t\t\t\t\t&& this._equals(item)\n\t\t\t\t\t|| false;\n\t\t},\n\t\n\t\t_equals: function(item) {\n\t\t\treturn Base.equals(this._children, item._children);\n\t\t},\n\t\n\t\tclone: function(options) {\n\t\t\tvar copy = new this.constructor(Item.NO_INSERT),\n\t\t\t\tchildren = this._children,\n\t\t\t\tinsert = Base.pick(options ? options.insert : undefined,\n\t\t\t\t\t\toptions === undefined || options === true),\n\t\t\t\tdeep = Base.pick(options ? options.deep : undefined, true);\n\t\t\tif (children)\n\t\t\t\tcopy.copyAttributes(this);\n\t\t\tif (!children || deep)\n\t\t\t\tcopy.copyContent(this);\n\t\t\tif (!children)\n\t\t\t\tcopy.copyAttributes(this);\n\t\t\tif (insert)\n\t\t\t\tcopy.insertAbove(this);\n\t\t\tvar name = this._name,\n\t\t\t\tparent = this._parent;\n\t\t\tif (name && parent) {\n\t\t\t\tvar children = parent._children,\n\t\t\t\t\torig = name,\n\t\t\t\t\ti = 1;\n\t\t\t\twhile (children[name])\n\t\t\t\t\tname = orig + ' ' + (i++);\n\t\t\t\tif (name !== orig)\n\t\t\t\t\tcopy.setName(name);\n\t\t\t}\n\t\t\treturn copy;\n\t\t},\n\t\n\t\tcopyContent: function(source) {\n\t\t\tvar children = source._children;\n\t\t\tfor (var i = 0, l = children && children.length; i < l; i++) {\n\t\t\t\tthis.addChild(children[i].clone(false), true);\n\t\t\t}\n\t\t},\n\t\n\t\tcopyAttributes: function(source, excludeMatrix) {\n\t\t\tthis.setStyle(source._style);\n\t\t\tvar keys = ['_locked', '_visible', '_blendMode', '_opacity',\n\t\t\t\t\t'_clipMask', '_guide'];\n\t\t\tfor (var i = 0, l = keys.length; i < l; i++) {\n\t\t\t\tvar key = keys[i];\n\t\t\t\tif (source.hasOwnProperty(key))\n\t\t\t\t\tthis[key] = source[key];\n\t\t\t}\n\t\t\tif (!excludeMatrix)\n\t\t\t\tthis._matrix.set(source._matrix);\n\t\t\tthis.setApplyMatrix(source._applyMatrix);\n\t\t\tthis.setPivot(source._pivot);\n\t\t\tthis.setSelection(source._selection);\n\t\t\tvar data = source._data,\n\t\t\t\tname = source._name;\n\t\t\tthis._data = data ? Base.clone(data) : null;\n\t\t\tif (name)\n\t\t\t\tthis.setName(name);\n\t\t},\n\t\n\t\trasterize: function(resolution, insert) {\n\t\t\tvar bounds = this.getStrokeBounds(),\n\t\t\t\tscale = (resolution || this.getView().getResolution()) / 72,\n\t\t\t\ttopLeft = bounds.getTopLeft().floor(),\n\t\t\t\tbottomRight = bounds.getBottomRight().ceil(),\n\t\t\t\tsize = new Size(bottomRight.subtract(topLeft)),\n\t\t\t\traster = new Raster(Item.NO_INSERT);\n\t\t\tif (!size.isZero()) {\n\t\t\t\tvar canvas = CanvasProvider.getCanvas(size.multiply(scale)),\n\t\t\t\t\tctx = canvas.getContext('2d'),\n\t\t\t\t\tmatrix = new Matrix().scale(scale).translate(topLeft.negate());\n\t\t\t\tctx.save();\n\t\t\t\tmatrix.applyToContext(ctx);\n\t\t\t\tthis.draw(ctx, new Base({ matrices: [matrix] }));\n\t\t\t\tctx.restore();\n\t\t\t\traster.setCanvas(canvas);\n\t\t\t}\n\t\t\traster.transform(new Matrix().translate(topLeft.add(size.divide(2)))\n\t\t\t\t\t.scale(1 / scale));\n\t\t\tif (insert === undefined || insert)\n\t\t\t\traster.insertAbove(this);\n\t\t\treturn raster;\n\t\t},\n\t\n\t\tcontains: function() {\n\t\t\treturn !!this._contains(\n\t\t\t\t\tthis._matrix._inverseTransform(Point.read(arguments)));\n\t\t},\n\t\n\t\t_contains: function(point) {\n\t\t\tvar children = this._children;\n\t\t\tif (children) {\n\t\t\t\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\t\t\t\tif (children[i].contains(point))\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn point.isInside(this.getInternalBounds());\n\t\t},\n\t\n\t\tisInside: function() {\n\t\t\treturn Rectangle.read(arguments).contains(this.getBounds());\n\t\t},\n\t\n\t\t_asPathItem: function() {\n\t\t\treturn new Path.Rectangle({\n\t\t\t\trectangle: this.getInternalBounds(),\n\t\t\t\tmatrix: this._matrix,\n\t\t\t\tinsert: false,\n\t\t\t});\n\t\t},\n\t\n\t\tintersects: function(item, _matrix) {\n\t\t\tif (!(item instanceof Item))\n\t\t\t\treturn false;\n\t\t\treturn this._asPathItem().getIntersections(item._asPathItem(), null,\n\t\t\t\t\t_matrix, true).length > 0;\n\t\t}\n\t},\n\tnew function() {\n\t\tfunction hitTest() {\n\t\t\treturn this._hitTest(\n\t\t\t\t\tPoint.read(arguments),\n\t\t\t\t\tHitResult.getOptions(arguments));\n\t\t}\n\t\n\t\tfunction hitTestAll() {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\toptions = HitResult.getOptions(arguments),\n\t\t\t\tcallback = options.match,\n\t\t\t\tresults = [];\n\t\t\toptions = Base.set({}, options, {\n\t\t\t\tmatch: function(hit) {\n\t\t\t\t\tif (!callback || callback(hit))\n\t\t\t\t\t\tresults.push(hit);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._hitTest(point, options);\n\t\t\treturn results;\n\t\t}\n\t\n\t\tfunction hitTestChildren(point, options, viewMatrix, _exclude) {\n\t\t\tvar children = this._children;\n\t\t\tif (children) {\n\t\t\t\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\t\t\t\tvar child = children[i];\n\t\t\t\t\tvar res = child !== _exclude && child._hitTest(point, options,\n\t\t\t\t\t\t\tviewMatrix);\n\t\t\t\t\tif (res)\n\t\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\n\t\tProject.inject({\n\t\t\thitTest: hitTest,\n\t\t\thitTestAll: hitTestAll,\n\t\t\t_hitTest: hitTestChildren\n\t\t});\n\t\n\t\treturn {\n\t\t\thitTest: hitTest,\n\t\t\thitTestAll: hitTestAll,\n\t\t\t_hitTestChildren: hitTestChildren,\n\t\t};\n\t}, {\n\t\n\t\t_hitTest: function(point, options, parentViewMatrix) {\n\t\t\tif (this._locked || !this._visible || this._guide && !options.guides\n\t\t\t\t\t|| this.isEmpty()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\n\t\t\tvar matrix = this._matrix,\n\t\t\t\tviewMatrix = parentViewMatrix\n\t\t\t\t\t\t? parentViewMatrix.appended(matrix)\n\t\t\t\t\t\t: this.getGlobalMatrix().prepend(this.getView()._matrix),\n\t\t\t\tstrokeMatrix = this.getStrokeScaling()\n\t\t\t\t\t\t? null\n\t\t\t\t\t\t: viewMatrix.inverted()._shiftless(),\n\t\t\t\ttolerance = Math.max(options.tolerance, 1e-6),\n\t\t\t\ttolerancePadding = options._tolerancePadding = new Size(\n\t\t\t\t\t\tPath._getStrokePadding(tolerance, strokeMatrix));\n\t\t\tpoint = matrix._inverseTransform(point);\n\t\t\tif (!point || !this._children &&\n\t\t\t\t!this.getBounds({ internal: true, stroke: true, handle: true })\n\t\t\t\t\t.expand(tolerancePadding.multiply(2))._containsPoint(point)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\n\t\t\tvar checkSelf = !(options.guides && !this._guide\n\t\t\t\t\t|| options.selected && !this.isSelected()\n\t\t\t\t\t|| options.type && options.type !== Base.hyphenate(this._class)\n\t\t\t\t\t|| options.class && !(this instanceof options.class)),\n\t\t\t\tcallback = options.match,\n\t\t\t\tthat = this,\n\t\t\t\tbounds,\n\t\t\t\tres;\n\t\n\t\t\tfunction match(hit) {\n\t\t\t\treturn !callback || hit && callback(hit) ? hit : null;\n\t\t\t}\n\t\n\t\t\tfunction checkBounds(type, part) {\n\t\t\t\tvar pt = bounds['get' + part]();\n\t\t\t\tif (point.subtract(pt).divide(tolerancePadding).length <= 1) {\n\t\t\t\t\treturn new HitResult(type, that,\n\t\t\t\t\t\t\t{ name: Base.hyphenate(part), point: pt });\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (checkSelf && (options.center || options.bounds) && this._parent) {\n\t\t\t\tbounds = this.getInternalBounds();\n\t\t\t\tif (options.center) {\n\t\t\t\t\tres = checkBounds('center', 'Center');\n\t\t\t\t}\n\t\t\t\tif (!res && options.bounds) {\n\t\t\t\t\tvar points = [\n\t\t\t\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',\n\t\t\t\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'\n\t\t\t\t\t];\n\t\t\t\t\tfor (var i = 0; i < 8 && !res; i++) {\n\t\t\t\t\t\tres = checkBounds('bounds', points[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tres = match(res);\n\t\t\t}\n\t\n\t\t\tif (!res) {\n\t\t\t\tres = this._hitTestChildren(point, options, viewMatrix)\n\t\t\t\t\t|| checkSelf\n\t\t\t\t\t\t&& match(this._hitTestSelf(point, options, viewMatrix,\n\t\t\t\t\t\t\tstrokeMatrix))\n\t\t\t\t\t|| null;\n\t\t\t}\n\t\t\tif (res && res.point) {\n\t\t\t\tres.point = matrix.transform(res.point);\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\n\t\t_hitTestSelf: function(point, options) {\n\t\t\tif (options.fill && this.hasFill() && this._contains(point))\n\t\t\t\treturn new HitResult('fill', this);\n\t\t},\n\t\n\t\tmatches: function(name, compare) {\n\t\t\tfunction matchObject(obj1, obj2) {\n\t\t\t\tfor (var i in obj1) {\n\t\t\t\t\tif (obj1.hasOwnProperty(i)) {\n\t\t\t\t\t\tvar val1 = obj1[i],\n\t\t\t\t\t\t\tval2 = obj2[i];\n\t\t\t\t\t\tif (Base.isPlainObject(val1) && Base.isPlainObject(val2)) {\n\t\t\t\t\t\t\tif (!matchObject(val1, val2))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else if (!Base.equals(val1, val2)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvar type = typeof name;\n\t\t\tif (type === 'object') {\n\t\t\t\tfor (var key in name) {\n\t\t\t\t\tif (name.hasOwnProperty(key) && !this.matches(key, name[key]))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else if (type === 'function') {\n\t\t\t\treturn name(this);\n\t\t\t} else if (name === 'match') {\n\t\t\t\treturn compare(this);\n\t\t\t} else {\n\t\t\t\tvar value = /^(empty|editable)$/.test(name)\n\t\t\t\t\t\t? this['is' + Base.capitalize(name)]()\n\t\t\t\t\t\t: name === 'type'\n\t\t\t\t\t\t\t? Base.hyphenate(this._class)\n\t\t\t\t\t\t\t: this[name];\n\t\t\t\tif (name === 'class') {\n\t\t\t\t\tif (typeof compare === 'function')\n\t\t\t\t\t\treturn this instanceof compare;\n\t\t\t\t\tvalue = this._class;\n\t\t\t\t}\n\t\t\t\tif (typeof compare === 'function') {\n\t\t\t\t\treturn !!compare(value);\n\t\t\t\t} else if (compare) {\n\t\t\t\t\tif (compare.test) {\n\t\t\t\t\t\treturn compare.test(value);\n\t\t\t\t\t} else if (Base.isPlainObject(compare)) {\n\t\t\t\t\t\treturn matchObject(compare, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn Base.equals(value, compare);\n\t\t\t}\n\t\t},\n\t\n\t\tgetItems: function(options) {\n\t\t\treturn Item._getItems(this, options, this._matrix);\n\t\t},\n\t\n\t\tgetItem: function(options) {\n\t\t\treturn Item._getItems(this, options, this._matrix, null, true)[0]\n\t\t\t\t\t|| null;\n\t\t},\n\t\n\t\tstatics: {\n\t\t\t_getItems: function _getItems(item, options, matrix, param, firstOnly) {\n\t\t\t\tif (!param) {\n\t\t\t\t\tvar obj = typeof options === 'object' && options,\n\t\t\t\t\t\toverlapping = obj && obj.overlapping,\n\t\t\t\t\t\tinside = obj && obj.inside,\n\t\t\t\t\t\tbounds = overlapping || inside,\n\t\t\t\t\t\trect = bounds && Rectangle.read([bounds]);\n\t\t\t\t\tparam = {\n\t\t\t\t\t\titems: [],\n\t\t\t\t\t\trecursive: obj && obj.recursive !== false,\n\t\t\t\t\t\tinside: !!inside,\n\t\t\t\t\t\toverlapping: !!overlapping,\n\t\t\t\t\t\trect: rect,\n\t\t\t\t\t\tpath: overlapping && new Path.Rectangle({\n\t\t\t\t\t\t\trectangle: rect,\n\t\t\t\t\t\t\tinsert: false\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t\tif (obj) {\n\t\t\t\t\t\toptions = Base.filter({}, options, {\n\t\t\t\t\t\t\trecursive: true, inside: true, overlapping: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar children = item._children,\n\t\t\t\t\titems = param.items,\n\t\t\t\t\trect = param.rect;\n\t\t\t\tmatrix = rect && (matrix || new Matrix());\n\t\t\t\tfor (var i = 0, l = children && children.length; i < l; i++) {\n\t\t\t\t\tvar child = children[i],\n\t\t\t\t\t\tchildMatrix = matrix && matrix.appended(child._matrix),\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\tif (rect) {\n\t\t\t\t\t\tvar bounds = child.getBounds(childMatrix);\n\t\t\t\t\t\tif (!rect.intersects(bounds))\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif (!(rect.contains(bounds)\n\t\t\t\t\t\t\t\t|| param.overlapping && (bounds.contains(rect)\n\t\t\t\t\t\t\t\t\t|| param.path.intersects(child, childMatrix))))\n\t\t\t\t\t\t\tadd = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (add && child.matches(options)) {\n\t\t\t\t\t\titems.push(child);\n\t\t\t\t\t\tif (firstOnly)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (param.recursive !== false) {\n\t\t\t\t\t\t_getItems(child, options, childMatrix, param, firstOnly);\n\t\t\t\t\t}\n\t\t\t\t\tif (firstOnly && items.length > 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn items;\n\t\t\t}\n\t\t}\n\t}, {\n\t\n\t\timportJSON: function(json) {\n\t\t\tvar res = Base.importJSON(json, this);\n\t\t\treturn res !== this ? this.addChild(res) : res;\n\t\t},\n\t\n\t\taddChild: function(item) {\n\t\t\treturn this.insertChild(undefined, item);\n\t\t},\n\t\n\t\tinsertChild: function(index, item) {\n\t\t\tvar res = item ? this.insertChildren(index, [item]) : null;\n\t\t\treturn res && res[0];\n\t\t},\n\t\n\t\taddChildren: function(items) {\n\t\t\treturn this.insertChildren(this._children.length, items);\n\t\t},\n\t\n\t\tinsertChildren: function(index, items) {\n\t\t\tvar children = this._children;\n\t\t\tif (children && items && items.length > 0) {\n\t\t\t\titems = Base.slice(items);\n\t\t\t\tfor (var i = items.length - 1; i >= 0; i--) {\n\t\t\t\t\tvar item = items[i];\n\t\t\t\t\tif (!item) {\n\t\t\t\t\t\titems.splice(i, 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem._remove(false, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tBase.splice(children, items, index, 0);\n\t\t\t\tvar project = this._project,\n\t\t\t\t\tnotifySelf = project._changes;\n\t\t\t\tfor (var i = 0, l = items.length; i < l; i++) {\n\t\t\t\t\tvar item = items[i],\n\t\t\t\t\t\tname = item._name;\n\t\t\t\t\titem._parent = this;\n\t\t\t\t\titem._setProject(project, true);\n\t\t\t\t\tif (name)\n\t\t\t\t\t\titem.setName(name);\n\t\t\t\t\tif (notifySelf)\n\t\t\t\t\t\tthis._changed(5);\n\t\t\t\t}\n\t\t\t\tthis._changed(11);\n\t\t\t} else {\n\t\t\t\titems = null;\n\t\t\t}\n\t\t\treturn items;\n\t\t},\n\t\n\t\t_insertItem: '#insertChild',\n\t\n\t\t_insertAt: function(item, offset) {\n\t\t\tvar owner = item && item._getOwner(),\n\t\t\t\tres = item !== this && owner ? this : null;\n\t\t\tif (res) {\n\t\t\t\tres._remove(false, true);\n\t\t\t\towner._insertItem(item._index + offset, res);\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\n\t\tinsertAbove: function(item) {\n\t\t\treturn this._insertAt(item, 1);\n\t\t},\n\t\n\t\tinsertBelow: function(item) {\n\t\t\treturn this._insertAt(item, 0);\n\t\t},\n\t\n\t\tsendToBack: function() {\n\t\t\tvar owner = this._getOwner();\n\t\t\treturn owner ? owner._insertItem(0, this) : null;\n\t\t},\n\t\n\t\tbringToFront: function() {\n\t\t\tvar owner = this._getOwner();\n\t\t\treturn owner ? owner._insertItem(undefined, this) : null;\n\t\t},\n\t\n\t\tappendTop: '#addChild',\n\t\n\t\tappendBottom: function(item) {\n\t\t\treturn this.insertChild(0, item);\n\t\t},\n\t\n\t\tmoveAbove: '#insertAbove',\n\t\n\t\tmoveBelow: '#insertBelow',\n\t\n\t\tcopyTo: function(owner) {\n\t\t\treturn owner._insertItem(undefined, this.clone(false));\n\t\t},\n\t\n\t\treduce: function(options) {\n\t\t\tvar children = this._children;\n\t\t\tif (children && children.length === 1) {\n\t\t\t\tvar child = children[0].reduce(options);\n\t\t\t\tif (this._parent) {\n\t\t\t\t\tchild.insertAbove(this);\n\t\t\t\t\tthis.remove();\n\t\t\t\t} else {\n\t\t\t\t\tchild.remove();\n\t\t\t\t}\n\t\t\t\treturn child;\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\t_removeNamed: function() {\n\t\t\tvar owner = this._getOwner();\n\t\t\tif (owner) {\n\t\t\t\tvar children = owner._children,\n\t\t\t\t\tnamedChildren = owner._namedChildren,\n\t\t\t\t\tname = this._name,\n\t\t\t\t\tnamedArray = namedChildren[name],\n\t\t\t\t\tindex = namedArray ? namedArray.indexOf(this) : -1;\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tif (children[name] == this)\n\t\t\t\t\t\tdelete children[name];\n\t\t\t\t\tnamedArray.splice(index, 1);\n\t\t\t\t\tif (namedArray.length) {\n\t\t\t\t\t\tchildren[name] = namedArray[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelete namedChildren[name];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t_remove: function(notifySelf, notifyParent) {\n\t\t\tvar owner = this._getOwner(),\n\t\t\t\tproject = this._project,\n\t\t\t\tindex = this._index;\n\t\t\tif (owner) {\n\t\t\t\tif (this._name)\n\t\t\t\t\tthis._removeNamed();\n\t\t\t\tif (index != null) {\n\t\t\t\t\tif (project._activeLayer === this)\n\t\t\t\t\t\tproject._activeLayer = this.getNextSibling()\n\t\t\t\t\t\t\t\t|| this.getPreviousSibling();\n\t\t\t\t\tBase.splice(owner._children, null, index, 1);\n\t\t\t\t}\n\t\t\t\tthis._installEvents(false);\n\t\t\t\tif (notifySelf && project._changes)\n\t\t\t\t\tthis._changed(5);\n\t\t\t\tif (notifyParent)\n\t\t\t\t\towner._changed(11, this);\n\t\t\t\tthis._parent = null;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\n\t\tremove: function() {\n\t\t\treturn this._remove(true, true);\n\t\t},\n\t\n\t\treplaceWith: function(item) {\n\t\t\tvar ok = item && item.insertBelow(this);\n\t\t\tif (ok)\n\t\t\t\tthis.remove();\n\t\t\treturn ok;\n\t\t},\n\t\n\t\tremoveChildren: function(start, end) {\n\t\t\tif (!this._children)\n\t\t\t\treturn null;\n\t\t\tstart = start || 0;\n\t\t\tend = Base.pick(end, this._children.length);\n\t\t\tvar removed = Base.splice(this._children, null, start, end - start);\n\t\t\tfor (var i = removed.length - 1; i >= 0; i--) {\n\t\t\t\tremoved[i]._remove(true, false);\n\t\t\t}\n\t\t\tif (removed.length > 0)\n\t\t\t\tthis._changed(11);\n\t\t\treturn removed;\n\t\t},\n\t\n\t\tclear: '#removeChildren',\n\t\n\t\treverseChildren: function() {\n\t\t\tif (this._children) {\n\t\t\t\tthis._children.reverse();\n\t\t\t\tfor (var i = 0, l = this._children.length; i < l; i++)\n\t\t\t\t\tthis._children[i]._index = i;\n\t\t\t\tthis._changed(11);\n\t\t\t}\n\t\t},\n\t\n\t\tisEmpty: function() {\n\t\t\tvar children = this._children;\n\t\t\treturn !children || !children.length;\n\t\t},\n\t\n\t\tisEditable: function() {\n\t\t\tvar item = this;\n\t\t\twhile (item) {\n\t\t\t\tif (!item._visible || item._locked)\n\t\t\t\t\treturn false;\n\t\t\t\titem = item._parent;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t\n\t\thasFill: function() {\n\t\t\treturn this.getStyle().hasFill();\n\t\t},\n\t\n\t\thasStroke: function() {\n\t\t\treturn this.getStyle().hasStroke();\n\t\t},\n\t\n\t\thasShadow: function() {\n\t\t\treturn this.getStyle().hasShadow();\n\t\t},\n\t\n\t\t_getOrder: function(item) {\n\t\t\tfunction getList(item) {\n\t\t\t\tvar list = [];\n\t\t\t\tdo {\n\t\t\t\t\tlist.unshift(item);\n\t\t\t\t} while (item = item._parent);\n\t\t\t\treturn list;\n\t\t\t}\n\t\t\tvar list1 = getList(this),\n\t\t\t\tlist2 = getList(item);\n\t\t\tfor (var i = 0, l = Math.min(list1.length, list2.length); i < l; i++) {\n\t\t\t\tif (list1[i] != list2[i]) {\n\t\t\t\t\treturn list1[i]._index < list2[i]._index ? 1 : -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\t\n\t\thasChildren: function() {\n\t\t\treturn this._children && this._children.length > 0;\n\t\t},\n\t\n\t\tisInserted: function() {\n\t\t\treturn this._parent ? this._parent.isInserted() : false;\n\t\t},\n\t\n\t\tisAbove: function(item) {\n\t\t\treturn this._getOrder(item) === -1;\n\t\t},\n\t\n\t\tisBelow: function(item) {\n\t\t\treturn this._getOrder(item) === 1;\n\t\t},\n\t\n\t\tisParent: function(item) {\n\t\t\treturn this._parent === item;\n\t\t},\n\t\n\t\tisChild: function(item) {\n\t\t\treturn item && item._parent === this;\n\t\t},\n\t\n\t\tisDescendant: function(item) {\n\t\t\tvar parent = this;\n\t\t\twhile (parent = parent._parent) {\n\t\t\t\tif (parent === item)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\n\t\tisAncestor: function(item) {\n\t\t\treturn item ? item.isDescendant(this) : false;\n\t\t},\n\t\n\t\tisSibling: function(item) {\n\t\t\treturn this._parent === item._parent;\n\t\t},\n\t\n\t\tisGroupedWith: function(item) {\n\t\t\tvar parent = this._parent;\n\t\t\twhile (parent) {\n\t\t\t\tif (parent._parent\n\t\t\t\t\t&& /^(Group|Layer|CompoundPath)$/.test(parent._class)\n\t\t\t\t\t&& item.isDescendant(parent))\n\t\t\t\t\t\treturn true;\n\t\t\t\tparent = parent._parent;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\n\t}, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {\n\t\tvar rotate = key === 'rotate';\n\t\tthis[key] = function() {\n\t\t\tvar value = (rotate ? Base : Point).read(arguments),\n\t\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\t\treturn this.transform(new Matrix()[key](value,\n\t\t\t\t\tcenter || this.getPosition(true)));\n\t\t};\n\t}, {\n\t\ttranslate: function() {\n\t\t\tvar mx = new Matrix();\n\t\t\treturn this.transform(mx.translate.apply(mx, arguments));\n\t\t},\n\t\n\t\ttransform: function(matrix, _applyMatrix, _applyRecursively,\n\t\t\t\t_setApplyMatrix) {\n\t\t\tif (matrix && matrix.isIdentity())\n\t\t\t\tmatrix = null;\n\t\t\tvar _matrix = this._matrix,\n\t\t\t\tapplyMatrix = (_applyMatrix || this._applyMatrix)\n\t\t\t\t\t\t&& ((!_matrix.isIdentity() || matrix)\n\t\t\t\t\t\t\t|| _applyMatrix && _applyRecursively && this._children);\n\t\t\tif (!matrix && !applyMatrix)\n\t\t\t\treturn this;\n\t\t\tif (matrix) {\n\t\t\t\tif (!matrix.isInvertible() && _matrix.isInvertible())\n\t\t\t\t\t_matrix._backup = _matrix.getValues();\n\t\t\t\t_matrix.prepend(matrix);\n\t\t\t}\n\t\t\tif (applyMatrix = applyMatrix && this._transformContent(_matrix,\n\t\t\t\t\t\t_applyRecursively, _setApplyMatrix)) {\n\t\t\t\tvar pivot = this._pivot,\n\t\t\t\t\tstyle = this._style,\n\t\t\t\t\tfillColor = style.getFillColor(true),\n\t\t\t\t\tstrokeColor = style.getStrokeColor(true);\n\t\t\t\tif (pivot)\n\t\t\t\t\t_matrix._transformPoint(pivot, pivot, true);\n\t\t\t\tif (fillColor)\n\t\t\t\t\tfillColor.transform(_matrix);\n\t\t\t\tif (strokeColor)\n\t\t\t\t\tstrokeColor.transform(_matrix);\n\t\t\t\t_matrix.reset(true);\n\t\t\t\tif (_setApplyMatrix && this._canApplyMatrix)\n\t\t\t\t\tthis._applyMatrix = true;\n\t\t\t}\n\t\t\tvar bounds = this._bounds,\n\t\t\t\tposition = this._position;\n\t\t\tthis._changed(9);\n\t\t\tvar decomp = bounds && matrix && matrix.decompose();\n\t\t\tif (decomp && !decomp.shearing && decomp.rotation % 90 === 0) {\n\t\t\t\tfor (var key in bounds) {\n\t\t\t\t\tvar cache = bounds[key];\n\t\t\t\t\tif (applyMatrix || !cache.internal) {\n\t\t\t\t\t\tvar rect = cache.rect;\n\t\t\t\t\t\tmatrix._transformBounds(rect, rect);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar getter = this._boundsGetter,\n\t\t\t\t\trect = bounds[getter && getter.getBounds || getter || 'getBounds'];\n\t\t\t\tif (rect)\n\t\t\t\t\tthis._position = rect.getCenter(true);\n\t\t\t\tthis._bounds = bounds;\n\t\t\t} else if (matrix && position) {\n\t\t\t\tthis._position = matrix._transformPoint(position, position);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\t_transformContent: function(matrix, applyRecursively, setApplyMatrix) {\n\t\t\tvar children = this._children;\n\t\t\tif (children) {\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\t\tchildren[i].transform(matrix, true, applyRecursively,\n\t\t\t\t\t\t\tsetApplyMatrix);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\n\t\tglobalToLocal: function() {\n\t\t\treturn this.getGlobalMatrix(true)._inverseTransform(\n\t\t\t\t\tPoint.read(arguments));\n\t\t},\n\t\n\t\tlocalToGlobal: function() {\n\t\t\treturn this.getGlobalMatrix(true)._transformPoint(\n\t\t\t\t\tPoint.read(arguments));\n\t\t},\n\t\n\t\tparentToLocal: function() {\n\t\t\treturn this._matrix._inverseTransform(Point.read(arguments));\n\t\t},\n\t\n\t\tlocalToParent: function() {\n\t\t\treturn this._matrix._transformPoint(Point.read(arguments));\n\t\t},\n\t\n\t\tfitBounds: function(rectangle, fill) {\n\t\t\trectangle = Rectangle.read(arguments);\n\t\t\tvar bounds = this.getBounds(),\n\t\t\t\titemRatio = bounds.height / bounds.width,\n\t\t\t\trectRatio = rectangle.height / rectangle.width,\n\t\t\t\tscale = (fill ? itemRatio > rectRatio : itemRatio < rectRatio)\n\t\t\t\t\t\t? rectangle.width / bounds.width\n\t\t\t\t\t\t: rectangle.height / bounds.height,\n\t\t\t\tnewBounds = new Rectangle(new Point(),\n\t\t\t\t\t\tnew Size(bounds.width * scale, bounds.height * scale));\n\t\t\tnewBounds.setCenter(rectangle.getCenter());\n\t\t\tthis.setBounds(newBounds);\n\t\t}\n\t}), {\n\t\n\t\t_setStyles: function(ctx, param, viewMatrix) {\n\t\t\tvar style = this._style;\n\t\t\tif (style.hasFill()) {\n\t\t\t\tctx.fillStyle = style.getFillColor().toCanvasStyle(ctx);\n\t\t\t}\n\t\t\tif (style.hasStroke()) {\n\t\t\t\tctx.strokeStyle = style.getStrokeColor().toCanvasStyle(ctx);\n\t\t\t\tctx.lineWidth = style.getStrokeWidth();\n\t\t\t\tvar strokeJoin = style.getStrokeJoin(),\n\t\t\t\t\tstrokeCap = style.getStrokeCap(),\n\t\t\t\t\tmiterLimit = style.getMiterLimit();\n\t\t\t\tif (strokeJoin)\n\t\t\t\t\tctx.lineJoin = strokeJoin;\n\t\t\t\tif (strokeCap)\n\t\t\t\t\tctx.lineCap = strokeCap;\n\t\t\t\tif (miterLimit)\n\t\t\t\t\tctx.miterLimit = miterLimit;\n\t\t\t\tif (paper.support.nativeDash) {\n\t\t\t\t\tvar dashArray = style.getDashArray(),\n\t\t\t\t\t\tdashOffset = style.getDashOffset();\n\t\t\t\t\tif (dashArray && dashArray.length) {\n\t\t\t\t\t\tif ('setLineDash' in ctx) {\n\t\t\t\t\t\t\tctx.setLineDash(dashArray);\n\t\t\t\t\t\t\tctx.lineDashOffset = dashOffset;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.mozDash = dashArray;\n\t\t\t\t\t\t\tctx.mozDashOffset = dashOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (style.hasShadow()) {\n\t\t\t\tvar pixelRatio = param.pixelRatio || 1,\n\t\t\t\t\tmx = viewMatrix._shiftless().prepend(\n\t\t\t\t\t\tnew Matrix().scale(pixelRatio, pixelRatio)),\n\t\t\t\t\tblur = mx.transform(new Point(style.getShadowBlur(), 0)),\n\t\t\t\t\toffset = mx.transform(this.getShadowOffset());\n\t\t\t\tctx.shadowColor = style.getShadowColor().toCanvasStyle(ctx);\n\t\t\t\tctx.shadowBlur = blur.getLength();\n\t\t\t\tctx.shadowOffsetX = offset.x;\n\t\t\t\tctx.shadowOffsetY = offset.y;\n\t\t\t}\n\t\t},\n\t\n\t\tdraw: function(ctx, param, parentStrokeMatrix) {\n\t\t\tvar updateVersion = this._updateVersion = this._project._updateVersion;\n\t\t\tif (!this._visible || this._opacity === 0)\n\t\t\t\treturn;\n\t\t\tvar matrices = param.matrices,\n\t\t\t\tviewMatrix = param.viewMatrix,\n\t\t\t\tmatrix = this._matrix,\n\t\t\t\tglobalMatrix = matrices[matrices.length - 1].appended(matrix);\n\t\t\tif (!globalMatrix.isInvertible())\n\t\t\t\treturn;\n\t\n\t\t\tviewMatrix = viewMatrix ? viewMatrix.appended(globalMatrix)\n\t\t\t\t\t: globalMatrix;\n\t\n\t\t\tmatrices.push(globalMatrix);\n\t\t\tif (param.updateMatrix) {\n\t\t\t\tglobalMatrix._updateVersion = updateVersion;\n\t\t\t\tthis._globalMatrix = globalMatrix;\n\t\t\t}\n\t\n\t\t\tvar blendMode = this._blendMode,\n\t\t\t\topacity = this._opacity,\n\t\t\t\tnormalBlend = blendMode === 'normal',\n\t\t\t\tnativeBlend = BlendMode.nativeModes[blendMode],\n\t\t\t\tdirect = normalBlend && opacity === 1\n\t\t\t\t\t\t|| param.dontStart\n\t\t\t\t\t\t|| param.clip\n\t\t\t\t\t\t|| (nativeBlend || normalBlend && opacity < 1)\n\t\t\t\t\t\t\t&& this._canComposite(),\n\t\t\t\tpixelRatio = param.pixelRatio || 1,\n\t\t\t\tmainCtx, itemOffset, prevOffset;\n\t\t\tif (!direct) {\n\t\t\t\tvar bounds = this.getStrokeBounds(viewMatrix);\n\t\t\t\tif (!bounds.width || !bounds.height)\n\t\t\t\t\treturn;\n\t\t\t\tprevOffset = param.offset;\n\t\t\t\titemOffset = param.offset = bounds.getTopLeft().floor();\n\t\t\t\tmainCtx = ctx;\n\t\t\t\tctx = CanvasProvider.getContext(bounds.getSize().ceil().add(1)\n\t\t\t\t\t\t.multiply(pixelRatio));\n\t\t\t\tif (pixelRatio !== 1)\n\t\t\t\t\tctx.scale(pixelRatio, pixelRatio);\n\t\t\t}\n\t\t\tctx.save();\n\t\t\tvar strokeMatrix = parentStrokeMatrix\n\t\t\t\t\t? parentStrokeMatrix.appended(matrix)\n\t\t\t\t\t: this._canScaleStroke && !this.getStrokeScaling(true)\n\t\t\t\t\t\t&& viewMatrix,\n\t\t\t\tclip = !direct && param.clipItem,\n\t\t\t\ttransform = !strokeMatrix || clip;\n\t\t\tif (direct) {\n\t\t\t\tctx.globalAlpha = opacity;\n\t\t\t\tif (nativeBlend)\n\t\t\t\t\tctx.globalCompositeOperation = blendMode;\n\t\t\t} else if (transform) {\n\t\t\t\tctx.translate(-itemOffset.x, -itemOffset.y);\n\t\t\t}\n\t\t\tif (transform) {\n\t\t\t\t(direct ? matrix : viewMatrix).applyToContext(ctx);\n\t\t\t}\n\t\t\tif (clip) {\n\t\t\t\tparam.clipItem.draw(ctx, param.extend({ clip: true }));\n\t\t\t}\n\t\t\tif (strokeMatrix) {\n\t\t\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t\t\t\tvar offset = param.offset;\n\t\t\t\tif (offset)\n\t\t\t\t\tctx.translate(-offset.x, -offset.y);\n\t\t\t}\n\t\t\tthis._draw(ctx, param, viewMatrix, strokeMatrix);\n\t\t\tctx.restore();\n\t\t\tmatrices.pop();\n\t\t\tif (param.clip && !param.dontFinish)\n\t\t\t\tctx.clip();\n\t\t\tif (!direct) {\n\t\t\t\tBlendMode.process(blendMode, ctx, mainCtx, opacity,\n\t\t\t\t\t\titemOffset.subtract(prevOffset).multiply(pixelRatio));\n\t\t\t\tCanvasProvider.release(ctx);\n\t\t\t\tparam.offset = prevOffset;\n\t\t\t}\n\t\t},\n\t\n\t\t_isUpdated: function(updateVersion) {\n\t\t\tvar parent = this._parent;\n\t\t\tif (parent instanceof CompoundPath)\n\t\t\t\treturn parent._isUpdated(updateVersion);\n\t\t\tvar updated = this._updateVersion === updateVersion;\n\t\t\tif (!updated && parent && parent._visible\n\t\t\t\t\t&& parent._isUpdated(updateVersion)) {\n\t\t\t\tthis._updateVersion = updateVersion;\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t\treturn updated;\n\t\t},\n\t\n\t\t_drawSelection: function(ctx, matrix, size, selectionItems, updateVersion) {\n\t\t\tvar selection = this._selection,\n\t\t\t\titemSelected = selection & 1,\n\t\t\t\tboundsSelected = selection & 2\n\t\t\t\t\t\t|| itemSelected && this._selectBounds,\n\t\t\t\tpositionSelected = selection & 4;\n\t\t\tif (!this._drawSelected)\n\t\t\t\titemSelected = false;\n\t\t\tif ((itemSelected || boundsSelected || positionSelected)\n\t\t\t\t\t&& this._isUpdated(updateVersion)) {\n\t\t\t\tvar layer,\n\t\t\t\t\tcolor = this.getSelectedColor(true) || (layer = this.getLayer())\n\t\t\t\t\t\t&& layer.getSelectedColor(true),\n\t\t\t\t\tmx = matrix.appended(this.getGlobalMatrix(true)),\n\t\t\t\t\thalf = size / 2;\n\t\t\t\tctx.strokeStyle = ctx.fillStyle = color\n\t\t\t\t\t\t? color.toCanvasStyle(ctx) : '#009dec';\n\t\t\t\tif (itemSelected)\n\t\t\t\t\tthis._drawSelected(ctx, mx, selectionItems);\n\t\t\t\tif (positionSelected) {\n\t\t\t\t\tvar point = this.getPosition(true),\n\t\t\t\t\t\tx = point.x,\n\t\t\t\t\t\ty = point.y;\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(x, y, half, 0, Math.PI * 2, true);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tvar deltas = [[0, -1], [1, 0], [0, 1], [-1, 0]],\n\t\t\t\t\t\tstart = half,\n\t\t\t\t\t\tend = size + 1;\n\t\t\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\t\t\tvar delta = deltas[i],\n\t\t\t\t\t\t\tdx = delta[0],\n\t\t\t\t\t\t\tdy = delta[1];\n\t\t\t\t\t\tctx.moveTo(x + dx * start, y + dy * start);\n\t\t\t\t\t\tctx.lineTo(x + dx * end, y + dy * end);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (boundsSelected) {\n\t\t\t\t\tvar coords = mx._transformCorners(this.getInternalBounds());\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tfor (var i = 0; i < 8; i++) {\n\t\t\t\t\t\tctx[!i ? 'moveTo' : 'lineTo'](coords[i], coords[++i]);\n\t\t\t\t\t}\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tfor (var i = 0; i < 8; i++) {\n\t\t\t\t\t\tctx.fillRect(coords[i] - half, coords[++i] - half,\n\t\t\t\t\t\t\t\tsize, size);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t_canComposite: function() {\n\t\t\treturn false;\n\t\t}\n\t}, Base.each(['down', 'drag', 'up', 'move'], function(key) {\n\t\tthis['removeOn' + Base.capitalize(key)] = function() {\n\t\t\tvar hash = {};\n\t\t\thash[key] = true;\n\t\t\treturn this.removeOn(hash);\n\t\t};\n\t}, {\n\t\n\t\tremoveOn: function(obj) {\n\t\t\tfor (var name in obj) {\n\t\t\t\tif (obj[name]) {\n\t\t\t\t\tvar key = 'mouse' + name,\n\t\t\t\t\t\tproject = this._project,\n\t\t\t\t\t\tsets = project._removeSets = project._removeSets || {};\n\t\t\t\t\tsets[key] = sets[key] || {};\n\t\t\t\t\tsets[key][this._id] = this;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t}));\n\t\n\tvar Group = Item.extend({\n\t\t_class: 'Group',\n\t\t_selectBounds: false,\n\t\t_selectChildren: true,\n\t\t_serializeFields: {\n\t\t\tchildren: []\n\t\t},\n\t\n\t\tinitialize: function Group(arg) {\n\t\t\tthis._children = [];\n\t\t\tthis._namedChildren = {};\n\t\t\tif (!this._initialize(arg))\n\t\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);\n\t\t},\n\t\n\t\t_changed: function _changed(flags) {\n\t\t\t_changed.base.call(this, flags);\n\t\t\tif (flags & 1026) {\n\t\t\t\tthis._clipItem = undefined;\n\t\t\t}\n\t\t},\n\t\n\t\t_getClipItem: function() {\n\t\t\tvar clipItem = this._clipItem;\n\t\t\tif (clipItem === undefined) {\n\t\t\t\tclipItem = null;\n\t\t\t\tvar children = this._children;\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tif (children[i]._clipMask) {\n\t\t\t\t\t\tclipItem = children[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._clipItem = clipItem;\n\t\t\t}\n\t\t\treturn clipItem;\n\t\t},\n\t\n\t\tisClipped: function() {\n\t\t\treturn !!this._getClipItem();\n\t\t},\n\t\n\t\tsetClipped: function(clipped) {\n\t\t\tvar child = this.getFirstChild();\n\t\t\tif (child)\n\t\t\t\tchild.setClipMask(clipped);\n\t\t},\n\t\n\t\t_getBounds: function _getBounds(matrix, options) {\n\t\t\tvar clipItem = this._getClipItem();\n\t\t\treturn clipItem\n\t\t\t\t? clipItem._getCachedBounds(\n\t\t\t\t\tmatrix && matrix.appended(clipItem._matrix),\n\t\t\t\t\tBase.set({}, options, { stroke: false }))\n\t\t\t\t: _getBounds.base.call(this, matrix, options);\n\t\t},\n\t\n\t\t_hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {\n\t\t\tvar clipItem = this._getClipItem();\n\t\t\treturn (!clipItem || clipItem.contains(point))\n\t\t\t\t\t&& _hitTestChildren.base.call(this, point, options, viewMatrix,\n\t\t\t\t\t\tclipItem);\n\t\t},\n\t\n\t\t_draw: function(ctx, param) {\n\t\t\tvar clip = param.clip,\n\t\t\t\tclipItem = !clip && this._getClipItem();\n\t\t\tparam = param.extend({ clipItem: clipItem, clip: false });\n\t\t\tif (clip) {\n\t\t\t\tctx.beginPath();\n\t\t\t\tparam.dontStart = param.dontFinish = true;\n\t\t\t} else if (clipItem) {\n\t\t\t\tclipItem.draw(ctx, param.extend({ clip: true }));\n\t\t\t}\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tvar item = children[i];\n\t\t\t\tif (item !== clipItem)\n\t\t\t\t\titem.draw(ctx, param);\n\t\t\t}\n\t\t}\n\t});\n\t\n\tvar Layer = Group.extend({\n\t\t_class: 'Layer',\n\t\n\t\tinitialize: function Layer() {\n\t\t\tGroup.apply(this, arguments);\n\t\t},\n\t\n\t\t_getOwner: function() {\n\t\t\treturn this._parent || this._index != null && this._project;\n\t\t},\n\t\n\t\tisInserted: function isInserted() {\n\t\t\treturn this._parent ? isInserted.base.call(this) : this._index != null;\n\t\t},\n\t\n\t\tactivate: function() {\n\t\t\tthis._project._activeLayer = this;\n\t\t},\n\t\n\t\t_hitTestSelf: function() {\n\t\t}\n\t});\n\t\n\tvar Shape = Item.extend({\n\t\t_class: 'Shape',\n\t\t_applyMatrix: false,\n\t\t_canApplyMatrix: false,\n\t\t_canScaleStroke: true,\n\t\t_serializeFields: {\n\t\t\ttype: null,\n\t\t\tsize: null,\n\t\t\tradius: null\n\t\t},\n\t\n\t\tinitialize: function Shape(props) {\n\t\t\tthis._initialize(props);\n\t\t},\n\t\n\t\t_equals: function(item) {\n\t\t\treturn this._type === item._type\n\t\t\t\t&& this._size.equals(item._size)\n\t\t\t\t&& Base.equals(this._radius, item._radius);\n\t\t},\n\t\n\t\tcopyContent: function(source) {\n\t\t\tthis.setType(source._type);\n\t\t\tthis.setSize(source._size);\n\t\t\tthis.setRadius(source._radius);\n\t\t},\n\t\n\t\tgetType: function() {\n\t\t\treturn this._type;\n\t\t},\n\t\n\t\tsetType: function(type) {\n\t\t\tthis._type = type;\n\t\t},\n\t\n\t\tgetShape: '#getType',\n\t\tsetShape: '#setType',\n\t\n\t\tgetSize: function() {\n\t\t\tvar size = this._size;\n\t\t\treturn new LinkedSize(size.width, size.height, this, 'setSize');\n\t\t},\n\t\n\t\tsetSize: function() {\n\t\t\tvar size = Size.read(arguments);\n\t\t\tif (!this._size) {\n\t\t\t\tthis._size = size.clone();\n\t\t\t} else if (!this._size.equals(size)) {\n\t\t\t\tvar type = this._type,\n\t\t\t\t\twidth = size.width,\n\t\t\t\t\theight = size.height;\n\t\t\t\tif (type === 'rectangle') {\n\t\t\t\t\tthis._radius.set(Size.min(this._radius, size.divide(2)));\n\t\t\t\t} else if (type === 'circle') {\n\t\t\t\t\twidth = height = (width + height) / 2;\n\t\t\t\t\tthis._radius = width / 2;\n\t\t\t\t} else if (type === 'ellipse') {\n\t\t\t\t\tthis._radius._set(width / 2, height / 2);\n\t\t\t\t}\n\t\t\t\tthis._size._set(width, height);\n\t\t\t\tthis._changed(9);\n\t\t\t}\n\t\t},\n\t\n\t\tgetRadius: function() {\n\t\t\tvar rad = this._radius;\n\t\t\treturn this._type === 'circle'\n\t\t\t\t\t? rad\n\t\t\t\t\t: new LinkedSize(rad.width, rad.height, this, 'setRadius');\n\t\t},\n\t\n\t\tsetRadius: function(radius) {\n\t\t\tvar type = this._type;\n\t\t\tif (type === 'circle') {\n\t\t\t\tif (radius === this._radius)\n\t\t\t\t\treturn;\n\t\t\t\tvar size = radius * 2;\n\t\t\t\tthis._radius = radius;\n\t\t\t\tthis._size._set(size, size);\n\t\t\t} else {\n\t\t\t\tradius = Size.read(arguments);\n\t\t\t\tif (!this._radius) {\n\t\t\t\t\tthis._radius = radius.clone();\n\t\t\t\t} else {\n\t\t\t\t\tif (this._radius.equals(radius))\n\t\t\t\t\t\treturn;\n\t\t\t\t\tthis._radius.set(radius);\n\t\t\t\t\tif (type === 'rectangle') {\n\t\t\t\t\t\tvar size = Size.max(this._size, radius.multiply(2));\n\t\t\t\t\t\tthis._size.set(size);\n\t\t\t\t\t} else if (type === 'ellipse') {\n\t\t\t\t\t\tthis._size._set(radius.width * 2, radius.height * 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._changed(9);\n\t\t},\n\t\n\t\tisEmpty: function() {\n\t\t\treturn false;\n\t\t},\n\t\n\t\ttoPath: function(insert) {\n\t\t\tvar path = new Path[Base.capitalize(this._type)]({\n\t\t\t\tcenter: new Point(),\n\t\t\t\tsize: this._size,\n\t\t\t\tradius: this._radius,\n\t\t\t\tinsert: false\n\t\t\t});\n\t\t\tpath.copyAttributes(this);\n\t\t\tif (paper.settings.applyMatrix)\n\t\t\t\tpath.setApplyMatrix(true);\n\t\t\tif (insert === undefined || insert)\n\t\t\t\tpath.insertAbove(this);\n\t\t\treturn path;\n\t\t},\n\t\n\t\ttoShape: '#clone',\n\t\n\t\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {\n\t\t\tvar style = this._style,\n\t\t\t\thasFill = style.hasFill(),\n\t\t\t\thasStroke = style.hasStroke(),\n\t\t\t\tdontPaint = param.dontFinish || param.clip,\n\t\t\t\tuntransformed = !strokeMatrix;\n\t\t\tif (hasFill || hasStroke || dontPaint) {\n\t\t\t\tvar type = this._type,\n\t\t\t\t\tradius = this._radius,\n\t\t\t\t\tisCircle = type === 'circle';\n\t\t\t\tif (!param.dontStart)\n\t\t\t\t\tctx.beginPath();\n\t\t\t\tif (untransformed && isCircle) {\n\t\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, true);\n\t\t\t\t} else {\n\t\t\t\t\tvar rx = isCircle ? radius : radius.width,\n\t\t\t\t\t\try = isCircle ? radius : radius.height,\n\t\t\t\t\t\tsize = this._size,\n\t\t\t\t\t\twidth = size.width,\n\t\t\t\t\t\theight = size.height;\n\t\t\t\t\tif (untransformed && type === 'rectangle' && rx === 0 && ry === 0) {\n\t\t\t\t\t\tctx.rect(-width / 2, -height / 2, width, height);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar x = width / 2,\n\t\t\t\t\t\t\ty = height / 2,\n\t\t\t\t\t\t\tkappa = 1 - 0.5522847498307936,\n\t\t\t\t\t\t\tcx = rx * kappa,\n\t\t\t\t\t\t\tcy = ry * kappa,\n\t\t\t\t\t\t\tc = [\n\t\t\t\t\t\t\t\t-x, -y + ry,\n\t\t\t\t\t\t\t\t-x, -y + cy,\n\t\t\t\t\t\t\t\t-x + cx, -y,\n\t\t\t\t\t\t\t\t-x + rx, -y,\n\t\t\t\t\t\t\t\tx - rx, -y,\n\t\t\t\t\t\t\t\tx - cx, -y,\n\t\t\t\t\t\t\t\tx, -y + cy,\n\t\t\t\t\t\t\t\tx, -y + ry,\n\t\t\t\t\t\t\t\tx, y - ry,\n\t\t\t\t\t\t\t\tx, y - cy,\n\t\t\t\t\t\t\t\tx - cx, y,\n\t\t\t\t\t\t\t\tx - rx, y,\n\t\t\t\t\t\t\t\t-x + rx, y,\n\t\t\t\t\t\t\t\t-x + cx, y,\n\t\t\t\t\t\t\t\t-x, y - cy,\n\t\t\t\t\t\t\t\t-x, y - ry\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\tif (strokeMatrix)\n\t\t\t\t\t\t\tstrokeMatrix.transform(c, c, 32);\n\t\t\t\t\t\tctx.moveTo(c[0], c[1]);\n\t\t\t\t\t\tctx.bezierCurveTo(c[2], c[3], c[4], c[5], c[6], c[7]);\n\t\t\t\t\t\tif (x !== rx)\n\t\t\t\t\t\t\tctx.lineTo(c[8], c[9]);\n\t\t\t\t\t\tctx.bezierCurveTo(c[10], c[11], c[12], c[13], c[14], c[15]);\n\t\t\t\t\t\tif (y !== ry)\n\t\t\t\t\t\t\tctx.lineTo(c[16], c[17]);\n\t\t\t\t\t\tctx.bezierCurveTo(c[18], c[19], c[20], c[21], c[22], c[23]);\n\t\t\t\t\t\tif (x !== rx)\n\t\t\t\t\t\t\tctx.lineTo(c[24], c[25]);\n\t\t\t\t\t\tctx.bezierCurveTo(c[26], c[27], c[28], c[29], c[30], c[31]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tctx.closePath();\n\t\t\t}\n\t\t\tif (!dontPaint && (hasFill || hasStroke)) {\n\t\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\t\tif (hasFill) {\n\t\t\t\t\tctx.fill(style.getFillRule());\n\t\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\t\t\t\tif (hasStroke)\n\t\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t},\n\t\n\t\t_canComposite: function() {\n\t\t\treturn !(this.hasFill() && this.hasStroke());\n\t\t},\n\t\n\t\t_getBounds: function(matrix, options) {\n\t\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),\n\t\t\t\tstyle = this._style,\n\t\t\t\tstrokeWidth = options.stroke && style.hasStroke()\n\t\t\t\t\t\t&& style.getStrokeWidth();\n\t\t\tif (matrix)\n\t\t\t\trect = matrix._transformBounds(rect);\n\t\t\treturn strokeWidth\n\t\t\t\t\t? rect.expand(Path._getStrokePadding(strokeWidth,\n\t\t\t\t\t\tthis._getStrokeMatrix(matrix, options)))\n\t\t\t\t\t: rect;\n\t\t}\n\t},\n\tnew function() {\n\t\tfunction getCornerCenter(that, point, expand) {\n\t\t\tvar radius = that._radius;\n\t\t\tif (!radius.isZero()) {\n\t\t\t\tvar halfSize = that._size.divide(2);\n\t\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\t\tvar dir = new Point(i & 1 ? 1 : -1, i > 1 ? 1 : -1),\n\t\t\t\t\t\tcorner = dir.multiply(halfSize),\n\t\t\t\t\t\tcenter = corner.subtract(dir.multiply(radius)),\n\t\t\t\t\t\trect = new Rectangle(corner, center);\n\t\t\t\t\tif ((expand ? rect.expand(expand) : rect).contains(point))\n\t\t\t\t\t\treturn center;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction isOnEllipseStroke(point, radius, padding, quadrant) {\n\t\t\tvar vector = point.divide(radius);\n\t\t\treturn (!quadrant || vector.quadrant === quadrant) &&\n\t\t\t\t\tvector.subtract(vector.normalize()).multiply(radius)\n\t\t\t\t\t\t.divide(padding).length <= 1;\n\t\t}\n\t\n\t\treturn {\n\t\t\t_contains: function _contains(point) {\n\t\t\t\tif (this._type === 'rectangle') {\n\t\t\t\t\tvar center = getCornerCenter(this, point);\n\t\t\t\t\treturn center\n\t\t\t\t\t\t\t? point.subtract(center).divide(this._radius)\n\t\t\t\t\t\t\t\t.getLength() <= 1\n\t\t\t\t\t\t\t: _contains.base.call(this, point);\n\t\t\t\t} else {\n\t\t\t\t\treturn point.divide(this.size).getLength() <= 0.5;\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t_hitTestSelf: function _hitTestSelf(point, options, viewMatrix,\n\t\t\t\t\tstrokeMatrix) {\n\t\t\t\tvar hit = false,\n\t\t\t\t\tstyle = this._style,\n\t\t\t\t\thitStroke = options.stroke && style.hasStroke(),\n\t\t\t\t\thitFill = options.fill && style.hasFill();\n\t\t\t\tif (hitStroke || hitFill) {\n\t\t\t\t\tvar type = this._type,\n\t\t\t\t\t\tradius = this._radius,\n\t\t\t\t\t\tstrokeRadius = hitStroke ? style.getStrokeWidth() / 2 : 0,\n\t\t\t\t\t\tstrokePadding = options._tolerancePadding.add(\n\t\t\t\t\t\t\tPath._getStrokePadding(strokeRadius,\n\t\t\t\t\t\t\t\t!style.getStrokeScaling() && strokeMatrix));\n\t\t\t\t\tif (type === 'rectangle') {\n\t\t\t\t\t\tvar padding = strokePadding.multiply(2),\n\t\t\t\t\t\t\tcenter = getCornerCenter(this, point, padding);\n\t\t\t\t\t\tif (center) {\n\t\t\t\t\t\t\thit = isOnEllipseStroke(point.subtract(center), radius,\n\t\t\t\t\t\t\t\t\tstrokePadding, center.getQuadrant());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),\n\t\t\t\t\t\t\t\touter = rect.expand(padding),\n\t\t\t\t\t\t\t\tinner = rect.expand(padding.negate());\n\t\t\t\t\t\t\thit = outer._containsPoint(point)\n\t\t\t\t\t\t\t\t\t&& !inner._containsPoint(point);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\thit = isOnEllipseStroke(point, radius, strokePadding);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn hit ? new HitResult(hitStroke ? 'stroke' : 'fill', this)\n\t\t\t\t\t\t: _hitTestSelf.base.apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}, {\n\t\n\tstatics: new function() {\n\t\tfunction createShape(type, point, size, radius, args) {\n\t\t\tvar item = new Shape(Base.getNamed(args));\n\t\t\titem._type = type;\n\t\t\titem._size = size;\n\t\t\titem._radius = radius;\n\t\t\treturn item.translate(point);\n\t\t}\n\t\n\t\treturn {\n\t\t\tCircle: function() {\n\t\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\t\tradius = Base.readNamed(arguments, 'radius');\n\t\t\t\treturn createShape('circle', center, new Size(radius * 2), radius,\n\t\t\t\t\t\targuments);\n\t\t\t},\n\t\n\t\t\tRectangle: function() {\n\t\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),\n\t\t\t\t\tradius = Size.min(Size.readNamed(arguments, 'radius'),\n\t\t\t\t\t\t\trect.getSize(true).divide(2));\n\t\t\t\treturn createShape('rectangle', rect.getCenter(true),\n\t\t\t\t\t\trect.getSize(true), radius, arguments);\n\t\t\t},\n\t\n\t\t\tEllipse: function() {\n\t\t\t\tvar ellipse = Shape._readEllipse(arguments),\n\t\t\t\t\tradius = ellipse.radius;\n\t\t\t\treturn createShape('ellipse', ellipse.center, radius.multiply(2),\n\t\t\t\t\t\tradius, arguments);\n\t\t\t},\n\t\n\t\t\t_readEllipse: function(args) {\n\t\t\t\tvar center,\n\t\t\t\t\tradius;\n\t\t\t\tif (Base.hasNamed(args, 'radius')) {\n\t\t\t\t\tcenter = Point.readNamed(args, 'center');\n\t\t\t\t\tradius = Size.readNamed(args, 'radius');\n\t\t\t\t} else {\n\t\t\t\t\tvar rect = Rectangle.readNamed(args, 'rectangle');\n\t\t\t\t\tcenter = rect.getCenter(true);\n\t\t\t\t\tradius = rect.getSize(true).divide(2);\n\t\t\t\t}\n\t\t\t\treturn { center: center, radius: radius };\n\t\t\t}\n\t\t};\n\t}});\n\t\n\tvar Raster = Item.extend({\n\t\t_class: 'Raster',\n\t\t_applyMatrix: false,\n\t\t_canApplyMatrix: false,\n\t\t_boundsOptions: { stroke: false, handle: false },\n\t\t_serializeFields: {\n\t\t\tcrossOrigin: null,\n\t\t\tsource: null\n\t\t},\n\t\t_prioritize: ['crossOrigin'],\n\t\n\t\tinitialize: function Raster(object, position) {\n\t\t\tif (!this._initialize(object,\n\t\t\t\t\tposition !== undefined && Point.read(arguments, 1))) {\n\t\t\t\tvar image = typeof object === 'string'\n\t\t\t\t\t\t? document.getElementById(object) : object;\n\t\t\t\tif (image) {\n\t\t\t\t\tthis.setImage(image);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setSource(object);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this._size) {\n\t\t\t\tthis._size = new Size();\n\t\t\t\tthis._loaded = false;\n\t\t\t}\n\t\t},\n\t\n\t\t_equals: function(item) {\n\t\t\treturn this.getSource() === item.getSource();\n\t\t},\n\t\n\t\tcopyContent: function(source) {\n\t\t\tvar image = source._image,\n\t\t\t\tcanvas = source._canvas;\n\t\t\tif (image) {\n\t\t\t\tthis._setImage(image);\n\t\t\t} else if (canvas) {\n\t\t\t\tvar copyCanvas = CanvasProvider.getCanvas(source._size);\n\t\t\t\tcopyCanvas.getContext('2d').drawImage(canvas, 0, 0);\n\t\t\t\tthis._setImage(copyCanvas);\n\t\t\t}\n\t\t\tthis._crossOrigin = source._crossOrigin;\n\t\t},\n\t\n\t\tgetSize: function() {\n\t\t\tvar size = this._size;\n\t\t\treturn new LinkedSize(size ? size.width : 0, size ? size.height : 0,\n\t\t\t\t\tthis, 'setSize');\n\t\t},\n\t\n\t\tsetSize: function() {\n\t\t\tvar size = Size.read(arguments);\n\t\t\tif (!size.equals(this._size)) {\n\t\t\t\tif (size.width > 0 && size.height > 0) {\n\t\t\t\t\tvar element = this.getElement();\n\t\t\t\t\tthis._setImage(CanvasProvider.getCanvas(size));\n\t\t\t\t\tif (element)\n\t\t\t\t\t\tthis.getContext(true).drawImage(element, 0, 0,\n\t\t\t\t\t\t\t\tsize.width, size.height);\n\t\t\t\t} else {\n\t\t\t\t\tif (this._canvas)\n\t\t\t\t\t\tCanvasProvider.release(this._canvas);\n\t\t\t\t\tthis._size = size.clone();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tgetWidth: function() {\n\t\t\treturn this._size ? this._size.width : 0;\n\t\t},\n\t\n\t\tsetWidth: function(width) {\n\t\t\tthis.setSize(width, this.getHeight());\n\t\t},\n\t\n\t\tgetHeight: function() {\n\t\t\treturn this._size ? this._size.height : 0;\n\t\t},\n\t\n\t\tsetHeight: function(height) {\n\t\t\tthis.setSize(this.getWidth(), height);\n\t\t},\n\t\n\t\tgetLoaded: function() {\n\t\t\treturn this._loaded;\n\t\t},\n\t\n\t\tisEmpty: function() {\n\t\t\tvar size = this._size;\n\t\t\treturn !size || size.width === 0 && size.height === 0;\n\t\t},\n\t\n\t\tgetResolution: function() {\n\t\t\tvar matrix = this._matrix,\n\t\t\t\torig = new Point(0, 0).transform(matrix),\n\t\t\t\tu = new Point(1, 0).transform(matrix).subtract(orig),\n\t\t\t\tv = new Point(0, 1).transform(matrix).subtract(orig);\n\t\t\treturn new Size(\n\t\t\t\t72 / u.getLength(),\n\t\t\t\t72 / v.getLength()\n\t\t\t);\n\t\t},\n\t\n\t\tgetPpi: '#getResolution',\n\t\n\t\tgetImage: function() {\n\t\t\treturn this._image;\n\t\t},\n\t\n\t\tsetImage: function(image) {\n\t\t\tvar that = this;\n\t\n\t\t\tfunction emit(event) {\n\t\t\t\tvar view = that.getView(),\n\t\t\t\t\ttype = event && event.type || 'load';\n\t\t\t\tif (view && that.responds(type)) {\n\t\t\t\t\tpaper = view._scope;\n\t\t\t\t\tthat.emit(type, new Event(event));\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tthis._setImage(image);\n\t\t\tif (this._loaded) {\n\t\t\t\tsetTimeout(emit, 0);\n\t\t\t} else if (image) {\n\t\t\t\tDomEvent.add(image, {\n\t\t\t\t\tload: function(event) {\n\t\t\t\t\t\tthat._setImage(image);\n\t\t\t\t\t\temit(event);\n\t\t\t\t\t},\n\t\t\t\t\terror: emit\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\n\t\t_setImage: function(image) {\n\t\t\tif (this._canvas)\n\t\t\t\tCanvasProvider.release(this._canvas);\n\t\t\tif (image && image.getContext) {\n\t\t\t\tthis._image = null;\n\t\t\t\tthis._canvas = image;\n\t\t\t\tthis._loaded = true;\n\t\t\t} else {\n\t\t\t\tthis._image = image;\n\t\t\t\tthis._canvas = null;\n\t\t\t\tthis._loaded = !!(image && image.src && image.complete);\n\t\t\t}\n\t\t\tthis._size = new Size(\n\t\t\t\t\timage ? image.naturalWidth || image.width : 0,\n\t\t\t\t\timage ? image.naturalHeight || image.height : 0);\n\t\t\tthis._context = null;\n\t\t\tthis._changed(521);\n\t\t},\n\t\n\t\tgetCanvas: function() {\n\t\t\tif (!this._canvas) {\n\t\t\t\tvar ctx = CanvasProvider.getContext(this._size);\n\t\t\t\ttry {\n\t\t\t\t\tif (this._image)\n\t\t\t\t\t\tctx.drawImage(this._image, 0, 0);\n\t\t\t\t\tthis._canvas = ctx.canvas;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tCanvasProvider.release(ctx);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._canvas;\n\t\t},\n\t\n\t\tsetCanvas: '#setImage',\n\t\n\t\tgetContext: function(modify) {\n\t\t\tif (!this._context)\n\t\t\t\tthis._context = this.getCanvas().getContext('2d');\n\t\t\tif (modify) {\n\t\t\t\tthis._image = null;\n\t\t\t\tthis._changed(513);\n\t\t\t}\n\t\t\treturn this._context;\n\t\t},\n\t\n\t\tsetContext: function(context) {\n\t\t\tthis._context = context;\n\t\t},\n\t\n\t\tgetSource: function() {\n\t\t\tvar image = this._image;\n\t\t\treturn image && image.src || this.toDataURL();\n\t\t},\n\t\n\t\tsetSource: function(src) {\n\t\t\tvar image = new self.Image(),\n\t\t\t\tcrossOrigin = this._crossOrigin;\n\t\t\tif (crossOrigin)\n\t\t\t\timage.crossOrigin = crossOrigin;\n\t\t\timage.src = src;\n\t\t\tthis.setImage(image);\n\t\t},\n\t\n\t\tgetCrossOrigin: function() {\n\t\t\tvar image = this._image;\n\t\t\treturn image && image.crossOrigin || this._crossOrigin || '';\n\t\t},\n\t\n\t\tsetCrossOrigin: function(crossOrigin) {\n\t\t\tthis._crossOrigin = crossOrigin;\n\t\t\tvar image = this._image;\n\t\t\tif (image)\n\t\t\t\timage.crossOrigin = crossOrigin;\n\t\t},\n\t\n\t\tgetElement: function() {\n\t\t\treturn this._canvas || this._loaded && this._image;\n\t\t}\n\t}, {\n\t\tbeans: false,\n\t\n\t\tgetSubCanvas: function() {\n\t\t\tvar rect = Rectangle.read(arguments),\n\t\t\t\tctx = CanvasProvider.getContext(rect.getSize());\n\t\t\tctx.drawImage(this.getCanvas(), rect.x, rect.y,\n\t\t\t\t\trect.width, rect.height, 0, 0, rect.width, rect.height);\n\t\t\treturn ctx.canvas;\n\t\t},\n\t\n\t\tgetSubRaster: function() {\n\t\t\tvar rect = Rectangle.read(arguments),\n\t\t\t\traster = new Raster(Item.NO_INSERT);\n\t\t\traster._setImage(this.getSubCanvas(rect));\n\t\t\traster.translate(rect.getCenter().subtract(this.getSize().divide(2)));\n\t\t\traster._matrix.prepend(this._matrix);\n\t\t\traster.insertAbove(this);\n\t\t\treturn raster;\n\t\t},\n\t\n\t\ttoDataURL: function() {\n\t\t\tvar image = this._image,\n\t\t\t\tsrc = image && image.src;\n\t\t\tif (/^data:/.test(src))\n\t\t\t\treturn src;\n\t\t\tvar canvas = this.getCanvas();\n\t\t\treturn canvas ? canvas.toDataURL.apply(canvas, arguments) : null;\n\t\t},\n\t\n\t\tdrawImage: function(image ) {\n\t\t\tvar point = Point.read(arguments, 1);\n\t\t\tthis.getContext(true).drawImage(image, point.x, point.y);\n\t\t},\n\t\n\t\tgetAverageColor: function(object) {\n\t\t\tvar bounds, path;\n\t\t\tif (!object) {\n\t\t\t\tbounds = this.getBounds();\n\t\t\t} else if (object instanceof PathItem) {\n\t\t\t\tpath = object;\n\t\t\t\tbounds = object.getBounds();\n\t\t\t} else if (typeof object === 'object') {\n\t\t\t\tif ('width' in object) {\n\t\t\t\t\tbounds = new Rectangle(object);\n\t\t\t\t} else if ('x' in object) {\n\t\t\t\t\tbounds = new Rectangle(object.x - 0.5, object.y - 0.5, 1, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!bounds)\n\t\t\t\treturn null;\n\t\t\tvar sampleSize = 32,\n\t\t\t\twidth = Math.min(bounds.width, sampleSize),\n\t\t\t\theight = Math.min(bounds.height, sampleSize);\n\t\t\tvar ctx = Raster._sampleContext;\n\t\t\tif (!ctx) {\n\t\t\t\tctx = Raster._sampleContext = CanvasProvider.getContext(\n\t\t\t\t\t\tnew Size(sampleSize));\n\t\t\t} else {\n\t\t\t\tctx.clearRect(0, 0, sampleSize + 1, sampleSize + 1);\n\t\t\t}\n\t\t\tctx.save();\n\t\t\tvar matrix = new Matrix()\n\t\t\t\t\t.scale(width / bounds.width, height / bounds.height)\n\t\t\t\t\t.translate(-bounds.x, -bounds.y);\n\t\t\tmatrix.applyToContext(ctx);\n\t\t\tif (path)\n\t\t\t\tpath.draw(ctx, new Base({ clip: true, matrices: [matrix] }));\n\t\t\tthis._matrix.applyToContext(ctx);\n\t\t\tvar element = this.getElement(),\n\t\t\t\tsize = this._size;\n\t\t\tif (element)\n\t\t\t\tctx.drawImage(element, -size.width / 2, -size.height / 2);\n\t\t\tctx.restore();\n\t\t\tvar pixels = ctx.getImageData(0.5, 0.5, Math.ceil(width),\n\t\t\t\t\tMath.ceil(height)).data,\n\t\t\t\tchannels = [0, 0, 0],\n\t\t\t\ttotal = 0;\n\t\t\tfor (var i = 0, l = pixels.length; i < l; i += 4) {\n\t\t\t\tvar alpha = pixels[i + 3];\n\t\t\t\ttotal += alpha;\n\t\t\t\talpha /= 255;\n\t\t\t\tchannels[0] += pixels[i] * alpha;\n\t\t\t\tchannels[1] += pixels[i + 1] * alpha;\n\t\t\t\tchannels[2] += pixels[i + 2] * alpha;\n\t\t\t}\n\t\t\tfor (var i = 0; i < 3; i++)\n\t\t\t\tchannels[i] /= total;\n\t\t\treturn total ? Color.read(channels) : null;\n\t\t},\n\t\n\t\tgetPixel: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\tvar data = this.getContext().getImageData(point.x, point.y, 1, 1).data;\n\t\t\treturn new Color('rgb', [data[0] / 255, data[1] / 255, data[2] / 255],\n\t\t\t\t\tdata[3] / 255);\n\t\t},\n\t\n\t\tsetPixel: function() {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tcolor = Color.read(arguments),\n\t\t\t\tcomponents = color._convert('rgb'),\n\t\t\t\talpha = color._alpha,\n\t\t\t\tctx = this.getContext(true),\n\t\t\t\timageData = ctx.createImageData(1, 1),\n\t\t\t\tdata = imageData.data;\n\t\t\tdata[0] = components[0] * 255;\n\t\t\tdata[1] = components[1] * 255;\n\t\t\tdata[2] = components[2] * 255;\n\t\t\tdata[3] = alpha != null ? alpha * 255 : 255;\n\t\t\tctx.putImageData(imageData, point.x, point.y);\n\t\t},\n\t\n\t\tcreateImageData: function() {\n\t\t\tvar size = Size.read(arguments);\n\t\t\treturn this.getContext().createImageData(size.width, size.height);\n\t\t},\n\t\n\t\tgetImageData: function() {\n\t\t\tvar rect = Rectangle.read(arguments);\n\t\t\tif (rect.isEmpty())\n\t\t\t\trect = new Rectangle(this._size);\n\t\t\treturn this.getContext().getImageData(rect.x, rect.y,\n\t\t\t\t\trect.width, rect.height);\n\t\t},\n\t\n\t\tsetImageData: function(data ) {\n\t\t\tvar point = Point.read(arguments, 1);\n\t\t\tthis.getContext(true).putImageData(data, point.x, point.y);\n\t\t},\n\t\n\t\t_getBounds: function(matrix, options) {\n\t\t\tvar rect = new Rectangle(this._size).setCenter(0, 0);\n\t\t\treturn matrix ? matrix._transformBounds(rect) : rect;\n\t\t},\n\t\n\t\t_hitTestSelf: function(point) {\n\t\t\tif (this._contains(point)) {\n\t\t\t\tvar that = this;\n\t\t\t\treturn new HitResult('pixel', that, {\n\t\t\t\t\toffset: point.add(that._size.divide(2)).round(),\n\t\t\t\t\tcolor: {\n\t\t\t\t\t\tget: function() {\n\t\t\t\t\t\t\treturn that.getPixel(this.offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\n\t\t_draw: function(ctx) {\n\t\t\tvar element = this.getElement();\n\t\t\tif (element) {\n\t\t\t\tctx.globalAlpha = this._opacity;\n\t\t\t\tctx.drawImage(element,\n\t\t\t\t\t\t-this._size.width / 2, -this._size.height / 2);\n\t\t\t}\n\t\t},\n\t\n\t\t_canComposite: function() {\n\t\t\treturn true;\n\t\t}\n\t});\n\t\n\tvar SymbolItem = Item.extend({\n\t\t_class: 'SymbolItem',\n\t\t_applyMatrix: false,\n\t\t_canApplyMatrix: false,\n\t\t_boundsOptions: { stroke: true },\n\t\t_serializeFields: {\n\t\t\tsymbol: null\n\t\t},\n\t\n\t\tinitialize: function SymbolItem(arg0, arg1) {\n\t\t\tif (!this._initialize(arg0,\n\t\t\t\t\targ1 !== undefined && Point.read(arguments, 1)))\n\t\t\t\tthis.setDefinition(arg0 instanceof SymbolDefinition ?\n\t\t\t\t\t\targ0 : new SymbolDefinition(arg0));\n\t\t},\n\t\n\t\t_equals: function(item) {\n\t\t\treturn this._definition === item._definition;\n\t\t},\n\t\n\t\tcopyContent: function(source) {\n\t\t\tthis.setDefinition(source._definition);\n\t\t},\n\t\n\t\tgetDefinition: function() {\n\t\t\treturn this._definition;\n\t\t},\n\t\n\t\tsetDefinition: function(definition) {\n\t\t\tthis._definition = definition;\n\t\t\tthis._changed(9);\n\t\t},\n\t\n\t\tgetSymbol: '#getDefinition',\n\t\tsetSymbol: '#setDefinition',\n\t\n\t\tisEmpty: function() {\n\t\t\treturn this._definition._item.isEmpty();\n\t\t},\n\t\n\t\t_getBounds: function(matrix, options) {\n\t\t\tvar item = this._definition._item;\n\t\t\treturn item._getCachedBounds(item._matrix.prepended(matrix), options);\n\t\t},\n\t\n\t\t_hitTestSelf: function(point, options, viewMatrix, strokeMatrix) {\n\t\t\tvar res = this._definition._item._hitTest(point, options, viewMatrix);\n\t\t\tif (res)\n\t\t\t\tres.item = this;\n\t\t\treturn res;\n\t\t},\n\t\n\t\t_draw: function(ctx, param) {\n\t\t\tthis._definition._item.draw(ctx, param);\n\t\t}\n\t\n\t});\n\t\n\tvar SymbolDefinition = Base.extend({\n\t\t_class: 'SymbolDefinition',\n\t\n\t\tinitialize: function SymbolDefinition(item, dontCenter) {\n\t\t\tthis._id = UID.get();\n\t\t\tthis.project = paper.project;\n\t\t\tif (item)\n\t\t\t\tthis.setItem(item, dontCenter);\n\t\t},\n\t\n\t\t_serialize: function(options, dictionary) {\n\t\t\treturn dictionary.add(this, function() {\n\t\t\t\treturn Base.serialize([this._class, this._item],\n\t\t\t\t\t\toptions, false, dictionary);\n\t\t\t});\n\t\t},\n\t\n\t\t_changed: function(flags) {\n\t\t\tif (flags & 8)\n\t\t\t\tItem._clearBoundsCache(this);\n\t\t\tif (flags & 1)\n\t\t\t\tthis.project._changed(flags);\n\t\t},\n\t\n\t\tgetItem: function() {\n\t\t\treturn this._item;\n\t\t},\n\t\n\t\tsetItem: function(item, _dontCenter) {\n\t\t\tif (item._symbol)\n\t\t\t\titem = item.clone();\n\t\t\tif (this._item)\n\t\t\t\tthis._item._symbol = null;\n\t\t\tthis._item = item;\n\t\t\titem.remove();\n\t\t\titem.setSelected(false);\n\t\t\tif (!_dontCenter)\n\t\t\t\titem.setPosition(new Point());\n\t\t\titem._symbol = this;\n\t\t\tthis._changed(9);\n\t\t},\n\t\n\t\tgetDefinition: '#getItem',\n\t\tsetDefinition: '#setItem',\n\t\n\t\tplace: function(position) {\n\t\t\treturn new SymbolItem(this, position);\n\t\t},\n\t\n\t\tclone: function() {\n\t\t\treturn new SymbolDefinition(this._item.clone(false));\n\t\t},\n\t\n\t\tequals: function(symbol) {\n\t\t\treturn symbol === this\n\t\t\t\t\t|| symbol && this._item.equals(symbol._item)\n\t\t\t\t\t|| false;\n\t\t}\n\t});\n\t\n\tvar HitResult = Base.extend({\n\t\t_class: 'HitResult',\n\t\n\t\tinitialize: function HitResult(type, item, values) {\n\t\t\tthis.type = type;\n\t\t\tthis.item = item;\n\t\t\tif (values) {\n\t\t\t\tvalues.enumerable = true;\n\t\t\t\tthis.inject(values);\n\t\t\t}\n\t\t},\n\t\n\t\tstatics: {\n\t\t\tgetOptions: function(args) {\n\t\t\t\tvar options = args && Base.read(args);\n\t\t\t\treturn Base.set({\n\t\t\t\t\ttype: null,\n\t\t\t\t\ttolerance: paper.settings.hitTolerance,\n\t\t\t\t\tfill: !options,\n\t\t\t\t\tstroke: !options,\n\t\t\t\t\tsegments: !options,\n\t\t\t\t\thandles: false,\n\t\t\t\t\tends: false,\n\t\t\t\t\tcenter: false,\n\t\t\t\t\tbounds: false,\n\t\t\t\t\tguides: false,\n\t\t\t\t\tselected: false\n\t\t\t\t}, options);\n\t\t\t}\n\t\t}\n\t});\n\t\n\tvar Segment = Base.extend({\n\t\t_class: 'Segment',\n\t\tbeans: true,\n\t\t_selection: 0,\n\t\n\t\tinitialize: function Segment(arg0, arg1, arg2, arg3, arg4, arg5) {\n\t\t\tvar count = arguments.length,\n\t\t\t\tpoint, handleIn, handleOut, selection;\n\t\t\tif (count > 0) {\n\t\t\t\tif (arg0 == null || typeof arg0 === 'object') {\n\t\t\t\t\tif (count === 1 && arg0 && 'point' in arg0) {\n\t\t\t\t\t\tpoint = arg0.point;\n\t\t\t\t\t\thandleIn = arg0.handleIn;\n\t\t\t\t\t\thandleOut = arg0.handleOut;\n\t\t\t\t\t\tselection = arg0.selection;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpoint = arg0;\n\t\t\t\t\t\thandleIn = arg1;\n\t\t\t\t\t\thandleOut = arg2;\n\t\t\t\t\t\tselection = arg3;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpoint = [ arg0, arg1 ];\n\t\t\t\t\thandleIn = arg2 !== undefined ? [ arg2, arg3 ] : null;\n\t\t\t\t\thandleOut = arg4 !== undefined ? [ arg4, arg5 ] : null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnew SegmentPoint(point, this, '_point');\n\t\t\tnew SegmentPoint(handleIn, this, '_handleIn');\n\t\t\tnew SegmentPoint(handleOut, this, '_handleOut');\n\t\t\tif (selection)\n\t\t\t\tthis.setSelection(selection);\n\t\t},\n\t\n\t\t_serialize: function(options, dictionary) {\n\t\t\tvar point = this._point,\n\t\t\t\tselection = this._selection,\n\t\t\t\tobj = selection || this.hasHandles()\n\t\t\t\t\t\t? [point, this._handleIn, this._handleOut]\n\t\t\t\t\t\t: point;\n\t\t\tif (selection)\n\t\t\t\tobj.push(selection);\n\t\t\treturn Base.serialize(obj, options, true, dictionary);\n\t\t},\n\t\n\t\t_changed: function(point) {\n\t\t\tvar path = this._path;\n\t\t\tif (!path)\n\t\t\t\treturn;\n\t\t\tvar curves = path._curves,\n\t\t\t\tindex = this._index,\n\t\t\t\tcurve;\n\t\t\tif (curves) {\n\t\t\t\tif ((!point || point === this._point || point === this._handleIn)\n\t\t\t\t\t\t&& (curve = index > 0 ? curves[index - 1] : path._closed\n\t\t\t\t\t\t\t? curves[curves.length - 1] : null))\n\t\t\t\t\tcurve._changed();\n\t\t\t\tif ((!point || point === this._point || point === this._handleOut)\n\t\t\t\t\t\t&& (curve = curves[index]))\n\t\t\t\t\tcurve._changed();\n\t\t\t}\n\t\t\tpath._changed(25);\n\t\t},\n\t\n\t\tgetPoint: function() {\n\t\t\treturn this._point;\n\t\t},\n\t\n\t\tsetPoint: function() {\n\t\t\tthis._point.set(Point.read(arguments));\n\t\t},\n\t\n\t\tgetHandleIn: function() {\n\t\t\treturn this._handleIn;\n\t\t},\n\t\n\t\tsetHandleIn: function() {\n\t\t\tthis._handleIn.set(Point.read(arguments));\n\t\t},\n\t\n\t\tgetHandleOut: function() {\n\t\t\treturn this._handleOut;\n\t\t},\n\t\n\t\tsetHandleOut: function() {\n\t\t\tthis._handleOut.set(Point.read(arguments));\n\t\t},\n\t\n\t\thasHandles: function() {\n\t\t\treturn !this._handleIn.isZero() || !this._handleOut.isZero();\n\t\t},\n\t\n\t\tclearHandles: function() {\n\t\t\tthis._handleIn._set(0, 0);\n\t\t\tthis._handleOut._set(0, 0);\n\t\t},\n\t\n\t\tgetSelection: function() {\n\t\t\treturn this._selection;\n\t\t},\n\t\n\t\tsetSelection: function(selection) {\n\t\t\tvar oldSelection = this._selection,\n\t\t\t\tpath = this._path;\n\t\t\tthis._selection = selection = selection || 0;\n\t\t\tif (path && selection !== oldSelection) {\n\t\t\t\tpath._updateSelection(this, oldSelection, selection);\n\t\t\t\tpath._changed(129);\n\t\t\t}\n\t\t},\n\t\n\t\tchangeSelection: function(flag, selected) {\n\t\t\tvar selection = this._selection;\n\t\t\tthis.setSelection(selected ? selection | flag : selection & ~flag);\n\t\t},\n\t\n\t\tisSelected: function() {\n\t\t\treturn !!(this._selection & 7);\n\t\t},\n\t\n\t\tsetSelected: function(selected) {\n\t\t\tthis.changeSelection(7, selected);\n\t\t},\n\t\n\t\tgetIndex: function() {\n\t\t\treturn this._index !== undefined ? this._index : null;\n\t\t},\n\t\n\t\tgetPath: function() {\n\t\t\treturn this._path || null;\n\t\t},\n\t\n\t\tgetCurve: function() {\n\t\t\tvar path = this._path,\n\t\t\t\tindex = this._index;\n\t\t\tif (path) {\n\t\t\t\tif (index > 0 && !path._closed\n\t\t\t\t\t\t&& index === path._segments.length - 1)\n\t\t\t\t\tindex--;\n\t\t\t\treturn path.getCurves()[index] || null;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\n\t\tgetLocation: function() {\n\t\t\tvar curve = this.getCurve();\n\t\t\treturn curve\n\t\t\t\t\t? new CurveLocation(curve, this === curve._segment1 ? 0 : 1)\n\t\t\t\t\t: null;\n\t\t},\n\t\n\t\tgetNext: function() {\n\t\t\tvar segments = this._path && this._path._segments;\n\t\t\treturn segments && (segments[this._index + 1]\n\t\t\t\t\t|| this._path._closed && segments[0]) || null;\n\t\t},\n\t\n\t\tsmooth: function(options, _first, _last) {\n\t\t\tvar opts = options || {},\n\t\t\t\ttype = opts.type,\n\t\t\t\tfactor = opts.factor,\n\t\t\t\tprev = this.getPrevious(),\n\t\t\t\tnext = this.getNext(),\n\t\t\t\tp0 = (prev || this)._point,\n\t\t\t\tp1 = this._point,\n\t\t\t\tp2 = (next || this)._point,\n\t\t\t\td1 = p0.getDistance(p1),\n\t\t\t\td2 = p1.getDistance(p2);\n\t\t\tif (!type || type === 'catmull-rom') {\n\t\t\t\tvar a = factor === undefined ? 0.5 : factor,\n\t\t\t\t\td1_a = Math.pow(d1, a),\n\t\t\t\t\td1_2a = d1_a * d1_a,\n\t\t\t\t\td2_a = Math.pow(d2, a),\n\t\t\t\t\td2_2a = d2_a * d2_a;\n\t\t\t\tif (!_first && prev) {\n\t\t\t\t\tvar A = 2 * d2_2a + 3 * d2_a * d1_a + d1_2a,\n\t\t\t\t\t\tN = 3 * d2_a * (d2_a + d1_a);\n\t\t\t\t\tthis.setHandleIn(N !== 0\n\t\t\t\t\t\t? new Point(\n\t\t\t\t\t\t\t(d2_2a * p0._x + A * p1._x - d1_2a * p2._x) / N - p1._x,\n\t\t\t\t\t\t\t(d2_2a * p0._y + A * p1._y - d1_2a * p2._y) / N - p1._y)\n\t\t\t\t\t\t: new Point());\n\t\t\t\t}\n\t\t\t\tif (!_last && next) {\n\t\t\t\t\tvar A = 2 * d1_2a + 3 * d1_a * d2_a + d2_2a,\n\t\t\t\t\t\tN = 3 * d1_a * (d1_a + d2_a);\n\t\t\t\t\tthis.setHandleOut(N !== 0\n\t\t\t\t\t\t? new Point(\n\t\t\t\t\t\t\t(d1_2a * p2._x + A * p1._x - d2_2a * p0._x) / N - p1._x,\n\t\t\t\t\t\t\t(d1_2a * p2._y + A * p1._y - d2_2a * p0._y) / N - p1._y)\n\t\t\t\t\t\t: new Point());\n\t\t\t\t}\n\t\t\t} else if (type === 'geometric') {\n\t\t\t\tif (prev && next) {\n\t\t\t\t\tvar vector = p0.subtract(p2),\n\t\t\t\t\t\tt = factor === undefined ? 0.4 : factor,\n\t\t\t\t\t\tk = t * d1 / (d1 + d2);\n\t\t\t\t\tif (!_first)\n\t\t\t\t\t\tthis.setHandleIn(vector.multiply(k));\n\t\t\t\t\tif (!_last)\n\t\t\t\t\t\tthis.setHandleOut(vector.multiply(k - t));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error('Smoothing method \\'' + type + '\\' not supported.');\n\t\t\t}\n\t\t},\n\t\n\t\tgetPrevious: function() {\n\t\t\tvar segments = this._path && this._path._segments;\n\t\t\treturn segments && (segments[this._index - 1]\n\t\t\t\t\t|| this._path._closed && segments[segments.length - 1]) || null;\n\t\t},\n\t\n\t\tisFirst: function() {\n\t\t\treturn !this._index;\n\t\t},\n\t\n\t\tisLast: function() {\n\t\t\tvar path = this._path;\n\t\t\treturn path && this._index === path._segments.length - 1 || false;\n\t\t},\n\t\n\t\treverse: function() {\n\t\t\tvar handleIn = this._handleIn,\n\t\t\t\thandleOut = this._handleOut,\n\t\t\t\ttmp = handleIn.clone();\n\t\t\thandleIn.set(handleOut);\n\t\t\thandleOut.set(tmp);\n\t\t},\n\t\n\t\treversed: function() {\n\t\t\treturn new Segment(this._point, this._handleOut, this._handleIn);\n\t\t},\n\t\n\t\tremove: function() {\n\t\t\treturn this._path ? !!this._path.removeSegment(this._index) : false;\n\t\t},\n\t\n\t\tclone: function() {\n\t\t\treturn new Segment(this._point, this._handleIn, this._handleOut);\n\t\t},\n\t\n\t\tequals: function(segment) {\n\t\t\treturn segment === this || segment && this._class === segment._class\n\t\t\t\t\t&& this._point.equals(segment._point)\n\t\t\t\t\t&& this._handleIn.equals(segment._handleIn)\n\t\t\t\t\t&& this._handleOut.equals(segment._handleOut)\n\t\t\t\t\t|| false;\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\tvar parts = [ 'point: ' + this._point ];\n\t\t\tif (!this._handleIn.isZero())\n\t\t\t\tparts.push('handleIn: ' + this._handleIn);\n\t\t\tif (!this._handleOut.isZero())\n\t\t\t\tparts.push('handleOut: ' + this._handleOut);\n\t\t\treturn '{ ' + parts.join(', ') + ' }';\n\t\t},\n\t\n\t\ttransform: function(matrix) {\n\t\t\tthis._transformCoordinates(matrix, new Array(6), true);\n\t\t\tthis._changed();\n\t\t},\n\t\n\t\tinterpolate: function(from, to, factor) {\n\t\t\tvar u = 1 - factor,\n\t\t\t\tv = factor,\n\t\t\t\tpoint1 = from._point,\n\t\t\t\tpoint2 = to._point,\n\t\t\t\thandleIn1 = from._handleIn,\n\t\t\t\thandleIn2 = to._handleIn,\n\t\t\t\thandleOut2 = to._handleOut,\n\t\t\t\thandleOut1 = from._handleOut;\n\t\t\tthis._point._set(\n\t\t\t\t\tu * point1._x + v * point2._x,\n\t\t\t\t\tu * point1._y + v * point2._y, true);\n\t\t\tthis._handleIn._set(\n\t\t\t\t\tu * handleIn1._x + v * handleIn2._x,\n\t\t\t\t\tu * handleIn1._y + v * handleIn2._y, true);\n\t\t\tthis._handleOut._set(\n\t\t\t\t\tu * handleOut1._x + v * handleOut2._x,\n\t\t\t\t\tu * handleOut1._y + v * handleOut2._y, true);\n\t\t\tthis._changed();\n\t\t},\n\t\n\t\t_transformCoordinates: function(matrix, coords, change) {\n\t\t\tvar point = this._point,\n\t\t\t\thandleIn = !change || !this._handleIn.isZero()\n\t\t\t\t\t\t? this._handleIn : null,\n\t\t\t\thandleOut = !change || !this._handleOut.isZero()\n\t\t\t\t\t\t? this._handleOut : null,\n\t\t\t\tx = point._x,\n\t\t\t\ty = point._y,\n\t\t\t\ti = 2;\n\t\t\tcoords[0] = x;\n\t\t\tcoords[1] = y;\n\t\t\tif (handleIn) {\n\t\t\t\tcoords[i++] = handleIn._x + x;\n\t\t\t\tcoords[i++] = handleIn._y + y;\n\t\t\t}\n\t\t\tif (handleOut) {\n\t\t\t\tcoords[i++] = handleOut._x + x;\n\t\t\t\tcoords[i++] = handleOut._y + y;\n\t\t\t}\n\t\t\tif (matrix) {\n\t\t\t\tmatrix._transformCoordinates(coords, coords, i / 2);\n\t\t\t\tx = coords[0];\n\t\t\t\ty = coords[1];\n\t\t\t\tif (change) {\n\t\t\t\t\tpoint._x = x;\n\t\t\t\t\tpoint._y = y;\n\t\t\t\t\ti = 2;\n\t\t\t\t\tif (handleIn) {\n\t\t\t\t\t\thandleIn._x = coords[i++] - x;\n\t\t\t\t\t\thandleIn._y = coords[i++] - y;\n\t\t\t\t\t}\n\t\t\t\t\tif (handleOut) {\n\t\t\t\t\t\thandleOut._x = coords[i++] - x;\n\t\t\t\t\t\thandleOut._y = coords[i++] - y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!handleIn) {\n\t\t\t\t\t\tcoords[i++] = x;\n\t\t\t\t\t\tcoords[i++] = y;\n\t\t\t\t\t}\n\t\t\t\t\tif (!handleOut) {\n\t\t\t\t\t\tcoords[i++] = x;\n\t\t\t\t\t\tcoords[i++] = y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn coords;\n\t\t}\n\t});\n\t\n\tvar SegmentPoint = Point.extend({\n\t\tinitialize: function SegmentPoint(point, owner, key) {\n\t\t\tvar x, y,\n\t\t\t\tselected;\n\t\t\tif (!point) {\n\t\t\t\tx = y = 0;\n\t\t\t} else if ((x = point[0]) !== undefined) {\n\t\t\t\ty = point[1];\n\t\t\t} else {\n\t\t\t\tvar pt = point;\n\t\t\t\tif ((x = pt.x) === undefined) {\n\t\t\t\t\tpt = Point.read(arguments);\n\t\t\t\t\tx = pt.x;\n\t\t\t\t}\n\t\t\t\ty = pt.y;\n\t\t\t\tselected = pt.selected;\n\t\t\t}\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._owner = owner;\n\t\t\towner[key] = this;\n\t\t\tif (selected)\n\t\t\t\tthis.setSelected(true);\n\t\t},\n\t\n\t\t_set: function(x, y) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._owner._changed(this);\n\t\t\treturn this;\n\t\t},\n\t\n\t\tgetX: function() {\n\t\t\treturn this._x;\n\t\t},\n\t\n\t\tsetX: function(x) {\n\t\t\tthis._x = x;\n\t\t\tthis._owner._changed(this);\n\t\t},\n\t\n\t\tgetY: function() {\n\t\t\treturn this._y;\n\t\t},\n\t\n\t\tsetY: function(y) {\n\t\t\tthis._y = y;\n\t\t\tthis._owner._changed(this);\n\t\t},\n\t\n\t\tisZero: function() {\n\t\t\treturn Numerical.isZero(this._x) && Numerical.isZero(this._y);\n\t\t},\n\t\n\t\tisSelected: function() {\n\t\t\treturn !!(this._owner._selection & this._getSelection());\n\t\t},\n\t\n\t\tsetSelected: function(selected) {\n\t\t\tthis._owner.changeSelection(this._getSelection(), selected);\n\t\t},\n\t\n\t\t_getSelection: function() {\n\t\t\tvar owner = this._owner;\n\t\t\treturn this === owner._point ? 1\n\t\t\t\t: this === owner._handleIn ? 2\n\t\t\t\t: this === owner._handleOut ? 4\n\t\t\t\t: 0;\n\t\t}\n\t});\n\t\n\tvar Curve = Base.extend({\n\t\t_class: 'Curve',\n\t\n\t\tinitialize: function Curve(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n\t\t\tvar count = arguments.length,\n\t\t\t\tseg1, seg2,\n\t\t\t\tpoint1, point2,\n\t\t\t\thandle1, handle2;\n\t\t\tif (count === 3) {\n\t\t\t\tthis._path = arg0;\n\t\t\t\tseg1 = arg1;\n\t\t\t\tseg2 = arg2;\n\t\t\t} else if (!count) {\n\t\t\t\tseg1 = new Segment();\n\t\t\t\tseg2 = new Segment();\n\t\t\t} else if (count === 1) {\n\t\t\t\tif ('segment1' in arg0) {\n\t\t\t\t\tseg1 = new Segment(arg0.segment1);\n\t\t\t\t\tseg2 = new Segment(arg0.segment2);\n\t\t\t\t} else if ('point1' in arg0) {\n\t\t\t\t\tpoint1 = arg0.point1;\n\t\t\t\t\thandle1 = arg0.handle1;\n\t\t\t\t\thandle2 = arg0.handle2;\n\t\t\t\t\tpoint2 = arg0.point2;\n\t\t\t\t} else if (Array.isArray(arg0)) {\n\t\t\t\t\tpoint1 = [arg0[0], arg0[1]];\n\t\t\t\t\tpoint2 = [arg0[6], arg0[7]];\n\t\t\t\t\thandle1 = [arg0[2] - arg0[0], arg0[3] - arg0[1]];\n\t\t\t\t\thandle2 = [arg0[4] - arg0[6], arg0[5] - arg0[7]];\n\t\t\t\t}\n\t\t\t} else if (count === 2) {\n\t\t\t\tseg1 = new Segment(arg0);\n\t\t\t\tseg2 = new Segment(arg1);\n\t\t\t} else if (count === 4) {\n\t\t\t\tpoint1 = arg0;\n\t\t\t\thandle1 = arg1;\n\t\t\t\thandle2 = arg2;\n\t\t\t\tpoint2 = arg3;\n\t\t\t} else if (count === 8) {\n\t\t\t\tpoint1 = [arg0, arg1];\n\t\t\t\tpoint2 = [arg6, arg7];\n\t\t\t\thandle1 = [arg2 - arg0, arg3 - arg1];\n\t\t\t\thandle2 = [arg4 - arg6, arg5 - arg7];\n\t\t\t}\n\t\t\tthis._segment1 = seg1 || new Segment(point1, null, handle1);\n\t\t\tthis._segment2 = seg2 || new Segment(point2, handle2, null);\n\t\t},\n\t\n\t\t_serialize: function(options, dictionary) {\n\t\t\treturn Base.serialize(this.hasHandles()\n\t\t\t\t\t? [this.getPoint1(), this.getHandle1(), this.getHandle2(),\n\t\t\t\t\t\tthis.getPoint2()]\n\t\t\t\t\t: [this.getPoint1(), this.getPoint2()],\n\t\t\t\t\toptions, true, dictionary);\n\t\t},\n\t\n\t\t_changed: function() {\n\t\t\tthis._length = this._bounds = undefined;\n\t\t},\n\t\n\t\tclone: function() {\n\t\t\treturn new Curve(this._segment1, this._segment2);\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\tvar parts = [ 'point1: ' + this._segment1._point ];\n\t\t\tif (!this._segment1._handleOut.isZero())\n\t\t\t\tparts.push('handle1: ' + this._segment1._handleOut);\n\t\t\tif (!this._segment2._handleIn.isZero())\n\t\t\t\tparts.push('handle2: ' + this._segment2._handleIn);\n\t\t\tparts.push('point2: ' + this._segment2._point);\n\t\t\treturn '{ ' + parts.join(', ') + ' }';\n\t\t},\n\t\n\t\tremove: function() {\n\t\t\tvar removed = false;\n\t\t\tif (this._path) {\n\t\t\t\tvar segment2 = this._segment2,\n\t\t\t\t\thandleOut = segment2._handleOut;\n\t\t\t\tremoved = segment2.remove();\n\t\t\t\tif (removed)\n\t\t\t\t\tthis._segment1._handleOut.set(handleOut);\n\t\t\t}\n\t\t\treturn removed;\n\t\t},\n\t\n\t\tgetPoint1: function() {\n\t\t\treturn this._segment1._point;\n\t\t},\n\t\n\t\tsetPoint1: function() {\n\t\t\tthis._segment1._point.set(Point.read(arguments));\n\t\t},\n\t\n\t\tgetPoint2: function() {\n\t\t\treturn this._segment2._point;\n\t\t},\n\t\n\t\tsetPoint2: function() {\n\t\t\tthis._segment2._point.set(Point.read(arguments));\n\t\t},\n\t\n\t\tgetHandle1: function() {\n\t\t\treturn this._segment1._handleOut;\n\t\t},\n\t\n\t\tsetHandle1: function() {\n\t\t\tthis._segment1._handleOut.set(Point.read(arguments));\n\t\t},\n\t\n\t\tgetHandle2: function() {\n\t\t\treturn this._segment2._handleIn;\n\t\t},\n\t\n\t\tsetHandle2: function() {\n\t\t\tthis._segment2._handleIn.set(Point.read(arguments));\n\t\t},\n\t\n\t\tgetSegment1: function() {\n\t\t\treturn this._segment1;\n\t\t},\n\t\n\t\tgetSegment2: function() {\n\t\t\treturn this._segment2;\n\t\t},\n\t\n\t\tgetPath: function() {\n\t\t\treturn this._path;\n\t\t},\n\t\n\t\tgetIndex: function() {\n\t\t\treturn this._segment1._index;\n\t\t},\n\t\n\t\tgetNext: function() {\n\t\t\tvar curves = this._path && this._path._curves;\n\t\t\treturn curves && (curves[this._segment1._index + 1]\n\t\t\t\t\t|| this._path._closed && curves[0]) || null;\n\t\t},\n\t\n\t\tgetPrevious: function() {\n\t\t\tvar curves = this._path && this._path._curves;\n\t\t\treturn curves && (curves[this._segment1._index - 1]\n\t\t\t\t\t|| this._path._closed && curves[curves.length - 1]) || null;\n\t\t},\n\t\n\t\tisFirst: function() {\n\t\t\treturn !this._segment1._index;\n\t\t},\n\t\n\t\tisLast: function() {\n\t\t\tvar path = this._path;\n\t\t\treturn path && this._segment1._index === path._curves.length - 1\n\t\t\t\t\t|| false;\n\t\t},\n\t\n\t\tisSelected: function() {\n\t\t\treturn this.getPoint1().isSelected()\n\t\t\t\t\t&& this.getHandle2().isSelected()\n\t\t\t\t\t&& this.getHandle2().isSelected()\n\t\t\t\t\t&& this.getPoint2().isSelected();\n\t\t},\n\t\n\t\tsetSelected: function(selected) {\n\t\t\tthis.getPoint1().setSelected(selected);\n\t\t\tthis.getHandle1().setSelected(selected);\n\t\t\tthis.getHandle2().setSelected(selected);\n\t\t\tthis.getPoint2().setSelected(selected);\n\t\t},\n\t\n\t\tgetValues: function(matrix) {\n\t\t\treturn Curve.getValues(this._segment1, this._segment2, matrix);\n\t\t},\n\t\n\t\tgetPoints: function() {\n\t\t\tvar coords = this.getValues(),\n\t\t\t\tpoints = [];\n\t\t\tfor (var i = 0; i < 8; i += 2)\n\t\t\t\tpoints.push(new Point(coords[i], coords[i + 1]));\n\t\t\treturn points;\n\t\t},\n\t\n\t\tgetLength: function() {\n\t\t\tif (this._length == null)\n\t\t\t\tthis._length = Curve.getLength(this.getValues(), 0, 1);\n\t\t\treturn this._length;\n\t\t},\n\t\n\t\tgetArea: function() {\n\t\t\treturn Curve.getArea(this.getValues());\n\t\t},\n\t\n\t\tgetLine: function() {\n\t\t\treturn new Line(this._segment1._point, this._segment2._point);\n\t\t},\n\t\n\t\tgetPart: function(from, to) {\n\t\t\treturn new Curve(Curve.getPart(this.getValues(), from, to));\n\t\t},\n\t\n\t\tgetPartLength: function(from, to) {\n\t\t\treturn Curve.getLength(this.getValues(), from, to);\n\t\t},\n\t\n\t\tgetIntersections: function(curve) {\n\t\t\treturn Curve._getIntersections(this.getValues(),\n\t\t\t\t\tcurve && curve !== this ? curve.getValues() : null,\n\t\t\t\t\tthis, curve, [], {});\n\t\t},\n\t\n\t\tdivideAt: function(location) {\n\t\t\treturn this.divideAtTime(location && location.curve === this\n\t\t\t\t\t? location.time : location);\n\t\t},\n\t\n\t\tdivideAtTime: function(time, _setHandles) {\n\t\t\tvar tMin = 4e-7,\n\t\t\t\ttMax = 1 - tMin,\n\t\t\t\tres = null;\n\t\t\tif (time >= tMin && time <= tMax) {\n\t\t\t\tvar parts = Curve.subdivide(this.getValues(), time),\n\t\t\t\t\tleft = parts[0],\n\t\t\t\t\tright = parts[1],\n\t\t\t\t\tsetHandles = _setHandles || this.hasHandles(),\n\t\t\t\t\tsegment1 = this._segment1,\n\t\t\t\t\tsegment2 = this._segment2,\n\t\t\t\t\tpath = this._path;\n\t\t\t\tif (setHandles) {\n\t\t\t\t\tsegment1._handleOut._set(left[2] - left[0], left[3] - left[1]);\n\t\t\t\t\tsegment2._handleIn._set(right[4] - right[6],right[5] - right[7]);\n\t\t\t\t}\n\t\t\t\tvar x = left[6], y = left[7],\n\t\t\t\t\tsegment = new Segment(new Point(x, y),\n\t\t\t\t\t\t\tsetHandles && new Point(left[4] - x, left[5] - y),\n\t\t\t\t\t\t\tsetHandles && new Point(right[2] - x, right[3] - y));\n\t\t\t\tif (path) {\n\t\t\t\t\tpath.insert(segment1._index + 1, segment);\n\t\t\t\t\tres = this.getNext();\n\t\t\t\t} else {\n\t\t\t\t\tthis._segment2 = segment;\n\t\t\t\t\tthis._changed();\n\t\t\t\t\tres = new Curve(segment, segment2);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\n\t\tsplitAt: function(location) {\n\t\t\treturn this._path ? this._path.splitAt(location) : null;\n\t\t},\n\t\n\t\tsplitAtTime: function(t) {\n\t\t\treturn this.splitAt(this.getLocationAtTime(t));\n\t\t},\n\t\n\t\tdivide: function(offset, isTime) {\n\t\t\treturn this.divideAtTime(offset === undefined ? 0.5 : isTime ? offset\n\t\t\t\t\t: this.getTimeAt(offset));\n\t\t},\n\t\n\t\tsplit: function(offset, isTime) {\n\t\t\treturn this.splitAtTime(offset === undefined ? 0.5 : isTime ? offset\n\t\t\t\t\t: this.getTimeAt(offset));\n\t\t},\n\t\n\t\treversed: function() {\n\t\t\treturn new Curve(this._segment2.reversed(), this._segment1.reversed());\n\t\t},\n\t\n\t\tclearHandles: function() {\n\t\t\tthis._segment1._handleOut._set(0, 0);\n\t\t\tthis._segment2._handleIn._set(0, 0);\n\t\t},\n\t\n\tstatics: {\n\t\tgetValues: function(segment1, segment2, matrix, straight) {\n\t\t\tvar p1 = segment1._point,\n\t\t\t\th1 = segment1._handleOut,\n\t\t\t\th2 = segment2._handleIn,\n\t\t\t\tp2 = segment2._point,\n\t\t\t\tx1 = p1.x, y1 = p1.y,\n\t\t\t\tx2 = p2.x, y2 = p2.y,\n\t\t\t\tvalues = straight\n\t\t\t\t\t? [ x1, y1, x1, y1, x2, y2, x2, y2 ]\n\t\t\t\t\t: [\n\t\t\t\t\t\tx1, y1,\n\t\t\t\t\t\tx1 + h1._x, y1 + h1._y,\n\t\t\t\t\t\tx2 + h2._x, y2 + h2._y,\n\t\t\t\t\t\tx2, y2\n\t\t\t\t\t];\n\t\t\tif (matrix)\n\t\t\t\tmatrix._transformCoordinates(values, values, 4);\n\t\t\treturn values;\n\t\t},\n\t\n\t\tsubdivide: function(v, t) {\n\t\t\tvar p1x = v[0], p1y = v[1],\n\t\t\t\tc1x = v[2], c1y = v[3],\n\t\t\t\tc2x = v[4], c2y = v[5],\n\t\t\t\tp2x = v[6], p2y = v[7];\n\t\t\tif (t === undefined)\n\t\t\t\tt = 0.5;\n\t\t\tvar u = 1 - t,\n\t\t\t\tp3x = u * p1x + t * c1x, p3y = u * p1y + t * c1y,\n\t\t\t\tp4x = u * c1x + t * c2x, p4y = u * c1y + t * c2y,\n\t\t\t\tp5x = u * c2x + t * p2x, p5y = u * c2y + t * p2y,\n\t\t\t\tp6x = u * p3x + t * p4x, p6y = u * p3y + t * p4y,\n\t\t\t\tp7x = u * p4x + t * p5x, p7y = u * p4y + t * p5y,\n\t\t\t\tp8x = u * p6x + t * p7x, p8y = u * p6y + t * p7y;\n\t\t\treturn [\n\t\t\t\t[p1x, p1y, p3x, p3y, p6x, p6y, p8x, p8y],\n\t\t\t\t[p8x, p8y, p7x, p7y, p5x, p5y, p2x, p2y]\n\t\t\t];\n\t\t},\n\t\n\t\tgetMonoCurves: function(v, dir) {\n\t\t\tvar curves = [],\n\t\t\t\tio = dir ? 0 : 1,\n\t\t\t\to0 = v[io],\n\t\t\t\to1 = v[io + 2],\n\t\t\t\to2 = v[io + 4],\n\t\t\t\to3 = v[io + 6];\n\t\t\tif ((o0 >= o1) === (o1 >= o2) && (o1 >= o2) === (o2 >= o3)\n\t\t\t\t\t|| Curve.isStraight(v)) {\n\t\t\t\tcurves.push(v);\n\t\t\t} else {\n\t\t\t\tvar a = 3 * (o1 - o2) - o0 + o3,\n\t\t\t\t\tb = 2 * (o0 + o2) - 4 * o1,\n\t\t\t\t\tc = o1 - o0,\n\t\t\t\t\ttMin = 4e-7,\n\t\t\t\t\ttMax = 1 - tMin,\n\t\t\t\t\troots = [],\n\t\t\t\t\tn = Numerical.solveQuadratic(a, b, c, roots, tMin, tMax);\n\t\t\t\tif (!n) {\n\t\t\t\t\tcurves.push(v);\n\t\t\t\t} else {\n\t\t\t\t\troots.sort();\n\t\t\t\t\tvar t = roots[0],\n\t\t\t\t\t\tparts = Curve.subdivide(v, t);\n\t\t\t\t\tcurves.push(parts[0]);\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tt = (roots[1] - t) / (1 - t);\n\t\t\t\t\t\tparts = Curve.subdivide(parts[1], t);\n\t\t\t\t\t\tcurves.push(parts[0]);\n\t\t\t\t\t}\n\t\t\t\t\tcurves.push(parts[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn curves;\n\t\t},\n\t\n\t\tsolveCubic: function (v, coord, val, roots, min, max) {\n\t\t\tvar p1 = v[coord],\n\t\t\t\tc1 = v[coord + 2],\n\t\t\t\tc2 = v[coord + 4],\n\t\t\t\tp2 = v[coord + 6],\n\t\t\t\tres = 0;\n\t\t\tif (  !(p1 < val && p2 < val && c1 < val && c2 < val ||\n\t\t\t\t\tp1 > val && p2 > val && c1 > val && c2 > val)) {\n\t\t\t\tvar c = 3 * (c1 - p1),\n\t\t\t\t\tb = 3 * (c2 - c1) - c,\n\t\t\t\t\ta = p2 - p1 - c - b;\n\t\t\t\tres = Numerical.solveCubic(a, b, c, p1 - val, roots, min, max);\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\n\t\tgetTimeOf: function(v, point) {\n\t\t\tvar p1 = new Point(v[0], v[1]),\n\t\t\t\tp2 = new Point(v[6], v[7]),\n\t\t\t\tepsilon = 1e-12,\n\t\t\t\tt = point.isClose(p1, epsilon) ? 0\n\t\t\t\t  : point.isClose(p2, epsilon) ? 1\n\t\t\t\t  : null;\n\t\t\tif (t !== null)\n\t\t\t\treturn t;\n\t\t\tvar coords = [point.x, point.y],\n\t\t\t\troots = [],\n\t\t\t\tgeomEpsilon = 1e-7;\n\t\t\tfor (var c = 0; c < 2; c++) {\n\t\t\t\tvar count = Curve.solveCubic(v, c, coords[c], roots, 0, 1);\n\t\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\t\tt = roots[i];\n\t\t\t\t\tif (point.isClose(Curve.getPoint(v, t), geomEpsilon))\n\t\t\t\t\t\treturn t;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn point.isClose(p1, geomEpsilon) ? 0\n\t\t\t\t : point.isClose(p2, geomEpsilon) ? 1\n\t\t\t\t : null;\n\t\t},\n\t\n\t\tgetNearestTime: function(v, point) {\n\t\t\tif (Curve.isStraight(v)) {\n\t\t\t\tvar p1x = v[0], p1y = v[1],\n\t\t\t\t\tp2x = v[6], p2y = v[7],\n\t\t\t\t\tvx = p2x - p1x, vy = p2y - p1y,\n\t\t\t\t\tdet = vx * vx + vy * vy;\n\t\t\t\tif (det === 0)\n\t\t\t\t\treturn 0;\n\t\t\t\tvar u = ((point.x - p1x) * vx + (point.y - p1y) * vy) / det;\n\t\t\t\treturn u < 1e-12 ? 0\n\t\t\t\t\t : u > 0.999999999999 ? 1\n\t\t\t\t\t : Curve.getTimeOf(v,\n\t\t\t\t\t\tnew Point(p1x + u * vx, p1y + u * vy));\n\t\t\t}\n\t\n\t\t\tvar count = 100,\n\t\t\t\tminDist = Infinity,\n\t\t\t\tminT = 0;\n\t\n\t\t\tfunction refine(t) {\n\t\t\t\tif (t >= 0 && t <= 1) {\n\t\t\t\t\tvar dist = point.getDistance(Curve.getPoint(v, t), true);\n\t\t\t\t\tif (dist < minDist) {\n\t\t\t\t\t\tminDist = dist;\n\t\t\t\t\t\tminT = t;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t\trefine(i / count);\n\t\n\t\t\tvar step = 1 / (count * 2);\n\t\t\twhile (step > 4e-7) {\n\t\t\t\tif (!refine(minT - step) && !refine(minT + step))\n\t\t\t\t\tstep /= 2;\n\t\t\t}\n\t\t\treturn minT;\n\t\t},\n\t\n\t\tgetPart: function(v, from, to) {\n\t\t\tvar flip = from > to;\n\t\t\tif (flip) {\n\t\t\t\tvar tmp = from;\n\t\t\t\tfrom = to;\n\t\t\t\tto = tmp;\n\t\t\t}\n\t\t\tif (from > 0)\n\t\t\t\tv = Curve.subdivide(v, from)[1];\n\t\t\tif (to < 1)\n\t\t\t\tv = Curve.subdivide(v, (to - from) / (1 - from))[0];\n\t\t\treturn flip\n\t\t\t\t\t? [v[6], v[7], v[4], v[5], v[2], v[3], v[0], v[1]]\n\t\t\t\t\t: v;\n\t\t},\n\t\n\t\tisFlatEnough: function(v, flatness) {\n\t\t\tvar p1x = v[0], p1y = v[1],\n\t\t\t\tc1x = v[2], c1y = v[3],\n\t\t\t\tc2x = v[4], c2y = v[5],\n\t\t\t\tp2x = v[6], p2y = v[7],\n\t\t\t\tux = 3 * c1x - 2 * p1x - p2x,\n\t\t\t\tuy = 3 * c1y - 2 * p1y - p2y,\n\t\t\t\tvx = 3 * c2x - 2 * p2x - p1x,\n\t\t\t\tvy = 3 * c2y - 2 * p2y - p1y;\n\t\t\treturn Math.max(ux * ux, vx * vx) + Math.max(uy * uy, vy * vy)\n\t\t\t\t\t<= 16 * flatness * flatness;\n\t\t},\n\t\n\t\tgetArea: function(v) {\n\t\t\tvar p1x = v[0], p1y = v[1],\n\t\t\t\tc1x = v[2], c1y = v[3],\n\t\t\t\tc2x = v[4], c2y = v[5],\n\t\t\t\tp2x = v[6], p2y = v[7];\n\t\t\treturn 3 * ((p2y - p1y) * (c1x + c2x) - (p2x - p1x) * (c1y + c2y)\n\t\t\t\t\t+ c1y * (p1x - c2x) - c1x * (p1y - c2y)\n\t\t\t\t\t+ p2y * (c2x + p1x / 3) - p2x * (c2y + p1y / 3)) / 20;\n\t\t},\n\t\n\t\tgetBounds: function(v) {\n\t\t\tvar min = v.slice(0, 2),\n\t\t\t\tmax = min.slice(),\n\t\t\t\troots = [0, 0];\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t\tCurve._addBounds(v[i], v[i + 2], v[i + 4], v[i + 6],\n\t\t\t\t\t\ti, 0, min, max, roots);\n\t\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\t\t},\n\t\n\t\t_addBounds: function(v0, v1, v2, v3, coord, padding, min, max, roots) {\n\t\t\tfunction add(value, padding) {\n\t\t\t\tvar left = value - padding,\n\t\t\t\t\tright = value + padding;\n\t\t\t\tif (left < min[coord])\n\t\t\t\t\tmin[coord] = left;\n\t\t\t\tif (right > max[coord])\n\t\t\t\t\tmax[coord] = right;\n\t\t\t}\n\t\n\t\t\tpadding /= 2;\n\t\t\tvar minPad = min[coord] - padding,\n\t\t\t\tmaxPad = max[coord] + padding;\n\t\t\tif (    v0 < minPad || v1 < minPad || v2 < minPad || v3 < minPad ||\n\t\t\t\t\tv0 > maxPad || v1 > maxPad || v2 > maxPad || v3 > maxPad) {\n\t\t\t\tif (v1 < v0 != v1 < v3 && v2 < v0 != v2 < v3) {\n\t\t\t\t\tadd(v0, padding);\n\t\t\t\t\tadd(v3, padding);\n\t\t\t\t} else {\n\t\t\t\t\tvar a = 3 * (v1 - v2) - v0 + v3,\n\t\t\t\t\t\tb = 2 * (v0 + v2) - 4 * v1,\n\t\t\t\t\t\tc = v1 - v0,\n\t\t\t\t\t\tcount = Numerical.solveQuadratic(a, b, c, roots),\n\t\t\t\t\t\ttMin = 4e-7,\n\t\t\t\t\t\ttMax = 1 - tMin;\n\t\t\t\t\tadd(v3, 0);\n\t\t\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\t\t\tvar t = roots[i],\n\t\t\t\t\t\t\tu = 1 - t;\n\t\t\t\t\t\tif (tMin < t && t < tMax)\n\t\t\t\t\t\t\tadd(u * u * u * v0\n\t\t\t\t\t\t\t\t+ 3 * u * u * t * v1\n\t\t\t\t\t\t\t\t+ 3 * u * t * t * v2\n\t\t\t\t\t\t\t\t+ t * t * t * v3,\n\t\t\t\t\t\t\t\tpadding);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}}, Base.each(\n\t\t['getBounds', 'getStrokeBounds', 'getHandleBounds'],\n\t\tfunction(name) {\n\t\t\tthis[name] = function() {\n\t\t\t\tif (!this._bounds)\n\t\t\t\t\tthis._bounds = {};\n\t\t\t\tvar bounds = this._bounds[name];\n\t\t\t\tif (!bounds) {\n\t\t\t\t\tbounds = this._bounds[name] = Path[name](\n\t\t\t\t\t\t\t[this._segment1, this._segment2], false, this._path);\n\t\t\t\t}\n\t\t\t\treturn bounds.clone();\n\t\t\t};\n\t\t},\n\t{\n\t\n\t}), Base.each({\n\t\tisStraight: function(l, h1, h2) {\n\t\t\tif (h1.isZero() && h2.isZero()) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tvar v = l.getVector(),\n\t\t\t\t\tepsilon = 1e-7;\n\t\t\t\tif (v.isZero()) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (l.getDistance(h1) < epsilon\n\t\t\t\t\t\t&& l.getDistance(h2) < epsilon) {\n\t\t\t\t\tvar div = v.dot(v),\n\t\t\t\t\t\tp1 = v.dot(h1) / div,\n\t\t\t\t\t\tp2 = v.dot(h2) / div;\n\t\t\t\t\treturn p1 >= 0 && p1 <= 1 && p2 <= 0 && p2 >= -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\n\t\tisLinear: function(l, h1, h2) {\n\t\t\tvar third = l.getVector().divide(3);\n\t\t\treturn h1.equals(third) && h2.negate().equals(third);\n\t\t}\n\t}, function(test, name) {\n\t\tthis[name] = function() {\n\t\t\tvar seg1 = this._segment1,\n\t\t\t\tseg2 = this._segment2;\n\t\t\treturn test(new Line(seg1._point, seg2._point),\n\t\t\t\t\tseg1._handleOut, seg2._handleIn);\n\t\t};\n\t\n\t\tthis.statics[name] = function(v) {\n\t\t\tvar p1x = v[0], p1y = v[1],\n\t\t\t\tp2x = v[6], p2y = v[7];\n\t\t\treturn test(new Line(p1x, p1y, p2x, p2y),\n\t\t\t\t\tnew Point(v[2] - p1x, v[3] - p1y),\n\t\t\t\t\tnew Point(v[4] - p2x, v[5] - p2y));\n\t\t};\n\t}, {\n\t\tstatics: {},\n\t\n\t\thasHandles: function() {\n\t\t\treturn !this._segment1._handleOut.isZero()\n\t\t\t\t\t|| !this._segment2._handleIn.isZero();\n\t\t},\n\t\n\t\tisCollinear: function(curve) {\n\t\t\treturn curve && this.isStraight() && curve.isStraight()\n\t\t\t\t\t&& this.getLine().isCollinear(curve.getLine());\n\t\t},\n\t\n\t\tisHorizontal: function() {\n\t\t\treturn this.isStraight() && Math.abs(this.getTangentAtTime(0.5).y)\n\t\t\t\t\t< 1e-8;\n\t\t},\n\t\n\t\tisVertical: function() {\n\t\t\treturn this.isStraight() && Math.abs(this.getTangentAtTime(0.5).x)\n\t\t\t\t\t< 1e-8;\n\t\t}\n\t}), {\n\t\tbeans: false,\n\t\n\t\tgetLocationAt: function(offset, _isTime) {\n\t\t\treturn this.getLocationAtTime(\n\t\t\t\t\t_isTime ? offset : this.getTimeAt(offset));\n\t\t},\n\t\n\t\tgetLocationAtTime: function(t) {\n\t\t\treturn t != null && t >= 0 && t <= 1\n\t\t\t\t\t? new CurveLocation(this, t)\n\t\t\t\t\t: null;\n\t\t},\n\t\n\t\tgetTimeAt: function(offset, start) {\n\t\t\treturn Curve.getTimeAt(this.getValues(), offset, start);\n\t\t},\n\t\n\t\tgetParameterAt: '#getTimeAt',\n\t\n\t\tgetOffsetAtTime: function(t) {\n\t\t\treturn this.getPartLength(0, t);\n\t\t},\n\t\n\t\tgetLocationOf: function() {\n\t\t\treturn this.getLocationAtTime(this.getTimeOf(Point.read(arguments)));\n\t\t},\n\t\n\t\tgetOffsetOf: function() {\n\t\t\tvar loc = this.getLocationOf.apply(this, arguments);\n\t\t\treturn loc ? loc.getOffset() : null;\n\t\t},\n\t\n\t\tgetTimeOf: function() {\n\t\t\treturn Curve.getTimeOf(this.getValues(), Point.read(arguments));\n\t\t},\n\t\n\t\tgetParameterOf: '#getTimeOf',\n\t\n\t\tgetNearestLocation: function() {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tvalues = this.getValues(),\n\t\t\t\tt = Curve.getNearestTime(values, point),\n\t\t\t\tpt = Curve.getPoint(values, t);\n\t\t\treturn new CurveLocation(this, t, pt, null, point.getDistance(pt));\n\t\t},\n\t\n\t\tgetNearestPoint: function() {\n\t\t\tvar loc = this.getNearestLocation.apply(this, arguments);\n\t\t\treturn loc ? loc.getPoint() : loc;\n\t\t}\n\t\n\t},\n\tnew function() {\n\t\tvar methods = ['getPoint', 'getTangent', 'getNormal', 'getWeightedTangent',\n\t\t\t'getWeightedNormal', 'getCurvature'];\n\t\treturn Base.each(methods,\n\t\t\tfunction(name) {\n\t\t\t\tthis[name + 'At'] = function(location, _isTime) {\n\t\t\t\t\tvar values = this.getValues();\n\t\t\t\t\treturn Curve[name](values, _isTime ? location\n\t\t\t\t\t\t\t: Curve.getTimeAt(values, location));\n\t\t\t\t};\n\t\n\t\t\t\tthis[name + 'AtTime'] = function(time) {\n\t\t\t\t\treturn Curve[name](this.getValues(), time);\n\t\t\t\t};\n\t\t\t}, {\n\t\t\t\tstatics: {\n\t\t\t\t\t_evaluateMethods: methods\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t},\n\tnew function() {\n\t\n\t\tfunction getLengthIntegrand(v) {\n\t\t\tvar p1x = v[0], p1y = v[1],\n\t\t\t\tc1x = v[2], c1y = v[3],\n\t\t\t\tc2x = v[4], c2y = v[5],\n\t\t\t\tp2x = v[6], p2y = v[7],\n\t\n\t\t\t\tax = 9 * (c1x - c2x) + 3 * (p2x - p1x),\n\t\t\t\tbx = 6 * (p1x + c2x) - 12 * c1x,\n\t\t\t\tcx = 3 * (c1x - p1x),\n\t\n\t\t\t\tay = 9 * (c1y - c2y) + 3 * (p2y - p1y),\n\t\t\t\tby = 6 * (p1y + c2y) - 12 * c1y,\n\t\t\t\tcy = 3 * (c1y - p1y);\n\t\n\t\t\treturn function(t) {\n\t\t\t\tvar dx = (ax * t + bx) * t + cx,\n\t\t\t\t\tdy = (ay * t + by) * t + cy;\n\t\t\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t\t\t};\n\t\t}\n\t\n\t\tfunction getIterations(a, b) {\n\t\t\treturn Math.max(2, Math.min(16, Math.ceil(Math.abs(b - a) * 32)));\n\t\t}\n\t\n\t\tfunction evaluate(v, t, type, normalized) {\n\t\t\tif (t == null || t < 0 || t > 1)\n\t\t\t\treturn null;\n\t\t\tvar p1x = v[0], p1y = v[1],\n\t\t\t\tc1x = v[2], c1y = v[3],\n\t\t\t\tc2x = v[4], c2y = v[5],\n\t\t\t\tp2x = v[6], p2y = v[7],\n\t\t\t\tisZero = Numerical.isZero;\n\t\t\tif (isZero(c1x - p1x) && isZero(c1y - p1y)) {\n\t\t\t\tc1x = p1x;\n\t\t\t\tc1y = p1y;\n\t\t\t}\n\t\t\tif (isZero(c2x - p2x) && isZero(c2y - p2y)) {\n\t\t\t\tc2x = p2x;\n\t\t\t\tc2y = p2y;\n\t\t\t}\n\t\t\tvar cx = 3 * (c1x - p1x),\n\t\t\t\tbx = 3 * (c2x - c1x) - cx,\n\t\t\t\tax = p2x - p1x - cx - bx,\n\t\t\t\tcy = 3 * (c1y - p1y),\n\t\t\t\tby = 3 * (c2y - c1y) - cy,\n\t\t\t\tay = p2y - p1y - cy - by,\n\t\t\t\tx, y;\n\t\t\tif (type === 0) {\n\t\t\t\tx = t === 0 ? p1x : t === 1 ? p2x\n\t\t\t\t\t\t: ((ax * t + bx) * t + cx) * t + p1x;\n\t\t\t\ty = t === 0 ? p1y : t === 1 ? p2y\n\t\t\t\t\t\t: ((ay * t + by) * t + cy) * t + p1y;\n\t\t\t} else {\n\t\t\t\tvar tMin = 4e-7,\n\t\t\t\t\ttMax = 1 - tMin;\n\t\t\t\tif (t < tMin) {\n\t\t\t\t\tx = cx;\n\t\t\t\t\ty = cy;\n\t\t\t\t} else if (t > tMax) {\n\t\t\t\t\tx = 3 * (p2x - c2x);\n\t\t\t\t\ty = 3 * (p2y - c2y);\n\t\t\t\t} else {\n\t\t\t\t\tx = (3 * ax * t + 2 * bx) * t + cx;\n\t\t\t\t\ty = (3 * ay * t + 2 * by) * t + cy;\n\t\t\t\t}\n\t\t\t\tif (normalized) {\n\t\t\t\t\tif (x === 0 && y === 0 && (t < tMin || t > tMax)) {\n\t\t\t\t\t\tx = c2x - c1x;\n\t\t\t\t\t\ty = c2y - c1y;\n\t\t\t\t\t}\n\t\t\t\t\tvar len = Math.sqrt(x * x + y * y);\n\t\t\t\t\tif (len) {\n\t\t\t\t\t\tx /= len;\n\t\t\t\t\t\ty /= len;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (type === 3) {\n\t\t\t\t\tvar x2 = 6 * ax * t + 2 * bx,\n\t\t\t\t\t\ty2 = 6 * ay * t + 2 * by,\n\t\t\t\t\t\td = Math.pow(x * x + y * y, 3 / 2);\n\t\t\t\t\tx = d !== 0 ? (x * y2 - y * x2) / d : 0;\n\t\t\t\t\ty = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn type === 2 ? new Point(y, -x) : new Point(x, y);\n\t\t}\n\t\n\t\treturn { statics: {\n\t\n\t\t\tgetLength: function(v, a, b, ds) {\n\t\t\t\tif (a === undefined)\n\t\t\t\t\ta = 0;\n\t\t\t\tif (b === undefined)\n\t\t\t\t\tb = 1;\n\t\t\t\tif (Curve.isStraight(v)) {\n\t\t\t\t\tvar c = v;\n\t\t\t\t\tif (b < 1) {\n\t\t\t\t\t\tc = Curve.subdivide(c, b)[0];\n\t\t\t\t\t\ta /= b;\n\t\t\t\t\t}\n\t\t\t\t\tif (a > 0) {\n\t\t\t\t\t\tc = Curve.subdivide(c, a)[1];\n\t\t\t\t\t}\n\t\t\t\t\tvar dx = c[6] - c[0],\n\t\t\t\t\t\tdy = c[7] - c[1];\n\t\t\t\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t}\n\t\t\t\treturn Numerical.integrate(ds || getLengthIntegrand(v), a, b,\n\t\t\t\t\t\tgetIterations(a, b));\n\t\t\t},\n\t\n\t\t\tgetTimeAt: function(v, offset, start) {\n\t\t\t\tif (start === undefined)\n\t\t\t\t\tstart = offset < 0 ? 1 : 0;\n\t\t\t\tif (offset === 0)\n\t\t\t\t\treturn start;\n\t\t\t\tvar abs = Math.abs,\n\t\t\t\t\tepsilon = 1e-12,\n\t\t\t\t\tforward = offset > 0,\n\t\t\t\t\ta = forward ? start : 0,\n\t\t\t\t\tb = forward ? 1 : start,\n\t\t\t\t\tds = getLengthIntegrand(v),\n\t\t\t\t\trangeLength = Curve.getLength(v, a, b, ds),\n\t\t\t\t\tdiff = abs(offset) - rangeLength;\n\t\t\t\tif (abs(diff) < epsilon) {\n\t\t\t\t\treturn forward ? b : a;\n\t\t\t\t} else if (diff > epsilon) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tvar guess = offset / rangeLength,\n\t\t\t\t\tlength = 0;\n\t\t\t\tfunction f(t) {\n\t\t\t\t\tlength += Numerical.integrate(ds, start, t,\n\t\t\t\t\t\t\tgetIterations(start, t));\n\t\t\t\t\tstart = t;\n\t\t\t\t\treturn length - offset;\n\t\t\t\t}\n\t\t\t\treturn Numerical.findRoot(f, ds, start + guess, a, b, 32,\n\t\t\t\t\t\t1e-12);\n\t\t\t},\n\t\n\t\t\tgetPoint: function(v, t) {\n\t\t\t\treturn evaluate(v, t, 0, false);\n\t\t\t},\n\t\n\t\t\tgetTangent: function(v, t) {\n\t\t\t\treturn evaluate(v, t, 1, true);\n\t\t\t},\n\t\n\t\t\tgetWeightedTangent: function(v, t) {\n\t\t\t\treturn evaluate(v, t, 1, false);\n\t\t\t},\n\t\n\t\t\tgetNormal: function(v, t) {\n\t\t\t\treturn evaluate(v, t, 2, true);\n\t\t\t},\n\t\n\t\t\tgetWeightedNormal: function(v, t) {\n\t\t\t\treturn evaluate(v, t, 2, false);\n\t\t\t},\n\t\n\t\t\tgetCurvature: function(v, t) {\n\t\t\t\treturn evaluate(v, t, 3, false).x;\n\t\t\t}\n\t\t}};\n\t},\n\tnew function() {\n\t\n\t\tfunction addLocation(locations, param, v1, c1, t1, p1, v2, c2, t2, p2,\n\t\t\t\toverlap) {\n\t\t\tvar excludeStart = !overlap && param.excludeStart,\n\t\t\t\texcludeEnd = !overlap && param.excludeEnd,\n\t\t\t\ttMin = 4e-7,\n\t\t\t\ttMax = 1 - tMin;\n\t\t\tif (t1 == null)\n\t\t\t\tt1 = Curve.getTimeOf(v1, p1);\n\t\t\tif (t1 !== null && t1 >= (excludeStart ? tMin : 0) &&\n\t\t\t\tt1 <= (excludeEnd ? tMax : 1)) {\n\t\t\t\tif (t2 == null)\n\t\t\t\t\tt2 = Curve.getTimeOf(v2, p2);\n\t\t\t\tif (t2 !== null && t2 >= (excludeEnd ? tMin : 0) &&\n\t\t\t\t\tt2 <= (excludeStart ? tMax : 1)) {\n\t\t\t\t\tvar renormalize = param.renormalize;\n\t\t\t\t\tif (renormalize) {\n\t\t\t\t\t\tvar res = renormalize(t1, t2);\n\t\t\t\t\t\tt1 = res[0];\n\t\t\t\t\t\tt2 = res[1];\n\t\t\t\t\t}\n\t\t\t\t\tvar loc1 = new CurveLocation(c1, t1,\n\t\t\t\t\t\t\tp1 || Curve.getPoint(v1, t1), overlap),\n\t\t\t\t\t\tloc2 = new CurveLocation(c2, t2,\n\t\t\t\t\t\t\tp2 || Curve.getPoint(v2, t2), overlap),\n\t\t\t\t\t\tflip = loc1.getPath() === loc2.getPath()\n\t\t\t\t\t\t\t&& loc1.getIndex() > loc2.getIndex(),\n\t\t\t\t\t\tloc = flip ? loc2 : loc1,\n\t\t\t\t\t\tinclude = param.include;\n\t\t\t\t\tloc1._intersection = loc2;\n\t\t\t\t\tloc2._intersection = loc1;\n\t\t\t\t\tif (!include || include(loc)) {\n\t\t\t\t\t\tCurveLocation.insert(locations, loc, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction addCurveIntersections(v1, v2, c1, c2, locations, param, tMin, tMax,\n\t\t\t\tuMin, uMax, flip, recursion, calls) {\n\t\t\tif (++recursion >= 48 || ++calls > 4096)\n\t\t\t\treturn calls;\n\t\t\tvar q0x = v2[0], q0y = v2[1], q3x = v2[6], q3y = v2[7],\n\t\t\t\tgetSignedDistance = Line.getSignedDistance,\n\t\t\t\td1 = getSignedDistance(q0x, q0y, q3x, q3y, v2[2], v2[3]),\n\t\t\t\td2 = getSignedDistance(q0x, q0y, q3x, q3y, v2[4], v2[5]),\n\t\t\t\tfactor = d1 * d2 > 0 ? 3 / 4 : 4 / 9,\n\t\t\t\tdMin = factor * Math.min(0, d1, d2),\n\t\t\t\tdMax = factor * Math.max(0, d1, d2),\n\t\t\t\tdp0 = getSignedDistance(q0x, q0y, q3x, q3y, v1[0], v1[1]),\n\t\t\t\tdp1 = getSignedDistance(q0x, q0y, q3x, q3y, v1[2], v1[3]),\n\t\t\t\tdp2 = getSignedDistance(q0x, q0y, q3x, q3y, v1[4], v1[5]),\n\t\t\t\tdp3 = getSignedDistance(q0x, q0y, q3x, q3y, v1[6], v1[7]),\n\t\t\t\thull = getConvexHull(dp0, dp1, dp2, dp3),\n\t\t\t\ttop = hull[0],\n\t\t\t\tbottom = hull[1],\n\t\t\t\ttMinClip,\n\t\t\t\ttMaxClip;\n\t\t\tif (d1 === 0 && d2 === 0\n\t\t\t\t\t&& dp0 === 0 && dp1 === 0 && dp2 === 0 && dp3 === 0\n\t\t\t\t|| (tMinClip = clipConvexHull(top, bottom, dMin, dMax)) == null\n\t\t\t\t|| (tMaxClip = clipConvexHull(top.reverse(), bottom.reverse(),\n\t\t\t\t\tdMin, dMax)) == null)\n\t\t\t\treturn calls;\n\t\t\tvar tMinNew = tMin + (tMax - tMin) * tMinClip,\n\t\t\t\ttMaxNew = tMin + (tMax - tMin) * tMaxClip;\n\t\t\tif (Math.max(uMax - uMin, tMaxNew - tMinNew)\n\t\t\t\t\t< 1e-10) {\n\t\t\t\tvar t = (tMinNew + tMaxNew) / 2,\n\t\t\t\t\tu = (uMin + uMax) / 2;\n\t\t\t\tv1 = c1.getValues();\n\t\t\t\tv2 = c2.getValues();\n\t\t\t\taddLocation(locations, param,\n\t\t\t\t\t\tflip ? v2 : v1, flip ? c2 : c1, flip ? u : t, null,\n\t\t\t\t\t\tflip ? v1 : v2, flip ? c1 : c2, flip ? t : u, null);\n\t\t\t} else {\n\t\t\t\tv1 = Curve.getPart(v1, tMinClip, tMaxClip);\n\t\t\t\tif (tMaxClip - tMinClip > 0.8) {\n\t\t\t\t\tif (tMaxNew - tMinNew > uMax - uMin) {\n\t\t\t\t\t\tvar parts = Curve.subdivide(v1, 0.5),\n\t\t\t\t\t\t\tt = (tMinNew + tMaxNew) / 2;\n\t\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\t\tv2, parts[0], c2, c1, locations, param,\n\t\t\t\t\t\t\t\tuMin, uMax, tMinNew, t, !flip, recursion, calls);\n\t\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\t\tv2, parts[1], c2, c1, locations, param,\n\t\t\t\t\t\t\t\tuMin, uMax, t, tMaxNew, !flip, recursion, calls);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar parts = Curve.subdivide(v2, 0.5),\n\t\t\t\t\t\t\tu = (uMin + uMax) / 2;\n\t\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\t\tparts[0], v1, c2, c1, locations, param,\n\t\t\t\t\t\t\t\tuMin, u, tMinNew, tMaxNew, !flip, recursion, calls);\n\t\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\t\tparts[1], v1, c2, c1, locations, param,\n\t\t\t\t\t\t\t\tu, uMax, tMinNew, tMaxNew, !flip, recursion, calls);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (uMax - uMin >= 1e-10) {\n\t\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv2, v1, c2, c1, locations, param,\n\t\t\t\t\t\t\tuMin, uMax, tMinNew, tMaxNew, !flip, recursion, calls);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcalls = addCurveIntersections(\n\t\t\t\t\t\t\tv1, v2, c1, c2, locations, param,\n\t\t\t\t\t\t\ttMinNew, tMaxNew, uMin, uMax, flip, recursion, calls);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn calls;\n\t\t}\n\t\n\t\tfunction getConvexHull(dq0, dq1, dq2, dq3) {\n\t\t\tvar p0 = [ 0, dq0 ],\n\t\t\t\tp1 = [ 1 / 3, dq1 ],\n\t\t\t\tp2 = [ 2 / 3, dq2 ],\n\t\t\t\tp3 = [ 1, dq3 ],\n\t\t\t\tdist1 = dq1 - (2 * dq0 + dq3) / 3,\n\t\t\t\tdist2 = dq2 - (dq0 + 2 * dq3) / 3,\n\t\t\t\thull;\n\t\t\tif (dist1 * dist2 < 0) {\n\t\t\t\thull = [[p0, p1, p3], [p0, p2, p3]];\n\t\t\t} else {\n\t\t\t\tvar distRatio = dist1 / dist2;\n\t\t\t\thull = [\n\t\t\t\t\tdistRatio >= 2 ? [p0, p1, p3]\n\t\t\t\t\t: distRatio <= 0.5 ? [p0, p2, p3]\n\t\t\t\t\t: [p0, p1, p2, p3],\n\t\t\t\t\t[p0, p3]\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn (dist1 || dist2) < 0 ? hull.reverse() : hull;\n\t\t}\n\t\n\t\tfunction clipConvexHull(hullTop, hullBottom, dMin, dMax) {\n\t\t\tif (hullTop[0][1] < dMin) {\n\t\t\t\treturn clipConvexHullPart(hullTop, true, dMin);\n\t\t\t} else if (hullBottom[0][1] > dMax) {\n\t\t\t\treturn clipConvexHullPart(hullBottom, false, dMax);\n\t\t\t} else {\n\t\t\t\treturn hullTop[0][0];\n\t\t\t}\n\t\t}\n\t\n\t\tfunction clipConvexHullPart(part, top, threshold) {\n\t\t\tvar px = part[0][0],\n\t\t\t\tpy = part[0][1];\n\t\t\tfor (var i = 1, l = part.length; i < l; i++) {\n\t\t\t\tvar qx = part[i][0],\n\t\t\t\t\tqy = part[i][1];\n\t\t\t\tif (top ? qy >= threshold : qy <= threshold) {\n\t\t\t\t\treturn qy === threshold ? qx\n\t\t\t\t\t\t\t: px + (threshold - py) * (qx - px) / (qy - py);\n\t\t\t\t}\n\t\t\t\tpx = qx;\n\t\t\t\tpy = qy;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\n\t\tfunction addCurveLineIntersections(v1, v2, c1, c2, locations, param) {\n\t\t\tvar flip = Curve.isStraight(v1),\n\t\t\t\tvc = flip ? v2 : v1,\n\t\t\t\tvl = flip ? v1 : v2,\n\t\t\t\tlx1 = vl[0], ly1 = vl[1],\n\t\t\t\tlx2 = vl[6], ly2 = vl[7],\n\t\t\t\tldx = lx2 - lx1,\n\t\t\t\tldy = ly2 - ly1,\n\t\t\t\tangle = Math.atan2(-ldy, ldx),\n\t\t\t\tsin = Math.sin(angle),\n\t\t\t\tcos = Math.cos(angle),\n\t\t\t\trvc = [];\n\t\t\tfor(var i = 0; i < 8; i += 2) {\n\t\t\t\tvar x = vc[i] - lx1,\n\t\t\t\t\ty = vc[i + 1] - ly1;\n\t\t\t\trvc.push(\n\t\t\t\t\tx * cos - y * sin,\n\t\t\t\t\tx * sin + y * cos);\n\t\t\t}\n\t\t\tvar roots = [],\n\t\t\t\tcount = Curve.solveCubic(rvc, 1, 0, roots, 0, 1);\n\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\tvar tc = roots[i],\n\t\t\t\t\tpc = Curve.getPoint(vc, tc),\n\t\t\t\t\ttl = Curve.getTimeOf(vl, pc);\n\t\t\t\tif (tl !== null) {\n\t\t\t\t\tvar pl = Curve.getPoint(vl, tl),\n\t\t\t\t\t\tt1 = flip ? tl : tc,\n\t\t\t\t\t\tt2 = flip ? tc : tl;\n\t\t\t\t\tif (!param.excludeEnd || t2 > Numerical.CURVETIME_EPSILON) {\n\t\t\t\t\t\taddLocation(locations, param,\n\t\t\t\t\t\t\t\tv1, c1, t1, flip ? pl : pc,\n\t\t\t\t\t\t\t\tv2, c2, t2, flip ? pc : pl);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction addLineIntersection(v1, v2, c1, c2, locations, param) {\n\t\t\tvar pt = Line.intersect(\n\t\t\t\t\tv1[0], v1[1], v1[6], v1[7],\n\t\t\t\t\tv2[0], v2[1], v2[6], v2[7]);\n\t\t\tif (pt) {\n\t\t\t\taddLocation(locations, param, v1, c1, null, pt, v2, c2, null, pt);\n\t\t\t}\n\t\t}\n\t\n\t\treturn { statics: {\n\t\t\t_getIntersections: function(v1, v2, c1, c2, locations, param) {\n\t\t\t\tif (!v2) {\n\t\t\t\t\treturn Curve._getSelfIntersection(v1, c1, locations, param);\n\t\t\t\t}\n\t\t\t\tvar epsilon = 1e-7,\n\t\t\t\t\tc1p1x = v1[0], c1p1y = v1[1],\n\t\t\t\t\tc1p2x = v1[6], c1p2y = v1[7],\n\t\t\t\t\tc2p1x = v2[0], c2p1y = v2[1],\n\t\t\t\t\tc2p2x = v2[6], c2p2y = v2[7],\n\t\t\t\t\tc1s1x = (3 * v1[2] + c1p1x) / 4,\n\t\t\t\t\tc1s1y = (3 * v1[3] + c1p1y) / 4,\n\t\t\t\t\tc1s2x = (3 * v1[4] + c1p2x) / 4,\n\t\t\t\t\tc1s2y = (3 * v1[5] + c1p2y) / 4,\n\t\t\t\t\tc2s1x = (3 * v2[2] + c2p1x) / 4,\n\t\t\t\t\tc2s1y = (3 * v2[3] + c2p1y) / 4,\n\t\t\t\t\tc2s2x = (3 * v2[4] + c2p2x) / 4,\n\t\t\t\t\tc2s2y = (3 * v2[5] + c2p2y) / 4,\n\t\t\t\t\tmin = Math.min,\n\t\t\t\t\tmax = Math.max;\n\t\t\t\tif (!(  max(c1p1x, c1s1x, c1s2x, c1p2x) + epsilon >\n\t\t\t\t\t\tmin(c2p1x, c2s1x, c2s2x, c2p2x) &&\n\t\t\t\t\t\tmin(c1p1x, c1s1x, c1s2x, c1p2x) - epsilon <\n\t\t\t\t\t\tmax(c2p1x, c2s1x, c2s2x, c2p2x) &&\n\t\t\t\t\t\tmax(c1p1y, c1s1y, c1s2y, c1p2y) + epsilon >\n\t\t\t\t\t\tmin(c2p1y, c2s1y, c2s2y, c2p2y) &&\n\t\t\t\t\t\tmin(c1p1y, c1s1y, c1s2y, c1p2y) - epsilon <\n\t\t\t\t\t\tmax(c2p1y, c2s1y, c2s2y, c2p2y)))\n\t\t\t\t\treturn locations;\n\t\t\t\tvar overlaps = Curve.getOverlaps(v1, v2);\n\t\t\t\tif (overlaps) {\n\t\t\t\t\tfor (var i = 0; i < 2; i++) {\n\t\t\t\t\t\tvar overlap = overlaps[i];\n\t\t\t\t\t\taddLocation(locations, param,\n\t\t\t\t\t\t\tv1, c1, overlap[0], null,\n\t\t\t\t\t\t\tv2, c2, overlap[1], null, true);\n\t\t\t\t\t}\n\t\t\t\t\treturn locations;\n\t\t\t\t}\n\t\n\t\t\t\tvar straight1 = Curve.isStraight(v1),\n\t\t\t\t\tstraight2 = Curve.isStraight(v2),\n\t\t\t\t\tstraight = straight1 && straight2,\n\t\t\t\t\tbefore = locations.length;\n\t\t\t\t(straight\n\t\t\t\t\t? addLineIntersection\n\t\t\t\t\t: straight1 || straight2\n\t\t\t\t\t\t? addCurveLineIntersections\n\t\t\t\t\t\t: addCurveIntersections)(\n\t\t\t\t\t\t\tv1, v2, c1, c2, locations, param,\n\t\t\t\t\t\t\t0, 1, 0, 1, 0, 0, 0);\n\t\t\t\tif (straight && locations.length > before)\n\t\t\t\t\treturn locations;\n\t\t\t\tvar c1p1 = new Point(c1p1x, c1p1y),\n\t\t\t\t\tc1p2 = new Point(c1p2x, c1p2y),\n\t\t\t\t\tc2p1 = new Point(c2p1x, c2p1y),\n\t\t\t\t\tc2p2 = new Point(c2p2x, c2p2y);\n\t\t\t\tif (c1p1.isClose(c2p1, epsilon))\n\t\t\t\t\taddLocation(locations, param, v1, c1, 0, c1p1, v2, c2, 0, c2p1);\n\t\t\t\tif (!param.excludeStart && c1p1.isClose(c2p2, epsilon))\n\t\t\t\t\taddLocation(locations, param, v1, c1, 0, c1p1, v2, c2, 1, c2p2);\n\t\t\t\tif (!param.excludeEnd && c1p2.isClose(c2p1, epsilon))\n\t\t\t\t\taddLocation(locations, param, v1, c1, 1, c1p2, v2, c2, 0, c2p1);\n\t\t\t\tif (c1p2.isClose(c2p2, epsilon))\n\t\t\t\t\taddLocation(locations, param, v1, c1, 1, c1p2, v2, c2, 1, c2p2);\n\t\t\t\treturn locations;\n\t\t\t},\n\t\n\t\t\t_getSelfIntersection: function(v1, c1, locations, param) {\n\t\t\t\tvar p1x = v1[0], p1y = v1[1],\n\t\t\t\t\th1x = v1[2], h1y = v1[3],\n\t\t\t\t\th2x = v1[4], h2y = v1[5],\n\t\t\t\t\tp2x = v1[6], p2y = v1[7];\n\t\t\t\tvar line = new Line(p1x, p1y, p2x, p2y, false),\n\t\t\t\t\tside1 = line.getSide(new Point(h1x, h1y), true),\n\t\t\t\t\tside2 = line.getSide(new Point(h2x, h2y), true);\n\t\t\t\tif (side1 === side2) {\n\t\t\t\t\tvar edgeSum = (p1x - h2x) * (h1y - p2y)\n\t\t\t\t\t\t\t\t+ (h1x - p2x) * (h2y - p1y);\n\t\t\t\t\tif (edgeSum * side1 > 0)\n\t\t\t\t\t\treturn locations;\n\t\t\t\t}\n\t\t\t\tvar ax = p2x - 3 * h2x + 3 * h1x - p1x,\n\t\t\t\t\tbx = h2x - 2 * h1x + p1x,\n\t\t\t\t\tcx = h1x - p1x,\n\t\t\t\t\tay = p2y - 3 * h2y + 3 * h1y - p1y,\n\t\t\t\t\tby = h2y - 2 * h1y + p1y,\n\t\t\t\t\tcy = h1y - p1y,\n\t\t\t\t\tac = ay * cx - ax * cy,\n\t\t\t\t\tab = ay * bx - ax * by,\n\t\t\t\t\tbc = by * cx - bx * cy;\n\t\t\t\tif (ac * ac - 4 * ab * bc < 0) {\n\t\t\t\t\tvar roots = [],\n\t\t\t\t\t\ttSplit,\n\t\t\t\t\t\tcount = Numerical.solveCubic(\n\t\t\t\t\t\t\t\tax * ax  + ay * ay,\n\t\t\t\t\t\t\t\t3 * (ax * bx + ay * by),\n\t\t\t\t\t\t\t\t2 * (bx * bx + by * by) + ax * cx + ay * cy,\n\t\t\t\t\t\t\t\tbx * cx + by * cy,\n\t\t\t\t\t\t\t\troots, 0, 1);\n\t\t\t\t\tif (count > 0) {\n\t\t\t\t\t\tfor (var i = 0, maxCurvature = 0; i < count; i++) {\n\t\t\t\t\t\t\tvar curvature = Math.abs(\n\t\t\t\t\t\t\t\t\tc1.getCurvatureAtTime(roots[i]));\n\t\t\t\t\t\t\tif (curvature > maxCurvature) {\n\t\t\t\t\t\t\t\tmaxCurvature = curvature;\n\t\t\t\t\t\t\t\ttSplit = roots[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar parts = Curve.subdivide(v1, tSplit);\n\t\t\t\t\t\tparam.excludeEnd = true;\n\t\t\t\t\t\tparam.renormalize = function(t1, t2) {\n\t\t\t\t\t\t\treturn [t1 * tSplit, t2 * (1 - tSplit) + tSplit];\n\t\t\t\t\t\t};\n\t\t\t\t\t\tCurve._getIntersections(parts[0], parts[1], c1, c1,\n\t\t\t\t\t\t\t\tlocations, param);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn locations;\n\t\t\t},\n\t\n\t\t\tgetOverlaps: function(v1, v2) {\n\t\t\t\tvar abs = Math.abs,\n\t\t\t\t\ttimeEpsilon = 4e-7,\n\t\t\t\t\tgeomEpsilon = 1e-7,\n\t\t\t\t\tstraight1 = Curve.isStraight(v1),\n\t\t\t\t\tstraight2 = Curve.isStraight(v2),\n\t\t\t\t\tstraightBoth = straight1 && straight2;\n\t\n\t\t\t\tfunction getSquaredLineLength(v) {\n\t\t\t\t\tvar x = v[6] - v[0],\n\t\t\t\t\t\ty = v[7] - v[1];\n\t\t\t\t\treturn x * x + y * y;\n\t\t\t\t}\n\t\n\t\t\t\tvar flip = getSquaredLineLength(v1) < getSquaredLineLength(v2),\n\t\t\t\t\tl1 = flip ? v2 : v1,\n\t\t\t\t\tl2 = flip ? v1 : v2,\n\t\t\t\t\tline = new Line(l1[0], l1[1], l1[6], l1[7]);\n\t\t\t\tif (line.getDistance(new Point(l2[0], l2[1])) < geomEpsilon &&\n\t\t\t\t\tline.getDistance(new Point(l2[6], l2[7])) < geomEpsilon) {\n\t\t\t\t\tif (!straightBoth &&\n\t\t\t\t\t\tline.getDistance(new Point(l1[2], l1[3])) < geomEpsilon &&\n\t\t\t\t\t\tline.getDistance(new Point(l1[4], l1[5])) < geomEpsilon &&\n\t\t\t\t\t\tline.getDistance(new Point(l2[2], l2[3])) < geomEpsilon &&\n\t\t\t\t\t\tline.getDistance(new Point(l2[4], l2[5])) < geomEpsilon) {\n\t\t\t\t\t\tstraight1 = straight2 = straightBoth = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (straightBoth) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (straight1 ^ straight2) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\n\t\t\t\tvar v = [v1, v2],\n\t\t\t\t\tpairs = [];\n\t\t\t\tfor (var i = 0, t1 = 0;\n\t\t\t\t\t\ti < 2 && pairs.length < 2;\n\t\t\t\t\t\ti += t1 === 0 ? 0 : 1, t1 = t1 ^ 1) {\n\t\t\t\t\tvar t2 = Curve.getTimeOf(v[i ^ 1], new Point(\n\t\t\t\t\t\t\tv[i][t1 === 0 ? 0 : 6],\n\t\t\t\t\t\t\tv[i][t1 === 0 ? 1 : 7]));\n\t\t\t\t\tif (t2 != null) {\n\t\t\t\t\t\tvar pair = i === 0 ? [t1, t2] : [t2, t1];\n\t\t\t\t\t\tif (!pairs.length ||\n\t\t\t\t\t\t\tabs(pair[0] - pairs[0][0]) > timeEpsilon &&\n\t\t\t\t\t\t\tabs(pair[1] - pairs[0][1]) > timeEpsilon)\n\t\t\t\t\t\t\tpairs.push(pair);\n\t\t\t\t\t}\n\t\t\t\t\tif (i === 1 && !pairs.length)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (pairs.length !== 2) {\n\t\t\t\t\tpairs = null;\n\t\t\t\t} else if (!straightBoth) {\n\t\t\t\t\tvar o1 = Curve.getPart(v1, pairs[0][0], pairs[1][0]),\n\t\t\t\t\t\to2 = Curve.getPart(v2, pairs[0][1], pairs[1][1]);\n\t\t\t\t\tif (abs(o2[2] - o1[2]) > geomEpsilon ||\n\t\t\t\t\t\tabs(o2[3] - o1[3]) > geomEpsilon ||\n\t\t\t\t\t\tabs(o2[4] - o1[4]) > geomEpsilon ||\n\t\t\t\t\t\tabs(o2[5] - o1[5]) > geomEpsilon)\n\t\t\t\t\t\tpairs = null;\n\t\t\t\t}\n\t\t\t\treturn pairs;\n\t\t\t}\n\t\t}};\n\t});\n\t\n\tvar CurveLocation = Base.extend({\n\t\t_class: 'CurveLocation',\n\t\tbeans: true,\n\t\n\t\tinitialize: function CurveLocation(curve, time, point, _overlap, _distance) {\n\t\t\tif (time > 0.9999996) {\n\t\t\t\tvar next = curve.getNext();\n\t\t\t\tif (next) {\n\t\t\t\t\ttime = 0;\n\t\t\t\t\tcurve = next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._setCurve(curve);\n\t\t\tthis._time = time;\n\t\t\tthis._point = point || curve.getPointAtTime(time);\n\t\t\tthis._overlap = _overlap;\n\t\t\tthis._distance = _distance;\n\t\t\tthis._intersection = this._next = this._previous = null;\n\t\t},\n\t\n\t\t_setCurve: function(curve) {\n\t\t\tvar path = curve._path;\n\t\t\tthis._path = path;\n\t\t\tthis._version = path ? path._version : 0;\n\t\t\tthis._curve = curve;\n\t\t\tthis._segment = null;\n\t\t\tthis._segment1 = curve._segment1;\n\t\t\tthis._segment2 = curve._segment2;\n\t\t},\n\t\n\t\t_setSegment: function(segment) {\n\t\t\tthis._setCurve(segment.getCurve());\n\t\t\tthis._segment = segment;\n\t\t\tthis._time = segment === this._segment1 ? 0 : 1;\n\t\t\tthis._point = segment._point.clone();\n\t\t},\n\t\n\t\tgetSegment: function() {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\tsegment = this._segment;\n\t\t\tif (!segment) {\n\t\t\t\tvar time = this.getTime();\n\t\t\t\tif (time === 0) {\n\t\t\t\t\tsegment = curve._segment1;\n\t\t\t\t} else if (time === 1) {\n\t\t\t\t\tsegment = curve._segment2;\n\t\t\t\t} else if (time != null) {\n\t\t\t\t\tsegment = curve.getPartLength(0, time)\n\t\t\t\t\t\t< curve.getPartLength(time, 1)\n\t\t\t\t\t\t\t? curve._segment1\n\t\t\t\t\t\t\t: curve._segment2;\n\t\t\t\t}\n\t\t\t\tthis._segment = segment;\n\t\t\t}\n\t\t\treturn segment;\n\t\t},\n\t\n\t\tgetCurve: function() {\n\t\t\tvar path = this._path,\n\t\t\t\tthat = this;\n\t\t\tif (path && path._version !== this._version) {\n\t\t\t\tthis._time = this._curve = this._offset = null;\n\t\t\t}\n\t\n\t\t\tfunction trySegment(segment) {\n\t\t\t\tvar curve = segment && segment.getCurve();\n\t\t\t\tif (curve && (that._time = curve.getTimeOf(that._point))\n\t\t\t\t\t\t!= null) {\n\t\t\t\t\tthat._setCurve(curve);\n\t\t\t\t\tthat._segment = segment;\n\t\t\t\t\treturn curve;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn this._curve\n\t\t\t\t|| trySegment(this._segment)\n\t\t\t\t|| trySegment(this._segment1)\n\t\t\t\t|| trySegment(this._segment2.getPrevious());\n\t\t},\n\t\n\t\tgetPath: function() {\n\t\t\tvar curve = this.getCurve();\n\t\t\treturn curve && curve._path;\n\t\t},\n\t\n\t\tgetIndex: function() {\n\t\t\tvar curve = this.getCurve();\n\t\t\treturn curve && curve.getIndex();\n\t\t},\n\t\n\t\tgetTime: function() {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\ttime = this._time;\n\t\t\treturn curve && time == null\n\t\t\t\t? this._time = curve.getTimeOf(this._point)\n\t\t\t\t: time;\n\t\t},\n\t\n\t\tgetParameter: '#getTime',\n\t\n\t\tgetPoint: function() {\n\t\t\treturn this._point;\n\t\t},\n\t\n\t\tgetOffset: function() {\n\t\t\tvar offset = this._offset;\n\t\t\tif (offset == null) {\n\t\t\t\toffset = 0;\n\t\t\t\tvar path = this.getPath(),\n\t\t\t\t\tindex = this.getIndex();\n\t\t\t\tif (path && index != null) {\n\t\t\t\t\tvar curves = path.getCurves();\n\t\t\t\t\tfor (var i = 0; i < index; i++)\n\t\t\t\t\t\toffset += curves[i].getLength();\n\t\t\t\t}\n\t\t\t\tthis._offset = offset += this.getCurveOffset();\n\t\t\t}\n\t\t\treturn offset;\n\t\t},\n\t\n\t\tgetCurveOffset: function() {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\ttime = this.getTime();\n\t\t\treturn time != null && curve && curve.getPartLength(0, time);\n\t\t},\n\t\n\t\tgetIntersection: function() {\n\t\t\treturn this._intersection;\n\t\t},\n\t\n\t\tgetDistance: function() {\n\t\t\treturn this._distance;\n\t\t},\n\t\n\t\tdivide: function() {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\tres = null;\n\t\t\tif (curve) {\n\t\t\t\tres = curve.divideAtTime(this.getTime());\n\t\t\t\tif (res)\n\t\t\t\t\tthis._setSegment(res._segment1);\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\n\t\tsplit: function() {\n\t\t\tvar curve = this.getCurve();\n\t\t\treturn curve ? curve.splitAtTime(this.getTime()) : null;\n\t\t},\n\t\n\t\tequals: function(loc, _ignoreOther) {\n\t\t\tvar res = this === loc,\n\t\t\t\tepsilon = 1e-7;\n\t\t\tif (!res && loc instanceof CurveLocation\n\t\t\t\t\t&& this.getPath() === loc.getPath()\n\t\t\t\t\t&& this.getPoint().isClose(loc.getPoint(), epsilon)) {\n\t\t\t\tvar c1 = this.getCurve(),\n\t\t\t\t\tc2 = loc.getCurve(),\n\t\t\t\t\tabs = Math.abs,\n\t\t\t\t\tdiff = abs(\n\t\t\t\t\t\t((c1.isLast() && c2.isFirst() ? -1 : c1.getIndex())\n\t\t\t\t\t\t\t\t+ this.getTime()) -\n\t\t\t\t\t\t((c2.isLast() && c1.isFirst() ? -1 : c2.getIndex())\n\t\t\t\t\t\t\t\t+ loc.getTime()));\n\t\t\t\tres = (diff < 4e-7\n\t\t\t\t\t|| ((diff = abs(this.getOffset() - loc.getOffset())) < epsilon\n\t\t\t\t\t\t|| abs(this.getPath().getLength() - diff) < epsilon))\n\t\t\t\t\t&& (_ignoreOther\n\t\t\t\t\t\t|| (!this._intersection && !loc._intersection\n\t\t\t\t\t\t\t|| this._intersection && this._intersection.equals(\n\t\t\t\t\t\t\t\t\tloc._intersection, true)));\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\tvar parts = [],\n\t\t\t\tpoint = this.getPoint(),\n\t\t\t\tf = Formatter.instance;\n\t\t\tif (point)\n\t\t\t\tparts.push('point: ' + point);\n\t\t\tvar index = this.getIndex();\n\t\t\tif (index != null)\n\t\t\t\tparts.push('index: ' + index);\n\t\t\tvar time = this.getTime();\n\t\t\tif (time != null)\n\t\t\t\tparts.push('time: ' + f.number(time));\n\t\t\tif (this._distance != null)\n\t\t\t\tparts.push('distance: ' + f.number(this._distance));\n\t\t\treturn '{ ' + parts.join(', ') + ' }';\n\t\t},\n\t\n\t\tisTouching: function() {\n\t\t\tvar inter = this._intersection;\n\t\t\tif (inter && this.getTangent().isCollinear(inter.getTangent())) {\n\t\t\t\tvar curve1 = this.getCurve(),\n\t\t\t\t\tcurve2 = inter.getCurve();\n\t\t\t\treturn !(curve1.isStraight() && curve2.isStraight()\n\t\t\t\t\t\t&& curve1.getLine().intersect(curve2.getLine()));\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\n\t\tisCrossing: function() {\n\t\t\tvar inter = this._intersection;\n\t\t\tif (!inter)\n\t\t\t\treturn false;\n\t\t\tvar t1 = this.getTime(),\n\t\t\t\tt2 = inter.getTime(),\n\t\t\t\ttMin = 4e-7,\n\t\t\t\ttMax = 1 - tMin,\n\t\t\t\tt1Inside = t1 > tMin && t1 < tMax,\n\t\t\t\tt2Inside = t2 > tMin && t2 < tMax;\n\t\t\tif (t1Inside && t2Inside)\n\t\t\t\treturn !this.isTouching();\n\t\t\tvar c2 = this.getCurve(),\n\t\t\t\tc1 = t1 <= tMin ? c2.getPrevious() : c2,\n\t\t\t\tc4 = inter.getCurve(),\n\t\t\t\tc3 = t2 <= tMin ? c4.getPrevious() : c4;\n\t\t\tif (t1 >= tMax)\n\t\t\t\tc2 = c2.getNext();\n\t\t\tif (t2 >= tMax)\n\t\t\t\tc4 = c4.getNext();\n\t\t\tif (!c1 || !c2 || !c3 || !c4)\n\t\t\t\treturn false;\n\t\n\t\t\tfunction isInRange(angle, min, max) {\n\t\t\t\treturn min < max\n\t\t\t\t\t\t? angle > min && angle < max\n\t\t\t\t\t\t: angle > min || angle < max;\n\t\t\t}\n\t\n\t\t\tvar lenghts = [];\n\t\t\tif (!t1Inside)\n\t\t\t\tlenghts.push(c1.getLength(), c2.getLength());\n\t\t\tif (!t2Inside)\n\t\t\t\tlenghts.push(c3.getLength(), c4.getLength());\n\t\t\tvar pt = this.getPoint(),\n\t\t\t\toffset = Math.min.apply(Math, lenghts) / 64,\n\t\t\t\tv2 = t1Inside ? c2.getTangentAtTime(t1)\n\t\t\t\t\t\t: c2.getPointAt(offset).subtract(pt),\n\t\t\t\tv1 = t1Inside ? v2.negate()\n\t\t\t\t\t\t: c1.getPointAt(-offset).subtract(pt),\n\t\t\t\tv4 = t2Inside ? c4.getTangentAtTime(t2)\n\t\t\t\t\t\t: c4.getPointAt(offset).subtract(pt),\n\t\t\t\tv3 = t2Inside ? v4.negate()\n\t\t\t\t\t\t: c3.getPointAt(-offset).subtract(pt),\n\t\t\t\ta1 = v1.getAngle(),\n\t\t\t\ta2 = v2.getAngle(),\n\t\t\t\ta3 = v3.getAngle(),\n\t\t\t\ta4 = v4.getAngle();\n\t\t\treturn !!(t1Inside\n\t\t\t\t\t? (isInRange(a1, a3, a4) ^ isInRange(a2, a3, a4)) &&\n\t\t\t\t\t  (isInRange(a1, a4, a3) ^ isInRange(a2, a4, a3))\n\t\t\t\t\t: (isInRange(a3, a1, a2) ^ isInRange(a4, a1, a2)) &&\n\t\t\t\t\t  (isInRange(a3, a2, a1) ^ isInRange(a4, a2, a1)));\n\t\t},\n\t\n\t\thasOverlap: function() {\n\t\t\treturn !!this._overlap;\n\t\t}\n\t}, Base.each(Curve._evaluateMethods, function(name) {\n\t\tvar get = name + 'At';\n\t\tthis[name] = function() {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\ttime = this.getTime();\n\t\t\treturn time != null && curve && curve[get](time, true);\n\t\t};\n\t}, {\n\t\tpreserve: true\n\t}),\n\tnew function() {\n\t\n\t\tfunction insert(locations, loc, merge) {\n\t\t\tvar length = locations.length,\n\t\t\t\tl = 0,\n\t\t\t\tr = length - 1;\n\t\n\t\t\tfunction search(index, dir) {\n\t\t\t\tfor (var i = index + dir; i >= -1 && i <= length; i += dir) {\n\t\t\t\t\tvar loc2 = locations[((i % length) + length) % length];\n\t\t\t\t\tif (!loc.getPoint().isClose(loc2.getPoint(),\n\t\t\t\t\t\t\t1e-7))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tif (loc.equals(loc2))\n\t\t\t\t\t\treturn loc2;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\n\t\t\twhile (l <= r) {\n\t\t\t\tvar m = (l + r) >>> 1,\n\t\t\t\t\tloc2 = locations[m],\n\t\t\t\t\tfound;\n\t\t\t\tif (merge && (found = loc.equals(loc2) ? loc2\n\t\t\t\t\t\t: (search(m, -1) || search(m, 1)))) {\n\t\t\t\t\tif (loc._overlap) {\n\t\t\t\t\t\tfound._overlap = found._intersection._overlap = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn found;\n\t\t\t\t}\n\t\t\tvar path1 = loc.getPath(),\n\t\t\t\tpath2 = loc2.getPath(),\n\t\t\t\tdiff = path1 !== path2\n\t\t\t\t\t? path1._id - path2._id\n\t\t\t\t\t: (loc.getIndex() + loc.getTime())\n\t\t\t\t\t- (loc2.getIndex() + loc2.getTime());\n\t\t\t\tif (diff < 0) {\n\t\t\t\t\tr = m - 1;\n\t\t\t\t} else {\n\t\t\t\t\tl = m + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlocations.splice(l, 0, loc);\n\t\t\treturn loc;\n\t\t}\n\t\n\t\treturn { statics: {\n\t\t\tinsert: insert,\n\t\n\t\t\texpand: function(locations) {\n\t\t\t\tvar expanded = locations.slice();\n\t\t\t\tfor (var i = locations.length - 1; i >= 0; i--) {\n\t\t\t\t\tinsert(expanded, locations[i]._intersection, false);\n\t\t\t\t}\n\t\t\t\treturn expanded;\n\t\t\t}\n\t\t}};\n\t});\n\t\n\tvar PathItem = Item.extend({\n\t\t_class: 'PathItem',\n\t\t_selectBounds: false,\n\t\t_canScaleStroke: true,\n\t\tbeans: true,\n\t\n\t\tinitialize: function PathItem() {\n\t\t},\n\t\n\t\tstatics: {\n\t\n\t\t\tcreate: function(arg) {\n\t\t\t\tvar data,\n\t\t\t\t\tsegments,\n\t\t\t\t\tcompound;\n\t\t\t\tif (Base.isPlainObject(arg)) {\n\t\t\t\t\tsegments = arg.segments;\n\t\t\t\t\tdata = arg.pathData;\n\t\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\t\tsegments = arg;\n\t\t\t\t} else if (typeof arg === 'string') {\n\t\t\t\t\tdata = arg;\n\t\t\t\t}\n\t\t\t\tif (segments) {\n\t\t\t\t\tvar first = segments[0];\n\t\t\t\t\tcompound = first && Array.isArray(first[0]);\n\t\t\t\t} else if (data) {\n\t\t\t\t\tcompound = (data.match(/m/gi) || []).length > 1\n\t\t\t\t\t\t\t|| /z\\s*\\S+/i.test(data);\n\t\t\t\t}\n\t\t\t\tvar ctor = compound ? CompoundPath : Path;\n\t\t\t\treturn new ctor(arg);\n\t\t\t}\n\t\t},\n\t\n\t\t_asPathItem: function() {\n\t\t\treturn this;\n\t\t},\n\t\n\t\tisClockwise: function() {\n\t\t\treturn this.getArea() >= 0;\n\t\t},\n\t\n\t\tsetClockwise: function(clockwise) {\n\t\t\tif (this.isClockwise() != (clockwise = !!clockwise))\n\t\t\t\tthis.reverse();\n\t\t},\n\t\n\t\tsetPathData: function(data) {\n\t\n\t\t\tvar parts = data && data.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig),\n\t\t\t\tcoords,\n\t\t\t\trelative = false,\n\t\t\t\tprevious,\n\t\t\t\tcontrol,\n\t\t\t\tcurrent = new Point(),\n\t\t\t\tstart = new Point();\n\t\n\t\t\tfunction getCoord(index, coord) {\n\t\t\t\tvar val = +coords[index];\n\t\t\t\tif (relative)\n\t\t\t\t\tval += current[coord];\n\t\t\t\treturn val;\n\t\t\t}\n\t\n\t\t\tfunction getPoint(index) {\n\t\t\t\treturn new Point(\n\t\t\t\t\tgetCoord(index, 'x'),\n\t\t\t\t\tgetCoord(index + 1, 'y')\n\t\t\t\t);\n\t\t\t}\n\t\n\t\t\tthis.clear();\n\t\n\t\t\tfor (var i = 0, l = parts && parts.length; i < l; i++) {\n\t\t\t\tvar part = parts[i],\n\t\t\t\t\tcommand = part[0],\n\t\t\t\t\tlower = command.toLowerCase();\n\t\t\t\tcoords = part.match(/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g);\n\t\t\t\tvar length = coords && coords.length;\n\t\t\t\trelative = command === lower;\n\t\t\t\tif (previous === 'z' && !/[mz]/.test(lower))\n\t\t\t\t\tthis.moveTo(current);\n\t\t\t\tswitch (lower) {\n\t\t\t\tcase 'm':\n\t\t\t\tcase 'l':\n\t\t\t\t\tvar move = lower === 'm';\n\t\t\t\t\tfor (var j = 0; j < length; j += 2) {\n\t\t\t\t\t\tthis[move ? 'moveTo' : 'lineTo'](current = getPoint(j));\n\t\t\t\t\t\tif (move) {\n\t\t\t\t\t\t\tstart = current;\n\t\t\t\t\t\t\tmove = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontrol = current;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'h':\n\t\t\t\tcase 'v':\n\t\t\t\t\tvar coord = lower === 'h' ? 'x' : 'y';\n\t\t\t\t\tcurrent = current.clone();\n\t\t\t\t\tfor (var j = 0; j < length; j++) {\n\t\t\t\t\t\tcurrent[coord] = getCoord(j, coord);\n\t\t\t\t\t\tthis.lineTo(current);\n\t\t\t\t\t}\n\t\t\t\t\tcontrol = current;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'c':\n\t\t\t\t\tfor (var j = 0; j < length; j += 6) {\n\t\t\t\t\t\tthis.cubicCurveTo(\n\t\t\t\t\t\t\t\tgetPoint(j),\n\t\t\t\t\t\t\t\tcontrol = getPoint(j + 2),\n\t\t\t\t\t\t\t\tcurrent = getPoint(j + 4));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 's':\n\t\t\t\t\tfor (var j = 0; j < length; j += 4) {\n\t\t\t\t\t\tthis.cubicCurveTo(\n\t\t\t\t\t\t\t\t/[cs]/.test(previous)\n\t\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)\n\t\t\t\t\t\t\t\t\t\t: current,\n\t\t\t\t\t\t\t\tcontrol = getPoint(j),\n\t\t\t\t\t\t\t\tcurrent = getPoint(j + 2));\n\t\t\t\t\t\tprevious = lower;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'q':\n\t\t\t\t\tfor (var j = 0; j < length; j += 4) {\n\t\t\t\t\t\tthis.quadraticCurveTo(\n\t\t\t\t\t\t\t\tcontrol = getPoint(j),\n\t\t\t\t\t\t\t\tcurrent = getPoint(j + 2));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 't':\n\t\t\t\t\tfor (var j = 0; j < length; j += 2) {\n\t\t\t\t\t\tthis.quadraticCurveTo(\n\t\t\t\t\t\t\t\tcontrol = (/[qt]/.test(previous)\n\t\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)\n\t\t\t\t\t\t\t\t\t\t: current),\n\t\t\t\t\t\t\t\tcurrent = getPoint(j));\n\t\t\t\t\t\tprevious = lower;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'a':\n\t\t\t\t\tfor (var j = 0; j < length; j += 7) {\n\t\t\t\t\t\tthis.arcTo(current = getPoint(j + 5),\n\t\t\t\t\t\t\t\tnew Size(+coords[j], +coords[j + 1]),\n\t\t\t\t\t\t\t\t+coords[j + 2], +coords[j + 4], +coords[j + 3]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'z':\n\t\t\t\t\tthis.closePath(1e-12);\n\t\t\t\t\tcurrent = start;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tprevious = lower;\n\t\t\t}\n\t\t},\n\t\n\t\t_canComposite: function() {\n\t\t\treturn !(this.hasFill() && this.hasStroke());\n\t\t},\n\t\n\t\t_contains: function(point) {\n\t\t\tvar winding = point.isInside(\n\t\t\t\t\tthis.getBounds({ internal: true, handle: true }))\n\t\t\t\t\t\t? this._getWinding(point)\n\t\t\t\t\t\t: {};\n\t\t\treturn !!(this.getFillRule() === 'evenodd'\n\t\t\t\t\t? winding.windingL & 1 || winding.windingR & 1\n\t\t\t\t\t: winding.winding);\n\t\t},\n\t\n\t\tgetIntersections: function(path, include, _matrix, _returnFirst) {\n\t\t\tvar self = this === path || !path,\n\t\t\t\tmatrix1 = this._matrix._orNullIfIdentity(),\n\t\t\t\tmatrix2 = self ? matrix1\n\t\t\t\t\t: (_matrix || path._matrix)._orNullIfIdentity();\n\t\t\tif (!self && !this.getBounds(matrix1).touches(path.getBounds(matrix2)))\n\t\t\t\treturn [];\n\t\t\tvar curves1 = this.getCurves(),\n\t\t\t\tcurves2 = self ? curves1 : path.getCurves(),\n\t\t\t\tlength1 = curves1.length,\n\t\t\t\tlength2 = self ? length1 : curves2.length,\n\t\t\t\tvalues2 = [],\n\t\t\t\tarrays = [],\n\t\t\t\tlocations,\n\t\t\t\tpath;\n\t\t\tfor (var i = 0; i < length2; i++)\n\t\t\t\tvalues2[i] = curves2[i].getValues(matrix2);\n\t\t\tfor (var i = 0; i < length1; i++) {\n\t\t\t\tvar curve1 = curves1[i],\n\t\t\t\t\tvalues1 = self ? values2[i] : curve1.getValues(matrix1),\n\t\t\t\t\tpath1 = curve1.getPath();\n\t\t\t\tif (path1 !== path) {\n\t\t\t\t\tpath = path1;\n\t\t\t\t\tlocations = [];\n\t\t\t\t\tarrays.push(locations);\n\t\t\t\t}\n\t\t\t\tif (self) {\n\t\t\t\t\tCurve._getSelfIntersection(values1, curve1, locations, {\n\t\t\t\t\t\tinclude: include,\n\t\t\t\t\t\texcludeStart: length1 === 1 &&\n\t\t\t\t\t\t\t\tcurve1.getPoint1().equals(curve1.getPoint2())\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tfor (var j = self ? i + 1 : 0; j < length2; j++) {\n\t\t\t\t\tif (_returnFirst && locations.length)\n\t\t\t\t\t\treturn locations;\n\t\t\t\t\tvar curve2 = curves2[j];\n\t\t\t\t\tCurve._getIntersections(\n\t\t\t\t\t\tvalues1, values2[j], curve1, curve2, locations,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinclude: include,\n\t\t\t\t\t\t\texcludeStart: self && curve1.getPrevious() === curve2,\n\t\t\t\t\t\t\texcludeEnd: self && curve1.getNext() === curve2\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlocations = [];\n\t\t\tfor (var i = 0, l = arrays.length; i < l; i++) {\n\t\t\t\tlocations.push.apply(locations, arrays[i]);\n\t\t\t}\n\t\t\treturn locations;\n\t\t},\n\t\n\t\tgetCrossings: function(path) {\n\t\t\treturn this.getIntersections(path, function(inter) {\n\t\t\t\treturn inter._overlap || inter.isCrossing();\n\t\t\t});\n\t\t},\n\t\n\t\tgetNearestLocation: function() {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tcurves = this.getCurves(),\n\t\t\t\tminDist = Infinity,\n\t\t\t\tminLoc = null;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\tvar loc = curves[i].getNearestLocation(point);\n\t\t\t\tif (loc._distance < minDist) {\n\t\t\t\t\tminDist = loc._distance;\n\t\t\t\t\tminLoc = loc;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn minLoc;\n\t\t},\n\t\n\t\tgetNearestPoint: function() {\n\t\t\tvar loc = this.getNearestLocation.apply(this, arguments);\n\t\t\treturn loc ? loc.getPoint() : loc;\n\t\t},\n\t\n\t\tinterpolate: function(from, to, factor) {\n\t\t\tvar isPath = !this._children,\n\t\t\t\tname = isPath ? '_segments' : '_children',\n\t\t\t\titemsFrom = from[name],\n\t\t\t\titemsTo = to[name],\n\t\t\t\titems = this[name];\n\t\t\tif (!itemsFrom || !itemsTo || itemsFrom.length !== itemsTo.length) {\n\t\t\t\tthrow new Error('Invalid operands in interpolate() call: ' +\n\t\t\t\t\t\tfrom + ', ' + to);\n\t\t\t}\n\t\t\tvar current = items.length,\n\t\t\t\tlength = itemsTo.length;\n\t\t\tif (current < length) {\n\t\t\t\tvar ctor = isPath ? Segment : Path;\n\t\t\t\tfor (var i = current; i < length; i++) {\n\t\t\t\t\tthis.add(new ctor());\n\t\t\t\t}\n\t\t\t} else if (current > length) {\n\t\t\t\tthis[isPath ? 'removeSegments' : 'removeChildren'](length, current);\n\t\t\t}\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\titems[i].interpolate(itemsFrom[i], itemsTo[i], factor);\n\t\t\t}\n\t\t\tif (isPath) {\n\t\t\t\tthis.setClosed(from._closed);\n\t\t\t\tthis._changed(9);\n\t\t\t}\n\t\t},\n\t\n\t\tcompare: function(path) {\n\t\t\tvar ok = false;\n\t\t\tif (path) {\n\t\t\t\tvar paths1 = this._children || [this],\n\t\t\t\t\tpaths2 = path._children.slice() || [path],\n\t\t\t\t\tlength1 = paths1.length,\n\t\t\t\t\tlength2 = paths2.length,\n\t\t\t\t\tmatched = [],\n\t\t\t\t\tcount;\n\t\t\t\tok = true;\n\t\t\t\tfor (var i1 = length1 - 1; i1 >= 0 && ok; i1--) {\n\t\t\t\t\tvar path1 = paths1[i1];\n\t\t\t\t\tok = false;\n\t\t\t\t\tfor (var i2 = length2 - 1; i2 >= 0 && !ok; i2--) {\n\t\t\t\t\t\tif (path1.compare(paths2[i2])) {\n\t\t\t\t\t\t\tif (!matched[i2]) {\n\t\t\t\t\t\t\t\tmatched[i2] = true;\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tok = ok && count === length2;\n\t\t\t}\n\t\t\treturn ok;\n\t\t},\n\t\n\t});\n\t\n\tvar Path = PathItem.extend({\n\t\t_class: 'Path',\n\t\t_serializeFields: {\n\t\t\tsegments: [],\n\t\t\tclosed: false\n\t\t},\n\t\n\t\tinitialize: function Path(arg) {\n\t\t\tthis._closed = false;\n\t\t\tthis._segments = [];\n\t\t\tthis._version = 0;\n\t\t\tvar segments = Array.isArray(arg)\n\t\t\t\t? typeof arg[0] === 'object'\n\t\t\t\t\t? arg\n\t\t\t\t\t: arguments\n\t\t\t\t: arg && (arg.size === undefined && (arg.x !== undefined\n\t\t\t\t\t\t|| arg.point !== undefined))\n\t\t\t\t\t? arguments\n\t\t\t\t\t: null;\n\t\t\tif (segments && segments.length > 0) {\n\t\t\t\tthis.setSegments(segments);\n\t\t\t} else {\n\t\t\t\tthis._curves = undefined;\n\t\t\t\tthis._segmentSelection = 0;\n\t\t\t\tif (!segments && typeof arg === 'string') {\n\t\t\t\t\tthis.setPathData(arg);\n\t\t\t\t\targ = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._initialize(!segments && arg);\n\t\t},\n\t\n\t\t_equals: function(item) {\n\t\t\treturn this._closed === item._closed\n\t\t\t\t\t&& Base.equals(this._segments, item._segments);\n\t\t},\n\t\n\t\tcopyContent: function(source) {\n\t\t\tthis.setSegments(source._segments);\n\t\t\tthis._closed = source._closed;\n\t\t},\n\t\n\t\t_changed: function _changed(flags) {\n\t\t\t_changed.base.call(this, flags);\n\t\t\tif (flags & 8) {\n\t\t\t\tthis._length = this._area = undefined;\n\t\t\t\tif (flags & 16) {\n\t\t\t\t\tthis._version++;\n\t\t\t\t} else if (this._curves) {\n\t\t\t\t   for (var i = 0, l = this._curves.length; i < l; i++)\n\t\t\t\t\t\tthis._curves[i]._changed();\n\t\t\t\t}\n\t\t\t} else if (flags & 32) {\n\t\t\t\tthis._bounds = undefined;\n\t\t\t}\n\t\t},\n\t\n\t\tgetStyle: function() {\n\t\t\tvar parent = this._parent;\n\t\t\treturn (parent instanceof CompoundPath ? parent : this)._style;\n\t\t},\n\t\n\t\tgetSegments: function() {\n\t\t\treturn this._segments;\n\t\t},\n\t\n\t\tsetSegments: function(segments) {\n\t\t\tvar fullySelected = this.isFullySelected(),\n\t\t\t\tlength = segments && segments.length;\n\t\t\tthis._segments.length = 0;\n\t\t\tthis._segmentSelection = 0;\n\t\t\tthis._curves = undefined;\n\t\t\tif (length) {\n\t\t\t\tvar last = segments[length - 1];\n\t\t\t\tif (typeof last === 'boolean') {\n\t\t\t\t\tthis.setClosed(last);\n\t\t\t\t\tlength--;\n\t\t\t\t}\n\t\t\t\tthis._add(Segment.readList(segments, 0, {}, length));\n\t\t\t}\n\t\t\tif (fullySelected)\n\t\t\t\tthis.setFullySelected(true);\n\t\t},\n\t\n\t\tgetFirstSegment: function() {\n\t\t\treturn this._segments[0];\n\t\t},\n\t\n\t\tgetLastSegment: function() {\n\t\t\treturn this._segments[this._segments.length - 1];\n\t\t},\n\t\n\t\tgetCurves: function() {\n\t\t\tvar curves = this._curves,\n\t\t\t\tsegments = this._segments;\n\t\t\tif (!curves) {\n\t\t\t\tvar length = this._countCurves();\n\t\t\t\tcurves = this._curves = new Array(length);\n\t\t\t\tfor (var i = 0; i < length; i++)\n\t\t\t\t\tcurves[i] = new Curve(this, segments[i],\n\t\t\t\t\t\tsegments[i + 1] || segments[0]);\n\t\t\t}\n\t\t\treturn curves;\n\t\t},\n\t\n\t\tgetFirstCurve: function() {\n\t\t\treturn this.getCurves()[0];\n\t\t},\n\t\n\t\tgetLastCurve: function() {\n\t\t\tvar curves = this.getCurves();\n\t\t\treturn curves[curves.length - 1];\n\t\t},\n\t\n\t\tisClosed: function() {\n\t\t\treturn this._closed;\n\t\t},\n\t\n\t\tsetClosed: function(closed) {\n\t\t\tif (this._closed != (closed = !!closed)) {\n\t\t\t\tthis._closed = closed;\n\t\t\t\tif (this._curves) {\n\t\t\t\t\tvar length = this._curves.length = this._countCurves();\n\t\t\t\t\tif (closed)\n\t\t\t\t\t\tthis._curves[length - 1] = new Curve(this,\n\t\t\t\t\t\t\tthis._segments[length - 1], this._segments[0]);\n\t\t\t\t}\n\t\t\t\tthis._changed(25);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tbeans: true,\n\t\n\t\tgetPathData: function(_matrix, _precision) {\n\t\t\tvar segments = this._segments,\n\t\t\t\tlength = segments.length,\n\t\t\t\tf = new Formatter(_precision),\n\t\t\t\tcoords = new Array(6),\n\t\t\t\tfirst = true,\n\t\t\t\tcurX, curY,\n\t\t\t\tprevX, prevY,\n\t\t\t\tinX, inY,\n\t\t\t\toutX, outY,\n\t\t\t\tparts = [];\n\t\n\t\t\tfunction addSegment(segment, skipLine) {\n\t\t\t\tsegment._transformCoordinates(_matrix, coords);\n\t\t\t\tcurX = coords[0];\n\t\t\t\tcurY = coords[1];\n\t\t\t\tif (first) {\n\t\t\t\t\tparts.push('M' + f.pair(curX, curY));\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tinX = coords[2];\n\t\t\t\t\tinY = coords[3];\n\t\t\t\t\tif (inX === curX && inY === curY\n\t\t\t\t\t\t\t&& outX === prevX && outY === prevY) {\n\t\t\t\t\t\tif (!skipLine) {\n\t\t\t\t\t\t\tvar dx = curX - prevX,\n\t\t\t\t\t\t\t\tdy = curY - prevY;\n\t\t\t\t\t\t\tparts.push(\n\t\t\t\t\t\t\t\t  dx === 0 ? 'v' + f.number(dy)\n\t\t\t\t\t\t\t\t: dy === 0 ? 'h' + f.number(dx)\n\t\t\t\t\t\t\t\t: 'l' + f.pair(dx, dy));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparts.push('c' + f.pair(outX - prevX, outY - prevY)\n\t\t\t\t\t\t\t\t + ' ' + f.pair( inX - prevX,  inY - prevY)\n\t\t\t\t\t\t\t\t + ' ' + f.pair(curX - prevX, curY - prevY));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprevX = curX;\n\t\t\t\tprevY = curY;\n\t\t\t\toutX = coords[4];\n\t\t\t\toutY = coords[5];\n\t\t\t}\n\t\n\t\t\tif (!length)\n\t\t\t\treturn '';\n\t\n\t\t\tfor (var i = 0; i < length; i++)\n\t\t\t\taddSegment(segments[i]);\n\t\t\tif (this._closed && length > 0) {\n\t\t\t\taddSegment(segments[0], true);\n\t\t\t\tparts.push('z');\n\t\t\t}\n\t\t\treturn parts.join('');\n\t\t},\n\t\n\t\tisEmpty: function() {\n\t\t\treturn !this._segments.length;\n\t\t},\n\t\n\t\t_transformContent: function(matrix) {\n\t\t\tvar segments = this._segments,\n\t\t\t\tcoords = new Array(6);\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++)\n\t\t\t\tsegments[i]._transformCoordinates(matrix, coords, true);\n\t\t\treturn true;\n\t\t},\n\t\n\t\t_add: function(segs, index) {\n\t\t\tvar segments = this._segments,\n\t\t\t\tcurves = this._curves,\n\t\t\t\tamount = segs.length,\n\t\t\t\tappend = index == null,\n\t\t\t\tindex = append ? segments.length : index;\n\t\t\tfor (var i = 0; i < amount; i++) {\n\t\t\t\tvar segment = segs[i];\n\t\t\t\tif (segment._path)\n\t\t\t\t\tsegment = segs[i] = segment.clone();\n\t\t\t\tsegment._path = this;\n\t\t\t\tsegment._index = index + i;\n\t\t\t\tif (segment._selection)\n\t\t\t\t\tthis._updateSelection(segment, 0, segment._selection);\n\t\t\t}\n\t\t\tif (append) {\n\t\t\t\tsegments.push.apply(segments, segs);\n\t\t\t} else {\n\t\t\t\tsegments.splice.apply(segments, [index, 0].concat(segs));\n\t\t\t\tfor (var i = index + amount, l = segments.length; i < l; i++)\n\t\t\t\t\tsegments[i]._index = i;\n\t\t\t}\n\t\t\tif (curves) {\n\t\t\t\tvar total = this._countCurves(),\n\t\t\t\t\tstart = index > 0 && index + amount - 1 === total ? index - 1\n\t\t\t\t\t\t: index,\n\t\t\t\t\tinsert = start,\n\t\t\t\t\tend = Math.min(start + amount, total);\n\t\t\t\tif (segs._curves) {\n\t\t\t\t\tcurves.splice.apply(curves, [start, 0].concat(segs._curves));\n\t\t\t\t\tinsert += segs._curves.length;\n\t\t\t\t}\n\t\t\t\tfor (var i = insert; i < end; i++)\n\t\t\t\t\tcurves.splice(i, 0, new Curve(this, null, null));\n\t\t\t\tthis._adjustCurves(start, end);\n\t\t\t}\n\t\t\tthis._changed(25);\n\t\t\treturn segs;\n\t\t},\n\t\n\t\t_adjustCurves: function(start, end) {\n\t\t\tvar segments = this._segments,\n\t\t\t\tcurves = this._curves,\n\t\t\t\tcurve;\n\t\t\tfor (var i = start; i < end; i++) {\n\t\t\t\tcurve = curves[i];\n\t\t\t\tcurve._path = this;\n\t\t\t\tcurve._segment1 = segments[i];\n\t\t\t\tcurve._segment2 = segments[i + 1] || segments[0];\n\t\t\t\tcurve._changed();\n\t\t\t}\n\t\t\tif (curve = curves[this._closed && !start ? segments.length - 1\n\t\t\t\t\t: start - 1]) {\n\t\t\t\tcurve._segment2 = segments[start] || segments[0];\n\t\t\t\tcurve._changed();\n\t\t\t}\n\t\t\tif (curve = curves[end]) {\n\t\t\t\tcurve._segment1 = segments[end];\n\t\t\t\tcurve._changed();\n\t\t\t}\n\t\t},\n\t\n\t\t_countCurves: function() {\n\t\t\tvar length = this._segments.length;\n\t\t\treturn !this._closed && length > 0 ? length - 1 : length;\n\t\t},\n\t\n\t\tadd: function(segment1 ) {\n\t\t\treturn arguments.length > 1 && typeof segment1 !== 'number'\n\t\t\t\t? this._add(Segment.readList(arguments))\n\t\t\t\t: this._add([ Segment.read(arguments) ])[0];\n\t\t},\n\t\n\t\tinsert: function(index, segment1 ) {\n\t\t\treturn arguments.length > 2 && typeof segment1 !== 'number'\n\t\t\t\t? this._add(Segment.readList(arguments, 1), index)\n\t\t\t\t: this._add([ Segment.read(arguments, 1) ], index)[0];\n\t\t},\n\t\n\t\taddSegment: function() {\n\t\t\treturn this._add([ Segment.read(arguments) ])[0];\n\t\t},\n\t\n\t\tinsertSegment: function(index ) {\n\t\t\treturn this._add([ Segment.read(arguments, 1) ], index)[0];\n\t\t},\n\t\n\t\taddSegments: function(segments) {\n\t\t\treturn this._add(Segment.readList(segments));\n\t\t},\n\t\n\t\tinsertSegments: function(index, segments) {\n\t\t\treturn this._add(Segment.readList(segments), index);\n\t\t},\n\t\n\t\tremoveSegment: function(index) {\n\t\t\treturn this.removeSegments(index, index + 1)[0] || null;\n\t\t},\n\t\n\t\tremoveSegments: function(start, end, _includeCurves) {\n\t\t\tstart = start || 0;\n\t\t\tend = Base.pick(end, this._segments.length);\n\t\t\tvar segments = this._segments,\n\t\t\t\tcurves = this._curves,\n\t\t\t\tcount = segments.length,\n\t\t\t\tremoved = segments.splice(start, end - start),\n\t\t\t\tamount = removed.length;\n\t\t\tif (!amount)\n\t\t\t\treturn removed;\n\t\t\tfor (var i = 0; i < amount; i++) {\n\t\t\t\tvar segment = removed[i];\n\t\t\t\tif (segment._selection)\n\t\t\t\t\tthis._updateSelection(segment, segment._selection, 0);\n\t\t\t\tsegment._index = segment._path = null;\n\t\t\t}\n\t\t\tfor (var i = start, l = segments.length; i < l; i++)\n\t\t\t\tsegments[i]._index = i;\n\t\t\tif (curves) {\n\t\t\t\tvar index = start > 0 && end === count + (this._closed ? 1 : 0)\n\t\t\t\t\t\t? start - 1\n\t\t\t\t\t\t: start,\n\t\t\t\t\tcurves = curves.splice(index, amount);\n\t\t\t\tfor (var i = curves.length - 1; i >= 0; i--)\n\t\t\t\t\tcurves[i]._path = null;\n\t\t\t\tif (_includeCurves)\n\t\t\t\t\tremoved._curves = curves.slice(1);\n\t\t\t\tthis._adjustCurves(index, index);\n\t\t\t}\n\t\t\tthis._changed(25);\n\t\t\treturn removed;\n\t\t},\n\t\n\t\tclear: '#removeSegments',\n\t\n\t\thasHandles: function() {\n\t\t\tvar segments = this._segments;\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tif (segments[i].hasHandles())\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\n\t\tclearHandles: function() {\n\t\t\tvar segments = this._segments;\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++)\n\t\t\t\tsegments[i].clearHandles();\n\t\t},\n\t\n\t\tgetLength: function() {\n\t\t\tif (this._length == null) {\n\t\t\t\tvar curves = this.getCurves(),\n\t\t\t\t\tlength = 0;\n\t\t\t\tfor (var i = 0, l = curves.length; i < l; i++)\n\t\t\t\t\tlength += curves[i].getLength();\n\t\t\t\tthis._length = length;\n\t\t\t}\n\t\t\treturn this._length;\n\t\t},\n\t\n\t\tgetArea: function() {\n\t\t\tvar area = this._area;\n\t\t\tif (area == null) {\n\t\t\t\tvar segments = this._segments,\n\t\t\t\t\tclosed = this._closed;\n\t\t\t\tarea = 0;\n\t\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\t\tvar last = i + 1 === l;\n\t\t\t\t\tarea += Curve.getArea(Curve.getValues(\n\t\t\t\t\t\t\tsegments[i], segments[last ? 0 : i + 1],\n\t\t\t\t\t\t\tnull, last && !closed));\n\t\t\t\t}\n\t\t\t\tthis._area = area;\n\t\t\t}\n\t\t\treturn area;\n\t\t},\n\t\n\t\tisFullySelected: function() {\n\t\t\tvar length = this._segments.length;\n\t\t\treturn this.isSelected() && length > 0 && this._segmentSelection\n\t\t\t\t\t=== length * 7;\n\t\t},\n\t\n\t\tsetFullySelected: function(selected) {\n\t\t\tif (selected)\n\t\t\t\tthis._selectSegments(true);\n\t\t\tthis.setSelected(selected);\n\t\t},\n\t\n\t\tsetSelection: function setSelection(selection) {\n\t\t\tif (!(selection & 1))\n\t\t\t\tthis._selectSegments(false);\n\t\t\tsetSelection.base.call(this, selection);\n\t\t},\n\t\n\t\t_selectSegments: function(selected) {\n\t\t\tvar segments = this._segments,\n\t\t\t\tlength = segments.length,\n\t\t\t\tselection = selected ? 7 : 0;\n\t\t\tthis._segmentSelection = selection * length;\n\t\t\tfor (var i = 0; i < length; i++)\n\t\t\t\tsegments[i]._selection = selection;\n\t\t},\n\t\n\t\t_updateSelection: function(segment, oldSelection, newSelection) {\n\t\t\tsegment._selection = newSelection;\n\t\t\tvar selection = this._segmentSelection += newSelection - oldSelection;\n\t\t\tif (selection > 0)\n\t\t\t\tthis.setSelected(true);\n\t\t},\n\t\n\t\tsplitAt: function(location) {\n\t\t\tvar loc = typeof location === 'number'\n\t\t\t\t\t? this.getLocationAt(location) : location,\n\t\t\t\tindex = loc && loc.index,\n\t\t\t\ttime = loc && loc.time,\n\t\t\t\ttMin = 4e-7,\n\t\t\t\ttMax = 1 - tMin;\n\t\t\tif (time >= tMax) {\n\t\t\t\tindex++;\n\t\t\t\ttime = 0;\n\t\t\t}\n\t\t\tvar curves = this.getCurves();\n\t\t\tif (index >= 0 && index < curves.length) {\n\t\t\t\tif (time >= tMin) {\n\t\t\t\t\tcurves[index++].divideAtTime(time);\n\t\t\t\t}\n\t\t\t\tvar segs = this.removeSegments(index, this._segments.length, true),\n\t\t\t\t\tpath;\n\t\t\t\tif (this._closed) {\n\t\t\t\t\tthis.setClosed(false);\n\t\t\t\t\tpath = this;\n\t\t\t\t} else {\n\t\t\t\t\tpath = new Path(Item.NO_INSERT);\n\t\t\t\t\tpath.insertAbove(this);\n\t\t\t\t\tpath.copyAttributes(this);\n\t\t\t\t}\n\t\t\t\tpath._add(segs, 0);\n\t\t\t\tthis.addSegment(segs[0]);\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\n\t\tsplit: function(index, time) {\n\t\t\tvar curve,\n\t\t\t\tlocation = time === undefined ? index\n\t\t\t\t\t: (curve = this.getCurves()[index])\n\t\t\t\t\t\t&& curve.getLocationAtTime(time);\n\t\t\treturn location != null ? this.splitAt(location) : null;\n\t\t},\n\t\n\t\tjoin: function(path, tolerance) {\n\t\t\tvar epsilon = tolerance || 0;\n\t\t\tif (path && path !== this) {\n\t\t\t\tvar segments = path._segments,\n\t\t\t\t\tlast1 = this.getLastSegment(),\n\t\t\t\t\tlast2 = path.getLastSegment();\n\t\t\t\tif (!last2)\n\t\t\t\t\treturn this;\n\t\t\t\tif (last1 && last1._point.isClose(last2._point, epsilon))\n\t\t\t\t\tpath.reverse();\n\t\t\t\tvar first2 = path.getFirstSegment();\n\t\t\t\tif (last1 && last1._point.isClose(first2._point, epsilon)) {\n\t\t\t\t\tlast1.setHandleOut(first2._handleOut);\n\t\t\t\t\tthis._add(segments.slice(1));\n\t\t\t\t} else {\n\t\t\t\t\tvar first1 = this.getFirstSegment();\n\t\t\t\t\tif (first1 && first1._point.isClose(first2._point, epsilon))\n\t\t\t\t\t\tpath.reverse();\n\t\t\t\t\tlast2 = path.getLastSegment();\n\t\t\t\t\tif (first1 && first1._point.isClose(last2._point, epsilon)) {\n\t\t\t\t\t\tfirst1.setHandleIn(last2._handleIn);\n\t\t\t\t\t\tthis._add(segments.slice(0, segments.length - 1), 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._add(segments.slice());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (path._closed)\n\t\t\t\t\tthis._add([segments[0]]);\n\t\t\t\tpath.remove();\n\t\t\t}\n\t\t\tvar first = this.getFirstSegment(),\n\t\t\t\tlast = this.getLastSegment();\n\t\t\tif (first !== last && first._point.isClose(last._point, epsilon)) {\n\t\t\t\tfirst.setHandleIn(last._handleIn);\n\t\t\t\tlast.remove();\n\t\t\t\tthis.setClosed(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\treduce: function(options) {\n\t\t\tvar curves = this.getCurves(),\n\t\t\t\tsimplify = options && options.simplify,\n\t\t\t\ttolerance = simplify ? 1e-7 : 0;\n\t\t\tfor (var i = curves.length - 1; i >= 0; i--) {\n\t\t\t\tvar curve = curves[i];\n\t\t\t\tif (!curve.hasHandles() && (curve.getLength() < tolerance\n\t\t\t\t\t\t|| simplify && curve.isCollinear(curve.getNext())))\n\t\t\t\t\tcurve.remove();\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\treverse: function() {\n\t\t\tthis._segments.reverse();\n\t\t\tfor (var i = 0, l = this._segments.length; i < l; i++) {\n\t\t\t\tvar segment = this._segments[i];\n\t\t\t\tvar handleIn = segment._handleIn;\n\t\t\t\tsegment._handleIn = segment._handleOut;\n\t\t\t\tsegment._handleOut = handleIn;\n\t\t\t\tsegment._index = i;\n\t\t\t}\n\t\t\tthis._curves = null;\n\t\t\tthis._changed(9);\n\t\t},\n\t\n\t\tflatten: function(flatness) {\n\t\t\tvar flattener = new PathFlattener(this, flatness || 0.25, 256, true),\n\t\t\t\tparts = flattener.parts,\n\t\t\t\tlength = parts.length,\n\t\t\t\tsegments = [];\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tsegments.push(new Segment(parts[i].curve.slice(0, 2)));\n\t\t\t}\n\t\t\tif (!this._closed && length > 0) {\n\t\t\t\tsegments.push(new Segment(parts[length - 1].curve.slice(6)));\n\t\t\t}\n\t\t\tthis.setSegments(segments);\n\t\t},\n\t\n\t\tsimplify: function(tolerance) {\n\t\t\tvar segments = new PathFitter(this).fit(tolerance || 2.5);\n\t\t\tif (segments)\n\t\t\t\tthis.setSegments(segments);\n\t\t\treturn !!segments;\n\t\t},\n\t\n\t\tsmooth: function(options) {\n\t\t\tvar that = this,\n\t\t\t\topts = options || {},\n\t\t\t\ttype = opts.type || 'asymmetric',\n\t\t\t\tsegments = this._segments,\n\t\t\t\tlength = segments.length,\n\t\t\t\tclosed = this._closed;\n\t\n\t\t\tfunction getIndex(value, _default) {\n\t\t\t\tvar index = value && value.index;\n\t\t\t\tif (index != null) {\n\t\t\t\t\tvar path = value.path;\n\t\t\t\t\tif (path && path !== that)\n\t\t\t\t\t\tthrow new Error(value._class + ' ' + index + ' of ' + path\n\t\t\t\t\t\t\t\t+ ' is not part of ' + that);\n\t\t\t\t\tif (_default && value instanceof Curve)\n\t\t\t\t\t\tindex++;\n\t\t\t\t} else {\n\t\t\t\t\tindex = typeof value === 'number' ? value : _default;\n\t\t\t\t}\n\t\t\t\treturn Math.min(index < 0 && closed\n\t\t\t\t\t\t? index % length\n\t\t\t\t\t\t: index < 0 ? index + length : index, length - 1);\n\t\t\t}\n\t\n\t\t\tvar loop = closed && opts.from === undefined && opts.to === undefined,\n\t\t\t\tfrom = getIndex(opts.from, 0),\n\t\t\t\tto = getIndex(opts.to, length - 1);\n\t\n\t\t\tif (from > to) {\n\t\t\t\tif (closed) {\n\t\t\t\t\tfrom -= length;\n\t\t\t\t} else {\n\t\t\t\t\tvar tmp = from;\n\t\t\t\t\tfrom = to;\n\t\t\t\t\tto = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (/^(?:asymmetric|continuous)$/.test(type)) {\n\t\t\t\tvar asymmetric = type === 'asymmetric',\n\t\t\t\t\tmin = Math.min,\n\t\t\t\t\tamount = to - from + 1,\n\t\t\t\t\tn = amount - 1,\n\t\t\t\t\tpadding = loop ? min(amount, 4) : 1,\n\t\t\t\t\tpaddingLeft = padding,\n\t\t\t\t\tpaddingRight = padding,\n\t\t\t\t\tknots = [];\n\t\t\t\tif (!closed) {\n\t\t\t\t\tpaddingLeft = min(1, from);\n\t\t\t\t\tpaddingRight = min(1, length - to - 1);\n\t\t\t\t}\n\t\t\t\tn += paddingLeft + paddingRight;\n\t\t\t\tif (n <= 1)\n\t\t\t\t\treturn;\n\t\t\t\tfor (var i = 0, j = from - paddingLeft; i <= n; i++, j++) {\n\t\t\t\t\tknots[i] = segments[(j < 0 ? j + length : j) % length]._point;\n\t\t\t\t}\n\t\n\t\t\t\tvar x = knots[0]._x + 2 * knots[1]._x,\n\t\t\t\t\ty = knots[0]._y + 2 * knots[1]._y,\n\t\t\t\t\tf = 2,\n\t\t\t\t\tn_1 = n - 1,\n\t\t\t\t\trx = [x],\n\t\t\t\t\try = [y],\n\t\t\t\t\trf = [f],\n\t\t\t\t\tpx = [],\n\t\t\t\t\tpy = [];\n\t\t\t\tfor (var i = 1; i < n; i++) {\n\t\t\t\t\tvar internal = i < n_1,\n\t\t\t\t\t\ta = internal ? 1 : asymmetric ? 1 : 2,\n\t\t\t\t\t\tb = internal ? 4 : asymmetric ? 2 : 7,\n\t\t\t\t\t\tu = internal ? 4 : asymmetric ? 3 : 8,\n\t\t\t\t\t\tv = internal ? 2 : asymmetric ? 0 : 1,\n\t\t\t\t\t\tm = a / f;\n\t\t\t\t\tf = rf[i] = b - m;\n\t\t\t\t\tx = rx[i] = u * knots[i]._x + v * knots[i + 1]._x - m * x;\n\t\t\t\t\ty = ry[i] = u * knots[i]._y + v * knots[i + 1]._y - m * y;\n\t\t\t\t}\n\t\n\t\t\t\tpx[n_1] = rx[n_1] / rf[n_1];\n\t\t\t\tpy[n_1] = ry[n_1] / rf[n_1];\n\t\t\t\tfor (var i = n - 2; i >= 0; i--) {\n\t\t\t\t\tpx[i] = (rx[i] - px[i + 1]) / rf[i];\n\t\t\t\t\tpy[i] = (ry[i] - py[i + 1]) / rf[i];\n\t\t\t\t}\n\t\t\t\tpx[n] = (3 * knots[n]._x - px[n_1]) / 2;\n\t\t\t\tpy[n] = (3 * knots[n]._y - py[n_1]) / 2;\n\t\n\t\t\t\tfor (var i = paddingLeft, max = n - paddingRight, j = from;\n\t\t\t\t\t\ti <= max; i++, j++) {\n\t\t\t\t\tvar segment = segments[j < 0 ? j + length : j],\n\t\t\t\t\t\tpt = segment._point,\n\t\t\t\t\t\thx = px[i] - pt._x,\n\t\t\t\t\t\thy = py[i] - pt._y;\n\t\t\t\t\tif (loop || i < max)\n\t\t\t\t\t\tsegment.setHandleOut(hx, hy);\n\t\t\t\t\tif (loop || i > paddingLeft)\n\t\t\t\t\t\tsegment.setHandleIn(-hx, -hy);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (var i = from; i <= to; i++) {\n\t\t\t\t\tsegments[i < 0 ? i + length : i].smooth(opts,\n\t\t\t\t\t\t\t!loop && i === from, !loop && i === to);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\ttoShape: function(insert) {\n\t\t\tif (!this._closed)\n\t\t\t\treturn null;\n\t\n\t\t\tvar segments = this._segments,\n\t\t\t\ttype,\n\t\t\t\tsize,\n\t\t\t\tradius,\n\t\t\t\ttopCenter;\n\t\n\t\t\tfunction isCollinear(i, j) {\n\t\t\t\tvar seg1 = segments[i],\n\t\t\t\t\tseg2 = seg1.getNext(),\n\t\t\t\t\tseg3 = segments[j],\n\t\t\t\t\tseg4 = seg3.getNext();\n\t\t\t\treturn seg1._handleOut.isZero() && seg2._handleIn.isZero()\n\t\t\t\t\t\t&& seg3._handleOut.isZero() && seg4._handleIn.isZero()\n\t\t\t\t\t\t&& seg2._point.subtract(seg1._point).isCollinear(\n\t\t\t\t\t\t\tseg4._point.subtract(seg3._point));\n\t\t\t}\n\t\n\t\t\tfunction isOrthogonal(i) {\n\t\t\t\tvar seg2 = segments[i],\n\t\t\t\t\tseg1 = seg2.getPrevious(),\n\t\t\t\t\tseg3 = seg2.getNext();\n\t\t\t\treturn seg1._handleOut.isZero() && seg2._handleIn.isZero()\n\t\t\t\t\t\t&& seg2._handleOut.isZero() && seg3._handleIn.isZero()\n\t\t\t\t\t\t&& seg2._point.subtract(seg1._point).isOrthogonal(\n\t\t\t\t\t\t\tseg3._point.subtract(seg2._point));\n\t\t\t}\n\t\n\t\t\tfunction isArc(i) {\n\t\t\t\tvar seg1 = segments[i],\n\t\t\t\t\tseg2 = seg1.getNext(),\n\t\t\t\t\thandle1 = seg1._handleOut,\n\t\t\t\t\thandle2 = seg2._handleIn,\n\t\t\t\t\tkappa = 0.5522847498307936;\n\t\t\t\tif (handle1.isOrthogonal(handle2)) {\n\t\t\t\t\tvar pt1 = seg1._point,\n\t\t\t\t\t\tpt2 = seg2._point,\n\t\t\t\t\t\tcorner = new Line(pt1, handle1, true).intersect(\n\t\t\t\t\t\t\t\tnew Line(pt2, handle2, true), true);\n\t\t\t\t\treturn corner && Numerical.isZero(handle1.getLength() /\n\t\t\t\t\t\t\tcorner.subtract(pt1).getLength() - kappa)\n\t\t\t\t\t\t&& Numerical.isZero(handle2.getLength() /\n\t\t\t\t\t\t\tcorner.subtract(pt2).getLength() - kappa);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tfunction getDistance(i, j) {\n\t\t\t\treturn segments[i]._point.getDistance(segments[j]._point);\n\t\t\t}\n\t\n\t\t\tif (!this.hasHandles() && segments.length === 4\n\t\t\t\t\t&& isCollinear(0, 2) && isCollinear(1, 3) && isOrthogonal(1)) {\n\t\t\t\ttype = Shape.Rectangle;\n\t\t\t\tsize = new Size(getDistance(0, 3), getDistance(0, 1));\n\t\t\t\ttopCenter = segments[1]._point.add(segments[2]._point).divide(2);\n\t\t\t} else if (segments.length === 8 && isArc(0) && isArc(2) && isArc(4)\n\t\t\t\t\t&& isArc(6) && isCollinear(1, 5) && isCollinear(3, 7)) {\n\t\t\t\ttype = Shape.Rectangle;\n\t\t\t\tsize = new Size(getDistance(1, 6), getDistance(0, 3));\n\t\t\t\tradius = size.subtract(new Size(getDistance(0, 7),\n\t\t\t\t\t\tgetDistance(1, 2))).divide(2);\n\t\t\t\ttopCenter = segments[3]._point.add(segments[4]._point).divide(2);\n\t\t\t} else if (segments.length === 4\n\t\t\t\t\t&& isArc(0) && isArc(1) && isArc(2) && isArc(3)) {\n\t\t\t\tif (Numerical.isZero(getDistance(0, 2) - getDistance(1, 3))) {\n\t\t\t\t\ttype = Shape.Circle;\n\t\t\t\t\tradius = getDistance(0, 2) / 2;\n\t\t\t\t} else {\n\t\t\t\t\ttype = Shape.Ellipse;\n\t\t\t\t\tradius = new Size(getDistance(2, 0) / 2, getDistance(3, 1) / 2);\n\t\t\t\t}\n\t\t\t\ttopCenter = segments[1]._point;\n\t\t\t}\n\t\n\t\t\tif (type) {\n\t\t\t\tvar center = this.getPosition(true),\n\t\t\t\t\tshape = new type({\n\t\t\t\t\t\tcenter: center,\n\t\t\t\t\t\tsize: size,\n\t\t\t\t\t\tradius: radius,\n\t\t\t\t\t\tinsert: false\n\t\t\t\t\t});\n\t\t\t\tshape.copyAttributes(this, true);\n\t\t\t\tshape._matrix.prepend(this._matrix);\n\t\t\t\tshape.rotate(topCenter.subtract(center).getAngle() + 90);\n\t\t\t\tif (insert === undefined || insert)\n\t\t\t\t\tshape.insertAbove(this);\n\t\t\t\treturn shape;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\n\t\ttoPath: '#clone',\n\t\n\t\tcompare: function compare(path) {\n\t\t\tif (!path || path instanceof CompoundPath)\n\t\t\t\treturn compare.base.call(this, path);\n\t\t\tvar curves1 = this.getCurves(),\n\t\t\t\tcurves2 = path.getCurves(),\n\t\t\t\tlength1 = curves1.length,\n\t\t\t\tlength2 = curves2.length;\n\t\t\tif (!length1 || !length2) {\n\t\t\t\treturn length1 ^ length2;\n\t\t\t}\n\t\t\tvar v1 = curves1[0].getValues(),\n\t\t\t\tvalues2 = [],\n\t\t\t\tpos1 = 0, pos2,\n\t\t\t\tend1 = 0, end2;\n\t\t\tfor (var i = 0; i < length2; i++) {\n\t\t\t\tvar v2 = curves2[i].getValues();\n\t\t\t\tvalues2.push(v2);\n\t\t\t\tvar overlaps = Curve.getOverlaps(v1, v2);\n\t\t\t\tif (overlaps) {\n\t\t\t\t\tpos2 = !i && overlaps[0][0] > 0 ? length2 - 1 : i;\n\t\t\t\t\tend2 = overlaps[0][1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar abs = Math.abs,\n\t\t\t\tepsilon = 4e-7,\n\t\t\t\tv2 = values2[pos2],\n\t\t\t\tstart2;\n\t\t\twhile (v1 && v2) {\n\t\t\t\tvar overlaps = Curve.getOverlaps(v1, v2);\n\t\t\t\tif (overlaps) {\n\t\t\t\t\tvar t1 = overlaps[0][0];\n\t\t\t\t\tif (abs(t1 - end1) < epsilon) {\n\t\t\t\t\t\tend1 = overlaps[1][0];\n\t\t\t\t\t\tif (end1 === 1) {\n\t\t\t\t\t\t\tv1 = ++pos1 < length1 ? curves1[pos1].getValues() : null;\n\t\t\t\t\t\t\tend1 = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar t2 = overlaps[0][1];\n\t\t\t\t\t\tif (abs(t2 - end2) < epsilon) {\n\t\t\t\t\t\t\tif (!start2)\n\t\t\t\t\t\t\t\tstart2 = [pos2, t2];\n\t\t\t\t\t\t\tend2 = overlaps[1][1];\n\t\t\t\t\t\t\tif (end2 === 1) {\n\t\t\t\t\t\t\t\tif (++pos2 >= length2)\n\t\t\t\t\t\t\t\t\tpos2 = 0;\n\t\t\t\t\t\t\t\tv2 = values2[pos2] || curves2[pos2].getValues();\n\t\t\t\t\t\t\t\tend2 = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!v1) {\n\t\t\t\t\t\t\t\treturn start2[0] === pos2 && start2[1] === end2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\n\t\t_hitTestSelf: function(point, options, viewMatrix, strokeMatrix) {\n\t\t\tvar that = this,\n\t\t\t\tstyle = this.getStyle(),\n\t\t\t\tsegments = this._segments,\n\t\t\t\tnumSegments = segments.length,\n\t\t\t\tclosed = this._closed,\n\t\t\t\ttolerancePadding = options._tolerancePadding,\n\t\t\t\tstrokePadding = tolerancePadding,\n\t\t\t\tjoin, cap, miterLimit,\n\t\t\t\tarea, loc, res,\n\t\t\t\thitStroke = options.stroke && style.hasStroke(),\n\t\t\t\thitFill = options.fill && style.hasFill(),\n\t\t\t\thitCurves = options.curves,\n\t\t\t\tstrokeRadius = hitStroke\n\t\t\t\t\t\t? style.getStrokeWidth() / 2\n\t\t\t\t\t\t: hitFill && options.tolerance > 0 || hitCurves\n\t\t\t\t\t\t\t? 0 : null;\n\t\t\tif (strokeRadius !== null) {\n\t\t\t\tif (strokeRadius > 0) {\n\t\t\t\t\tjoin = style.getStrokeJoin();\n\t\t\t\t\tcap = style.getStrokeCap();\n\t\t\t\t\tmiterLimit = strokeRadius * style.getMiterLimit();\n\t\t\t\t\tstrokePadding = strokePadding.add(\n\t\t\t\t\t\tPath._getStrokePadding(strokeRadius, strokeMatrix));\n\t\t\t\t} else {\n\t\t\t\t\tjoin = cap = 'round';\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction isCloseEnough(pt, padding) {\n\t\t\t\treturn point.subtract(pt).divide(padding).length <= 1;\n\t\t\t}\n\t\n\t\t\tfunction checkSegmentPoint(seg, pt, name) {\n\t\t\t\tif (!options.selected || pt.isSelected()) {\n\t\t\t\t\tvar anchor = seg._point;\n\t\t\t\t\tif (pt !== anchor)\n\t\t\t\t\t\tpt = pt.add(anchor);\n\t\t\t\t\tif (isCloseEnough(pt, strokePadding)) {\n\t\t\t\t\t\treturn new HitResult(name, that, {\n\t\t\t\t\t\t\tsegment: seg,\n\t\t\t\t\t\t\tpoint: pt\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction checkSegmentPoints(seg, ends) {\n\t\t\t\treturn (ends || options.segments)\n\t\t\t\t\t&& checkSegmentPoint(seg, seg._point, 'segment')\n\t\t\t\t\t|| (!ends && options.handles) && (\n\t\t\t\t\t\tcheckSegmentPoint(seg, seg._handleIn, 'handle-in') ||\n\t\t\t\t\t\tcheckSegmentPoint(seg, seg._handleOut, 'handle-out'));\n\t\t\t}\n\t\n\t\t\tfunction addToArea(point) {\n\t\t\t\tarea.add(point);\n\t\t\t}\n\t\n\t\t\tfunction checkSegmentStroke(segment) {\n\t\t\t\tif (join !== 'round' || cap !== 'round') {\n\t\t\t\t\tarea = new Path({ internal: true, closed: true });\n\t\t\t\t\tif (closed || segment._index > 0\n\t\t\t\t\t\t\t&& segment._index < numSegments - 1) {\n\t\t\t\t\t\tif (join !== 'round' && (segment._handleIn.isZero()\n\t\t\t\t\t\t\t\t|| segment._handleOut.isZero()))\n\t\t\t\t\t\t\tPath._addBevelJoin(segment, join, strokeRadius,\n\t\t\t\t\t\t\t\t   miterLimit, null, strokeMatrix, addToArea, true);\n\t\t\t\t\t} else if (cap !== 'round') {\n\t\t\t\t\t\tPath._addSquareCap(segment, cap, strokeRadius, null,\n\t\t\t\t\t\t\t\tstrokeMatrix, addToArea, true);\n\t\t\t\t\t}\n\t\t\t\t\tif (!area.isEmpty()) {\n\t\t\t\t\t\tvar loc;\n\t\t\t\t\t\treturn area.contains(point)\n\t\t\t\t\t\t\t|| (loc = area.getNearestLocation(point))\n\t\t\t\t\t\t\t\t&& isCloseEnough(loc.getPoint(), tolerancePadding);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn isCloseEnough(segment._point, strokePadding);\n\t\t\t}\n\t\n\t\t\tif (options.ends && !options.segments && !closed) {\n\t\t\t\tif (res = checkSegmentPoints(segments[0], true)\n\t\t\t\t\t\t|| checkSegmentPoints(segments[numSegments - 1], true))\n\t\t\t\t\treturn res;\n\t\t\t} else if (options.segments || options.handles) {\n\t\t\t\tfor (var i = 0; i < numSegments; i++)\n\t\t\t\t\tif (res = checkSegmentPoints(segments[i]))\n\t\t\t\t\t\treturn res;\n\t\t\t}\n\t\t\tif (strokeRadius !== null) {\n\t\t\t\tloc = this.getNearestLocation(point);\n\t\t\t\tif (loc) {\n\t\t\t\t\tvar time = loc.getTime();\n\t\t\t\t\tif (time === 0 || time === 1 && numSegments > 1) {\n\t\t\t\t\t\tif (!checkSegmentStroke(loc.getSegment()))\n\t\t\t\t\t\t\tloc = null;\n\t\t\t\t\t} else if (!isCloseEnough(loc.getPoint(), strokePadding)) {\n\t\t\t\t\t\tloc = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!loc && join === 'miter' && numSegments > 1) {\n\t\t\t\t\tfor (var i = 0; i < numSegments; i++) {\n\t\t\t\t\t\tvar segment = segments[i];\n\t\t\t\t\t\tif (point.getDistance(segment._point) <= miterLimit\n\t\t\t\t\t\t\t\t&& checkSegmentStroke(segment)) {\n\t\t\t\t\t\t\tloc = segment.getLocation();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !loc && hitFill && this._contains(point)\n\t\t\t\t\t|| loc && !hitStroke && !hitCurves\n\t\t\t\t\t\t? new HitResult('fill', this)\n\t\t\t\t\t\t: loc\n\t\t\t\t\t\t\t? new HitResult(hitStroke ? 'stroke' : 'curve', this, {\n\t\t\t\t\t\t\t\tlocation: loc,\n\t\t\t\t\t\t\t\tpoint: loc.getPoint()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t: null;\n\t\t}\n\t\n\t}, Base.each(Curve._evaluateMethods,\n\t\tfunction(name) {\n\t\t\tthis[name + 'At'] = function(offset) {\n\t\t\t\tvar loc = this.getLocationAt(offset);\n\t\t\t\treturn loc && loc[name]();\n\t\t\t};\n\t\t},\n\t{\n\t\tbeans: false,\n\t\n\t\tgetLocationOf: function() {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tcurves = this.getCurves();\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\tvar loc = curves[i].getLocationOf(point);\n\t\t\t\tif (loc)\n\t\t\t\t\treturn loc;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\n\t\tgetOffsetOf: function() {\n\t\t\tvar loc = this.getLocationOf.apply(this, arguments);\n\t\t\treturn loc ? loc.getOffset() : null;\n\t\t},\n\t\n\t\tgetLocationAt: function(offset) {\n\t\t\tvar curves = this.getCurves(),\n\t\t\t\tlength = 0;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\tvar start = length,\n\t\t\t\t\tcurve = curves[i];\n\t\t\t\tlength += curve.getLength();\n\t\t\t\tif (length > offset) {\n\t\t\t\t\treturn curve.getLocationAt(offset - start);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (curves.length > 0 && offset <= this.getLength())\n\t\t\t\treturn new CurveLocation(curves[curves.length - 1], 1);\n\t\t\treturn null;\n\t\t}\n\t\n\t}),\n\tnew function() {\n\t\n\t\tfunction drawHandles(ctx, segments, matrix, size) {\n\t\t\tvar half = size / 2,\n\t\t\t\tcoords = new Array(6),\n\t\t\t\tpX, pY;\n\t\n\t\t\tfunction drawHandle(index) {\n\t\t\t\tvar hX = coords[index],\n\t\t\t\t\thY = coords[index + 1];\n\t\t\t\tif (pX != hX || pY != hY) {\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(pX, pY);\n\t\t\t\t\tctx.lineTo(hX, hY);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(hX, hY, half, 0, Math.PI * 2, true);\n\t\t\t\t\tctx.fill();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tvar segment = segments[i],\n\t\t\t\t\tselection = segment._selection;\n\t\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\t\tpX = coords[0];\n\t\t\t\tpY = coords[1];\n\t\t\t\tif (selection & 2)\n\t\t\t\t\tdrawHandle(2);\n\t\t\t\tif (selection & 4)\n\t\t\t\t\tdrawHandle(4);\n\t\t\t\tctx.fillRect(pX - half, pY - half, size, size);\n\t\t\t\tif (!(selection & 1)) {\n\t\t\t\t\tvar fillStyle = ctx.fillStyle;\n\t\t\t\t\tctx.fillStyle = '#ffffff';\n\t\t\t\t\tctx.fillRect(pX - half + 1, pY - half + 1, size - 2, size - 2);\n\t\t\t\t\tctx.fillStyle = fillStyle;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction drawSegments(ctx, path, matrix) {\n\t\t\tvar segments = path._segments,\n\t\t\t\tlength = segments.length,\n\t\t\t\tcoords = new Array(6),\n\t\t\t\tfirst = true,\n\t\t\t\tcurX, curY,\n\t\t\t\tprevX, prevY,\n\t\t\t\tinX, inY,\n\t\t\t\toutX, outY;\n\t\n\t\t\tfunction drawSegment(segment) {\n\t\t\t\tif (matrix) {\n\t\t\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\t\t\tcurX = coords[0];\n\t\t\t\t\tcurY = coords[1];\n\t\t\t\t} else {\n\t\t\t\t\tvar point = segment._point;\n\t\t\t\t\tcurX = point._x;\n\t\t\t\t\tcurY = point._y;\n\t\t\t\t}\n\t\t\t\tif (first) {\n\t\t\t\t\tctx.moveTo(curX, curY);\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\tinX = coords[2];\n\t\t\t\t\t\tinY = coords[3];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar handle = segment._handleIn;\n\t\t\t\t\t\tinX = curX + handle._x;\n\t\t\t\t\t\tinY = curY + handle._y;\n\t\t\t\t\t}\n\t\t\t\t\tif (inX === curX && inY === curY\n\t\t\t\t\t\t\t&& outX === prevX && outY === prevY) {\n\t\t\t\t\t\tctx.lineTo(curX, curY);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.bezierCurveTo(outX, outY, inX, inY, curX, curY);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprevX = curX;\n\t\t\t\tprevY = curY;\n\t\t\t\tif (matrix) {\n\t\t\t\t\toutX = coords[4];\n\t\t\t\t\toutY = coords[5];\n\t\t\t\t} else {\n\t\t\t\t\tvar handle = segment._handleOut;\n\t\t\t\t\toutX = prevX + handle._x;\n\t\t\t\t\toutY = prevY + handle._y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor (var i = 0; i < length; i++)\n\t\t\t\tdrawSegment(segments[i]);\n\t\t\tif (path._closed && length > 0)\n\t\t\t\tdrawSegment(segments[0]);\n\t\t}\n\t\n\t\treturn {\n\t\t\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {\n\t\t\t\tvar dontStart = param.dontStart,\n\t\t\t\t\tdontPaint = param.dontFinish || param.clip,\n\t\t\t\t\tstyle = this.getStyle(),\n\t\t\t\t\thasFill = style.hasFill(),\n\t\t\t\t\thasStroke = style.hasStroke(),\n\t\t\t\t\tdashArray = style.getDashArray(),\n\t\t\t\t\tdashLength = !paper.support.nativeDash && hasStroke\n\t\t\t\t\t\t\t&& dashArray && dashArray.length;\n\t\n\t\t\t\tif (!dontStart)\n\t\t\t\t\tctx.beginPath();\n\t\n\t\t\t\tif (hasFill || hasStroke && !dashLength || dontPaint) {\n\t\t\t\t\tdrawSegments(ctx, this, strokeMatrix);\n\t\t\t\t\tif (this._closed)\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t}\n\t\n\t\t\t\tfunction getOffset(i) {\n\t\t\t\t\treturn dashArray[((i % dashLength) + dashLength) % dashLength];\n\t\t\t\t}\n\t\n\t\t\t\tif (!dontPaint && (hasFill || hasStroke)) {\n\t\t\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\t\t\tif (hasFill) {\n\t\t\t\t\t\tctx.fill(style.getFillRule());\n\t\t\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t\t\t}\n\t\t\t\t\tif (hasStroke) {\n\t\t\t\t\t\tif (dashLength) {\n\t\t\t\t\t\t\tif (!dontStart)\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tvar flattener = new PathFlattener(this, 0.25, 32, false,\n\t\t\t\t\t\t\t\t\tstrokeMatrix),\n\t\t\t\t\t\t\t\tlength = flattener.length,\n\t\t\t\t\t\t\t\tfrom = -style.getDashOffset(), to,\n\t\t\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\t\tfrom = from % length;\n\t\t\t\t\t\t\twhile (from > 0) {\n\t\t\t\t\t\t\t\tfrom -= getOffset(i--) + getOffset(i--);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twhile (from < length) {\n\t\t\t\t\t\t\t\tto = from + getOffset(i++);\n\t\t\t\t\t\t\t\tif (from > 0 || to > 0)\n\t\t\t\t\t\t\t\t\tflattener.drawPart(ctx,\n\t\t\t\t\t\t\t\t\t\t\tMath.max(from, 0), Math.max(to, 0));\n\t\t\t\t\t\t\t\tfrom = to + getOffset(i++);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t_drawSelected: function(ctx, matrix) {\n\t\t\t\tctx.beginPath();\n\t\t\t\tdrawSegments(ctx, this, matrix);\n\t\t\t\tctx.stroke();\n\t\t\t\tdrawHandles(ctx, this._segments, matrix, paper.settings.handleSize);\n\t\t\t}\n\t\t};\n\t},\n\tnew function() {\n\t\tfunction getCurrentSegment(that) {\n\t\t\tvar segments = that._segments;\n\t\t\tif (!segments.length)\n\t\t\t\tthrow new Error('Use a moveTo() command first');\n\t\t\treturn segments[segments.length - 1];\n\t\t}\n\t\n\t\treturn {\n\t\t\tmoveTo: function() {\n\t\t\t\tvar segments = this._segments;\n\t\t\t\tif (segments.length === 1)\n\t\t\t\t\tthis.removeSegment(0);\n\t\t\t\tif (!segments.length)\n\t\t\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);\n\t\t\t},\n\t\n\t\t\tmoveBy: function() {\n\t\t\t\tthrow new Error('moveBy() is unsupported on Path items.');\n\t\t\t},\n\t\n\t\t\tlineTo: function() {\n\t\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);\n\t\t\t},\n\t\n\t\t\tcubicCurveTo: function() {\n\t\t\t\tvar handle1 = Point.read(arguments),\n\t\t\t\t\thandle2 = Point.read(arguments),\n\t\t\t\t\tto = Point.read(arguments),\n\t\t\t\t\tcurrent = getCurrentSegment(this);\n\t\t\t\tcurrent.setHandleOut(handle1.subtract(current._point));\n\t\t\t\tthis._add([ new Segment(to, handle2.subtract(to)) ]);\n\t\t\t},\n\t\n\t\t\tquadraticCurveTo: function() {\n\t\t\t\tvar handle = Point.read(arguments),\n\t\t\t\t\tto = Point.read(arguments),\n\t\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\t\tthis.cubicCurveTo(\n\t\t\t\t\thandle.add(current.subtract(handle).multiply(1 / 3)),\n\t\t\t\t\thandle.add(to.subtract(handle).multiply(1 / 3)),\n\t\t\t\t\tto\n\t\t\t\t);\n\t\t\t},\n\t\n\t\t\tcurveTo: function() {\n\t\t\t\tvar through = Point.read(arguments),\n\t\t\t\t\tto = Point.read(arguments),\n\t\t\t\t\tt = Base.pick(Base.read(arguments), 0.5),\n\t\t\t\t\tt1 = 1 - t,\n\t\t\t\t\tcurrent = getCurrentSegment(this)._point,\n\t\t\t\t\thandle = through.subtract(current.multiply(t1 * t1))\n\t\t\t\t\t\t.subtract(to.multiply(t * t)).divide(2 * t * t1);\n\t\t\t\tif (handle.isNaN())\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Cannot put a curve through points with parameter = ' + t);\n\t\t\t\tthis.quadraticCurveTo(handle, to);\n\t\t\t},\n\t\n\t\t\tarcTo: function() {\n\t\t\t\tvar current = getCurrentSegment(this),\n\t\t\t\t\tfrom = current._point,\n\t\t\t\t\tto = Point.read(arguments),\n\t\t\t\t\tthrough,\n\t\t\t\t\tpeek = Base.peek(arguments),\n\t\t\t\t\tclockwise = Base.pick(peek, true),\n\t\t\t\t\tcenter, extent, vector, matrix;\n\t\t\t\tif (typeof clockwise === 'boolean') {\n\t\t\t\t\tvar middle = from.add(to).divide(2),\n\t\t\t\t\tthrough = middle.add(middle.subtract(from).rotate(\n\t\t\t\t\t\t\tclockwise ? -90 : 90));\n\t\t\t\t} else if (Base.remain(arguments) <= 2) {\n\t\t\t\t\tthrough = to;\n\t\t\t\t\tto = Point.read(arguments);\n\t\t\t\t} else {\n\t\t\t\t\tvar radius = Size.read(arguments),\n\t\t\t\t\t\tisZero = Numerical.isZero;\n\t\t\t\t\tif (isZero(radius.width) || isZero(radius.height))\n\t\t\t\t\t\treturn this.lineTo(to);\n\t\t\t\t\tvar rotation = Base.read(arguments),\n\t\t\t\t\t\tclockwise = !!Base.read(arguments),\n\t\t\t\t\t\tlarge = !!Base.read(arguments),\n\t\t\t\t\t\tmiddle = from.add(to).divide(2),\n\t\t\t\t\t\tpt = from.subtract(middle).rotate(-rotation),\n\t\t\t\t\t\tx = pt.x,\n\t\t\t\t\t\ty = pt.y,\n\t\t\t\t\t\tabs = Math.abs,\n\t\t\t\t\t\trx = abs(radius.width),\n\t\t\t\t\t\try = abs(radius.height),\n\t\t\t\t\t\trxSq = rx * rx,\n\t\t\t\t\t\trySq = ry * ry,\n\t\t\t\t\t\txSq = x * x,\n\t\t\t\t\t\tySq = y * y;\n\t\t\t\t\tvar factor = Math.sqrt(xSq / rxSq + ySq / rySq);\n\t\t\t\t\tif (factor > 1) {\n\t\t\t\t\t\trx *= factor;\n\t\t\t\t\t\try *= factor;\n\t\t\t\t\t\trxSq = rx * rx;\n\t\t\t\t\t\trySq = ry * ry;\n\t\t\t\t\t}\n\t\t\t\t\tfactor = (rxSq * rySq - rxSq * ySq - rySq * xSq) /\n\t\t\t\t\t\t\t(rxSq * ySq + rySq * xSq);\n\t\t\t\t\tif (abs(factor) < 1e-12)\n\t\t\t\t\t\tfactor = 0;\n\t\t\t\t\tif (factor < 0)\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');\n\t\t\t\t\tcenter = new Point(rx * y / ry, -ry * x / rx)\n\t\t\t\t\t\t\t.multiply((large === clockwise ? -1 : 1)\n\t\t\t\t\t\t\t\t* Math.sqrt(factor))\n\t\t\t\t\t\t\t.rotate(rotation).add(middle);\n\t\t\t\t\tmatrix = new Matrix().translate(center).rotate(rotation)\n\t\t\t\t\t\t\t.scale(rx, ry);\n\t\t\t\t\tvector = matrix._inverseTransform(from);\n\t\t\t\t\textent = vector.getDirectedAngle(matrix._inverseTransform(to));\n\t\t\t\t\tif (!clockwise && extent > 0)\n\t\t\t\t\t\textent -= 360;\n\t\t\t\t\telse if (clockwise && extent < 0)\n\t\t\t\t\t\textent += 360;\n\t\t\t\t}\n\t\t\t\tif (through) {\n\t\t\t\t\tvar l1 = new Line(from.add(through).divide(2),\n\t\t\t\t\t\t\t\tthrough.subtract(from).rotate(90), true),\n\t\t\t\t\t\tl2 = new Line(through.add(to).divide(2),\n\t\t\t\t\t\t\t\tto.subtract(through).rotate(90), true),\n\t\t\t\t\t\tline = new Line(from, to),\n\t\t\t\t\t\tthroughSide = line.getSide(through);\n\t\t\t\t\tcenter = l1.intersect(l2, true);\n\t\t\t\t\tif (!center) {\n\t\t\t\t\t\tif (!throughSide)\n\t\t\t\t\t\t\treturn this.lineTo(to);\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');\n\t\t\t\t\t}\n\t\t\t\t\tvector = from.subtract(center);\n\t\t\t\t\textent = vector.getDirectedAngle(to.subtract(center));\n\t\t\t\t\tvar centerSide = line.getSide(center);\n\t\t\t\t\tif (centerSide === 0) {\n\t\t\t\t\t\textent = throughSide * Math.abs(extent);\n\t\t\t\t\t} else if (throughSide === centerSide) {\n\t\t\t\t\t\textent += extent < 0 ? 360 : -360;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar ext = Math.abs(extent),\n\t\t\t\t\tcount = ext >= 360 ? 4 : Math.ceil(ext / 90),\n\t\t\t\t\tinc = extent / count,\n\t\t\t\t\thalf = inc * Math.PI / 360,\n\t\t\t\t\tz = 4 / 3 * Math.sin(half) / (1 + Math.cos(half)),\n\t\t\t\t\tsegments = [];\n\t\t\t\tfor (var i = 0; i <= count; i++) {\n\t\t\t\t\tvar pt = to,\n\t\t\t\t\t\tout = null;\n\t\t\t\t\tif (i < count) {\n\t\t\t\t\t\tout = vector.rotate(90).multiply(z);\n\t\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\t\tpt = matrix._transformPoint(vector);\n\t\t\t\t\t\t\tout = matrix._transformPoint(vector.add(out))\n\t\t\t\t\t\t\t\t\t.subtract(pt);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt = center.add(vector);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!i) {\n\t\t\t\t\t\tcurrent.setHandleOut(out);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _in = vector.rotate(-90).multiply(z);\n\t\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\t\t_in = matrix._transformPoint(vector.add(_in))\n\t\t\t\t\t\t\t\t\t.subtract(pt);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsegments.push(new Segment(pt, _in, out));\n\t\t\t\t\t}\n\t\t\t\t\tvector = vector.rotate(inc);\n\t\t\t\t}\n\t\t\t\tthis._add(segments);\n\t\t\t},\n\t\n\t\t\tlineBy: function() {\n\t\t\t\tvar to = Point.read(arguments),\n\t\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\t\tthis.lineTo(current.add(to));\n\t\t\t},\n\t\n\t\t\tcurveBy: function() {\n\t\t\t\tvar through = Point.read(arguments),\n\t\t\t\t\tto = Point.read(arguments),\n\t\t\t\t\tparameter = Base.read(arguments),\n\t\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\t\tthis.curveTo(current.add(through), current.add(to), parameter);\n\t\t\t},\n\t\n\t\t\tcubicCurveBy: function() {\n\t\t\t\tvar handle1 = Point.read(arguments),\n\t\t\t\t\thandle2 = Point.read(arguments),\n\t\t\t\t\tto = Point.read(arguments),\n\t\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\t\tthis.cubicCurveTo(current.add(handle1), current.add(handle2),\n\t\t\t\t\t\tcurrent.add(to));\n\t\t\t},\n\t\n\t\t\tquadraticCurveBy: function() {\n\t\t\t\tvar handle = Point.read(arguments),\n\t\t\t\t\tto = Point.read(arguments),\n\t\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\t\tthis.quadraticCurveTo(current.add(handle), current.add(to));\n\t\t\t},\n\t\n\t\t\tarcBy: function() {\n\t\t\t\tvar current = getCurrentSegment(this)._point,\n\t\t\t\t\tpoint = current.add(Point.read(arguments)),\n\t\t\t\t\tclockwise = Base.pick(Base.peek(arguments), true);\n\t\t\t\tif (typeof clockwise === 'boolean') {\n\t\t\t\t\tthis.arcTo(point, clockwise);\n\t\t\t\t} else {\n\t\t\t\t\tthis.arcTo(point, current.add(Point.read(arguments)));\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tclosePath: function(tolerance) {\n\t\t\t\tthis.setClosed(true);\n\t\t\t\tthis.join(this, tolerance);\n\t\t\t}\n\t\t};\n\t}, {\n\t\n\t\t_getBounds: function(matrix, options) {\n\t\t\tvar method = options.handle\n\t\t\t\t\t? 'getHandleBounds'\n\t\t\t\t\t: options.stroke\n\t\t\t\t\t? 'getStrokeBounds'\n\t\t\t\t\t: 'getBounds';\n\t\t\treturn Path[method](this._segments, this._closed, this, matrix, options);\n\t\t},\n\t\n\tstatics: {\n\t\tgetBounds: function(segments, closed, path, matrix, options, strokePadding) {\n\t\t\tvar first = segments[0];\n\t\t\tif (!first)\n\t\t\t\treturn new Rectangle();\n\t\t\tvar coords = new Array(6),\n\t\t\t\tprevCoords = first._transformCoordinates(matrix, new Array(6)),\n\t\t\t\tmin = prevCoords.slice(0, 2),\n\t\t\t\tmax = min.slice(),\n\t\t\t\troots = new Array(2);\n\t\n\t\t\tfunction processSegment(segment) {\n\t\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\t\tfor (var i = 0; i < 2; i++) {\n\t\t\t\t\tCurve._addBounds(\n\t\t\t\t\t\tprevCoords[i],\n\t\t\t\t\t\tprevCoords[i + 4],\n\t\t\t\t\t\tcoords[i + 2],\n\t\t\t\t\t\tcoords[i],\n\t\t\t\t\t\ti, strokePadding ? strokePadding[i] : 0, min, max, roots);\n\t\t\t\t}\n\t\t\t\tvar tmp = prevCoords;\n\t\t\t\tprevCoords = coords;\n\t\t\t\tcoords = tmp;\n\t\t\t}\n\t\n\t\t\tfor (var i = 1, l = segments.length; i < l; i++)\n\t\t\t\tprocessSegment(segments[i]);\n\t\t\tif (closed)\n\t\t\t\tprocessSegment(first);\n\t\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\t\t},\n\t\n\t\tgetStrokeBounds: function(segments, closed, path, matrix, options) {\n\t\t\tvar style = path.getStyle(),\n\t\t\t\tstroke = style.hasStroke(),\n\t\t\t\tstrokeWidth = style.getStrokeWidth(),\n\t\t\t\tstrokeMatrix = stroke && path._getStrokeMatrix(matrix, options),\n\t\t\t\tstrokePadding = stroke && Path._getStrokePadding(strokeWidth,\n\t\t\t\t\tstrokeMatrix),\n\t\t\t\tbounds = Path.getBounds(segments, closed, path, matrix, options,\n\t\t\t\t\tstrokePadding);\n\t\t\tif (!stroke)\n\t\t\t\treturn bounds;\n\t\t\tvar strokeRadius = strokeWidth / 2,\n\t\t\t\tjoin = style.getStrokeJoin(),\n\t\t\t\tcap = style.getStrokeCap(),\n\t\t\t\tmiterLimit = strokeRadius * style.getMiterLimit(),\n\t\t\t\tjoinBounds = new Rectangle(new Size(strokePadding));\n\t\n\t\t\tfunction addPoint(point) {\n\t\t\t\tbounds = bounds.include(point);\n\t\t\t}\n\t\n\t\t\tfunction addRound(segment) {\n\t\t\t\tbounds = bounds.unite(\n\t\t\t\t\t\tjoinBounds.setCenter(segment._point.transform(matrix)));\n\t\t\t}\n\t\n\t\t\tfunction addJoin(segment, join) {\n\t\t\t\tvar handleIn = segment._handleIn,\n\t\t\t\t\thandleOut = segment._handleOut;\n\t\t\t\tif (join === 'round' || !handleIn.isZero() && !handleOut.isZero()\n\t\t\t\t\t\t&& handleIn.isCollinear(handleOut)) {\n\t\t\t\t\taddRound(segment);\n\t\t\t\t} else {\n\t\t\t\t\tPath._addBevelJoin(segment, join, strokeRadius, miterLimit,\n\t\t\t\t\t\t\tmatrix, strokeMatrix, addPoint);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction addCap(segment, cap) {\n\t\t\t\tif (cap === 'round') {\n\t\t\t\t\taddRound(segment);\n\t\t\t\t} else {\n\t\t\t\t\tPath._addSquareCap(segment, cap, strokeRadius, matrix,\n\t\t\t\t\t\t\tstrokeMatrix, addPoint);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvar length = segments.length - (closed ? 0 : 1);\n\t\t\tfor (var i = 1; i < length; i++)\n\t\t\t\taddJoin(segments[i], join);\n\t\t\tif (closed) {\n\t\t\t\taddJoin(segments[0], join);\n\t\t\t} else if (length > 0) {\n\t\t\t\taddCap(segments[0], cap);\n\t\t\t\taddCap(segments[segments.length - 1], cap);\n\t\t\t}\n\t\t\treturn bounds;\n\t\t},\n\t\n\t\t_getStrokePadding: function(radius, matrix) {\n\t\t\tif (!matrix)\n\t\t\t\treturn [radius, radius];\n\t\t\tvar hor = new Point(radius, 0).transform(matrix),\n\t\t\t\tver = new Point(0, radius).transform(matrix),\n\t\t\t\tphi = hor.getAngleInRadians(),\n\t\t\t\ta = hor.getLength(),\n\t\t\t\tb = ver.getLength();\n\t\t\tvar sin = Math.sin(phi),\n\t\t\t\tcos = Math.cos(phi),\n\t\t\t\ttan = Math.tan(phi),\n\t\t\t\ttx = Math.atan2(b * tan, a),\n\t\t\t\tty = Math.atan2(b, tan * a);\n\t\t\treturn [Math.abs(a * Math.cos(tx) * cos + b * Math.sin(tx) * sin),\n\t\t\t\t\tMath.abs(b * Math.sin(ty) * cos + a * Math.cos(ty) * sin)];\n\t\t},\n\t\n\t\t_addBevelJoin: function(segment, join, radius, miterLimit, matrix,\n\t\t\t\tstrokeMatrix, addPoint, isArea) {\n\t\t\tvar curve2 = segment.getCurve(),\n\t\t\t\tcurve1 = curve2.getPrevious(),\n\t\t\t\tpoint = curve2.getPoint1().transform(matrix),\n\t\t\t\tnormal1 = curve1.getNormalAtTime(1).multiply(radius)\n\t\t\t\t\t.transform(strokeMatrix),\n\t\t\t\tnormal2 = curve2.getNormalAtTime(0).multiply(radius)\n\t\t\t\t\t.transform(strokeMatrix);\n\t\t\tif (normal1.getDirectedAngle(normal2) < 0) {\n\t\t\t\tnormal1 = normal1.negate();\n\t\t\t\tnormal2 = normal2.negate();\n\t\t\t}\n\t\t\tif (isArea) {\n\t\t\t\taddPoint(point);\n\t\t\t\taddPoint(point.add(normal1));\n\t\t\t}\n\t\t\tif (join === 'miter') {\n\t\t\t\tvar corner = new Line(point.add(normal1),\n\t\t\t\t\t\tnew Point(-normal1.y, normal1.x), true\n\t\t\t\t\t).intersect(new Line(point.add(normal2),\n\t\t\t\t\t\tnew Point(-normal2.y, normal2.x), true\n\t\t\t\t\t), true);\n\t\t\t\tif (corner && point.getDistance(corner) <= miterLimit) {\n\t\t\t\t\taddPoint(corner);\n\t\t\t\t\tif (!isArea)\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!isArea)\n\t\t\t\taddPoint(point.add(normal1));\n\t\t\taddPoint(point.add(normal2));\n\t\t},\n\t\n\t\t_addSquareCap: function(segment, cap, radius, matrix, strokeMatrix,\n\t\t\t\taddPoint, isArea) {\n\t\t\tvar point = segment._point.transform(matrix),\n\t\t\t\tloc = segment.getLocation(),\n\t\t\t\tnormal = loc.getNormal().multiply(radius).transform(strokeMatrix);\n\t\t\tif (isArea) {\n\t\t\t\taddPoint(point.subtract(normal));\n\t\t\t\taddPoint(point.add(normal));\n\t\t\t}\n\t\t\tif (cap === 'square') {\n\t\t\t\tpoint = point.add(normal.rotate(\n\t\t\t\t\t\tloc.getTime() === 0 ? -90 : 90));\n\t\t\t}\n\t\t\taddPoint(point.add(normal));\n\t\t\taddPoint(point.subtract(normal));\n\t\t},\n\t\n\t\tgetHandleBounds: function(segments, closed, path, matrix, options) {\n\t\t\tvar style = path.getStyle(),\n\t\t\t\tstroke = options.stroke && style.hasStroke(),\n\t\t\t\tstrokePadding,\n\t\t\t\tjoinPadding;\n\t\t\tif (stroke) {\n\t\t\t\tvar strokeMatrix = path._getStrokeMatrix(matrix, options),\n\t\t\t\t\tstrokeRadius = style.getStrokeWidth() / 2,\n\t\t\t\t\tjoinRadius = strokeRadius;\n\t\t\t\tif (style.getStrokeJoin() === 'miter')\n\t\t\t\t\tjoinRadius = strokeRadius * style.getMiterLimit();\n\t\t\t\tif (style.getStrokeCap() === 'square')\n\t\t\t\t\tjoinRadius = Math.max(joinRadius, strokeRadius * Math.sqrt(2));\n\t\t\t\tstrokePadding = Path._getStrokePadding(strokeRadius, strokeMatrix);\n\t\t\t\tjoinPadding = Path._getStrokePadding(joinRadius, strokeMatrix);\n\t\t\t}\n\t\t\tvar coords = new Array(6),\n\t\t\t\tx1 = Infinity,\n\t\t\t\tx2 = -x1,\n\t\t\t\ty1 = x1,\n\t\t\t\ty2 = x2;\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tvar segment = segments[i];\n\t\t\t\tsegment._transformCoordinates(matrix, coords);\n\t\t\t\tfor (var j = 0; j < 6; j += 2) {\n\t\t\t\t\tvar padding = !j ? joinPadding : strokePadding,\n\t\t\t\t\t\tpaddingX = padding ? padding[0] : 0,\n\t\t\t\t\t\tpaddingY = padding ? padding[1] : 0,\n\t\t\t\t\t\tx = coords[j],\n\t\t\t\t\t\ty = coords[j + 1],\n\t\t\t\t\t\txn = x - paddingX,\n\t\t\t\t\t\txx = x + paddingX,\n\t\t\t\t\t\tyn = y - paddingY,\n\t\t\t\t\t\tyx = y + paddingY;\n\t\t\t\t\tif (xn < x1) x1 = xn;\n\t\t\t\t\tif (xx > x2) x2 = xx;\n\t\t\t\t\tif (yn < y1) y1 = yn;\n\t\t\t\t\tif (yx > y2) y2 = yx;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t\t}\n\t}});\n\t\n\tPath.inject({ statics: new function() {\n\t\n\t\tvar kappa = 0.5522847498307936,\n\t\t\tellipseSegments = [\n\t\t\t\tnew Segment([-1, 0], [0, kappa ], [0, -kappa]),\n\t\t\t\tnew Segment([0, -1], [-kappa, 0], [kappa, 0 ]),\n\t\t\t\tnew Segment([1, 0], [0, -kappa], [0, kappa ]),\n\t\t\t\tnew Segment([0, 1], [kappa, 0 ], [-kappa, 0])\n\t\t\t];\n\t\n\t\tfunction createPath(segments, closed, args) {\n\t\t\tvar props = Base.getNamed(args),\n\t\t\t\tpath = new Path(props && props.insert === false && Item.NO_INSERT);\n\t\t\tpath._add(segments);\n\t\t\tpath._closed = closed;\n\t\t\treturn path.set(props);\n\t\t}\n\t\n\t\tfunction createEllipse(center, radius, args) {\n\t\t\tvar segments = new Array(4);\n\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\tvar segment = ellipseSegments[i];\n\t\t\t\tsegments[i] = new Segment(\n\t\t\t\t\tsegment._point.multiply(radius).add(center),\n\t\t\t\t\tsegment._handleIn.multiply(radius),\n\t\t\t\t\tsegment._handleOut.multiply(radius)\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn createPath(segments, true, args);\n\t\t}\n\t\n\t\treturn {\n\t\t\tLine: function() {\n\t\t\t\treturn createPath([\n\t\t\t\t\tnew Segment(Point.readNamed(arguments, 'from')),\n\t\t\t\t\tnew Segment(Point.readNamed(arguments, 'to'))\n\t\t\t\t], false, arguments);\n\t\t\t},\n\t\n\t\t\tCircle: function() {\n\t\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\t\tradius = Base.readNamed(arguments, 'radius');\n\t\t\t\treturn createEllipse(center, new Size(radius), arguments);\n\t\t\t},\n\t\n\t\t\tRectangle: function() {\n\t\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),\n\t\t\t\t\tradius = Size.readNamed(arguments, 'radius', 0,\n\t\t\t\t\t\t\t{ readNull: true }),\n\t\t\t\t\tbl = rect.getBottomLeft(true),\n\t\t\t\t\ttl = rect.getTopLeft(true),\n\t\t\t\t\ttr = rect.getTopRight(true),\n\t\t\t\t\tbr = rect.getBottomRight(true),\n\t\t\t\t\tsegments;\n\t\t\t\tif (!radius || radius.isZero()) {\n\t\t\t\t\tsegments = [\n\t\t\t\t\t\tnew Segment(bl),\n\t\t\t\t\t\tnew Segment(tl),\n\t\t\t\t\t\tnew Segment(tr),\n\t\t\t\t\t\tnew Segment(br)\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\tradius = Size.min(radius, rect.getSize(true).divide(2));\n\t\t\t\t\tvar rx = radius.width,\n\t\t\t\t\t\try = radius.height,\n\t\t\t\t\t\thx = rx * kappa,\n\t\t\t\t\t\thy = ry * kappa;\n\t\t\t\t\tsegments = [\n\t\t\t\t\t\tnew Segment(bl.add(rx, 0), null, [-hx, 0]),\n\t\t\t\t\t\tnew Segment(bl.subtract(0, ry), [0, hy]),\n\t\t\t\t\t\tnew Segment(tl.add(0, ry), null, [0, -hy]),\n\t\t\t\t\t\tnew Segment(tl.add(rx, 0), [-hx, 0], null),\n\t\t\t\t\t\tnew Segment(tr.subtract(rx, 0), null, [hx, 0]),\n\t\t\t\t\t\tnew Segment(tr.add(0, ry), [0, -hy], null),\n\t\t\t\t\t\tnew Segment(br.subtract(0, ry), null, [0, hy]),\n\t\t\t\t\t\tnew Segment(br.subtract(rx, 0), [hx, 0])\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\treturn createPath(segments, true, arguments);\n\t\t\t},\n\t\n\t\t\tRoundRectangle: '#Rectangle',\n\t\n\t\t\tEllipse: function() {\n\t\t\t\tvar ellipse = Shape._readEllipse(arguments);\n\t\t\t\treturn createEllipse(ellipse.center, ellipse.radius, arguments);\n\t\t\t},\n\t\n\t\t\tOval: '#Ellipse',\n\t\n\t\t\tArc: function() {\n\t\t\t\tvar from = Point.readNamed(arguments, 'from'),\n\t\t\t\t\tthrough = Point.readNamed(arguments, 'through'),\n\t\t\t\t\tto = Point.readNamed(arguments, 'to'),\n\t\t\t\t\tprops = Base.getNamed(arguments),\n\t\t\t\t\tpath = new Path(props && props.insert === false\n\t\t\t\t\t\t\t&& Item.NO_INSERT);\n\t\t\t\tpath.moveTo(from);\n\t\t\t\tpath.arcTo(through, to);\n\t\t\t\treturn path.set(props);\n\t\t\t},\n\t\n\t\t\tRegularPolygon: function() {\n\t\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\t\tsides = Base.readNamed(arguments, 'sides'),\n\t\t\t\t\tradius = Base.readNamed(arguments, 'radius'),\n\t\t\t\t\tstep = 360 / sides,\n\t\t\t\t\tthree = sides % 3 === 0,\n\t\t\t\t\tvector = new Point(0, three ? -radius : radius),\n\t\t\t\t\toffset = three ? -1 : 0.5,\n\t\t\t\t\tsegments = new Array(sides);\n\t\t\t\tfor (var i = 0; i < sides; i++)\n\t\t\t\t\tsegments[i] = new Segment(center.add(\n\t\t\t\t\t\tvector.rotate((i + offset) * step)));\n\t\t\t\treturn createPath(segments, true, arguments);\n\t\t\t},\n\t\n\t\t\tStar: function() {\n\t\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\t\tpoints = Base.readNamed(arguments, 'points') * 2,\n\t\t\t\t\tradius1 = Base.readNamed(arguments, 'radius1'),\n\t\t\t\t\tradius2 = Base.readNamed(arguments, 'radius2'),\n\t\t\t\t\tstep = 360 / points,\n\t\t\t\t\tvector = new Point(0, -1),\n\t\t\t\t\tsegments = new Array(points);\n\t\t\t\tfor (var i = 0; i < points; i++)\n\t\t\t\t\tsegments[i] = new Segment(center.add(vector.rotate(step * i)\n\t\t\t\t\t\t\t.multiply(i % 2 ? radius2 : radius1)));\n\t\t\t\treturn createPath(segments, true, arguments);\n\t\t\t}\n\t\t};\n\t}});\n\t\n\tvar CompoundPath = PathItem.extend({\n\t\t_class: 'CompoundPath',\n\t\t_serializeFields: {\n\t\t\tchildren: []\n\t\t},\n\t\tbeans: true,\n\t\n\t\tinitialize: function CompoundPath(arg) {\n\t\t\tthis._children = [];\n\t\t\tthis._namedChildren = {};\n\t\t\tif (!this._initialize(arg)) {\n\t\t\t\tif (typeof arg === 'string') {\n\t\t\t\t\tthis.setPathData(arg);\n\t\t\t\t} else {\n\t\t\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tinsertChildren: function insertChildren(index, items) {\n\t\t\tvar list = items,\n\t\t\t\tfirst = list[0];\n\t\t\tif (first && typeof first[0] === 'number')\n\t\t\t\tlist = [list];\n\t\t\tfor (var i = items.length - 1; i >= 0; i--) {\n\t\t\t\tvar item = list[i];\n\t\t\t\tif (list === items && !(item instanceof Path))\n\t\t\t\t\tlist = Base.slice(list);\n\t\t\t\tif (Array.isArray(item)) {\n\t\t\t\t\tlist[i] = new Path({ segments: item, insert: false });\n\t\t\t\t} else if (item instanceof CompoundPath) {\n\t\t\t\t\tlist.splice.apply(list, [i, 1].concat(item.removeChildren()));\n\t\t\t\t\titem.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn insertChildren.base.call(this, index, list);\n\t\t},\n\t\n\t\treduce: function reduce(options) {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\t\t\tvar path = children[i].reduce(options);\n\t\t\t\tif (path.isEmpty())\n\t\t\t\t\tpath.remove();\n\t\t\t}\n\t\t\tif (!children.length) {\n\t\t\t\tvar path = new Path(Item.NO_INSERT);\n\t\t\t\tpath.copyAttributes(this);\n\t\t\t\tpath.insertAbove(this);\n\t\t\t\tthis.remove();\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\treturn reduce.base.call(this);\n\t\t},\n\t\n\t\tisClosed: function() {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tif (!children[i]._closed)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t\n\t\tsetClosed: function(closed) {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].setClosed(closed);\n\t\t\t}\n\t\t},\n\t\n\t\tgetFirstSegment: function() {\n\t\t\tvar first = this.getFirstChild();\n\t\t\treturn first && first.getFirstSegment();\n\t\t},\n\t\n\t\tgetLastSegment: function() {\n\t\t\tvar last = this.getLastChild();\n\t\t\treturn last && last.getLastSegment();\n\t\t},\n\t\n\t\tgetCurves: function() {\n\t\t\tvar children = this._children,\n\t\t\t\tcurves = [];\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tcurves.push.apply(curves, children[i].getCurves());\n\t\t\treturn curves;\n\t\t},\n\t\n\t\tgetFirstCurve: function() {\n\t\t\tvar first = this.getFirstChild();\n\t\t\treturn first && first.getFirstCurve();\n\t\t},\n\t\n\t\tgetLastCurve: function() {\n\t\t\tvar last = this.getLastChild();\n\t\t\treturn last && last.getLastCurve();\n\t\t},\n\t\n\t\tgetArea: function() {\n\t\t\tvar children = this._children,\n\t\t\t\tarea = 0;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tarea += children[i].getArea();\n\t\t\treturn area;\n\t\t},\n\t\n\t\tgetLength: function() {\n\t\t\tvar children = this._children,\n\t\t\t\tlength = 0;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tlength += children[i].getLength();\n\t\t\treturn length;\n\t\t},\n\t\n\t\tgetPathData: function(_matrix, _precision) {\n\t\t\tvar children = this._children,\n\t\t\t\tpaths = [];\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tvar child = children[i],\n\t\t\t\t\tmx = child._matrix;\n\t\t\t\tpaths.push(child.getPathData(_matrix && !mx.isIdentity()\n\t\t\t\t\t\t? _matrix.appended(mx) : _matrix, _precision));\n\t\t\t}\n\t\t\treturn paths.join('');\n\t\t},\n\t\n\t\t_hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {\n\t\t\treturn _hitTestChildren.base.call(this, point,\n\t\t\t\t\toptions.class === Path || options.type === 'path' ? options\n\t\t\t\t\t\t: Base.set({}, options, { fill: false }),\n\t\t\t\t\tviewMatrix);\n\t\t},\n\t\n\t\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {\n\t\t\tvar children = this._children;\n\t\t\tif (!children.length)\n\t\t\t\treturn;\n\t\n\t\t\tparam = param.extend({ dontStart: true, dontFinish: true });\n\t\t\tctx.beginPath();\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].draw(ctx, param, strokeMatrix);\n\t\n\t\t\tif (!param.clip) {\n\t\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\t\tvar style = this._style;\n\t\t\t\tif (style.hasFill()) {\n\t\t\t\t\tctx.fill(style.getFillRule());\n\t\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\t\t\t\tif (style.hasStroke())\n\t\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t},\n\t\n\t\t_drawSelected: function(ctx, matrix, selectionItems) {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tvar child = children[i],\n\t\t\t\t\tmx = child._matrix;\n\t\t\t\tif (!selectionItems[child._id]) {\n\t\t\t\t\tchild._drawSelected(ctx, mx.isIdentity() ? matrix\n\t\t\t\t\t\t\t: matrix.appended(mx));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tnew function() {\n\t\tfunction getCurrentPath(that, check) {\n\t\t\tvar children = that._children;\n\t\t\tif (check && !children.length)\n\t\t\t\tthrow new Error('Use a moveTo() command first');\n\t\t\treturn children[children.length - 1];\n\t\t}\n\t\n\t\treturn Base.each(['lineTo', 'cubicCurveTo', 'quadraticCurveTo', 'curveTo',\n\t\t\t\t'arcTo', 'lineBy', 'cubicCurveBy', 'quadraticCurveBy', 'curveBy',\n\t\t\t\t'arcBy'],\n\t\t\tfunction(key) {\n\t\t\t\tthis[key] = function() {\n\t\t\t\t\tvar path = getCurrentPath(this, true);\n\t\t\t\t\tpath[key].apply(path, arguments);\n\t\t\t\t};\n\t\t\t}, {\n\t\t\t\tmoveTo: function() {\n\t\t\t\t\tvar current = getCurrentPath(this),\n\t\t\t\t\t\tpath = current && current.isEmpty() ? current\n\t\t\t\t\t\t\t\t: new Path(Item.NO_INSERT);\n\t\t\t\t\tif (path !== current)\n\t\t\t\t\t\tthis.addChild(path);\n\t\t\t\t\tpath.moveTo.apply(path, arguments);\n\t\t\t\t},\n\t\n\t\t\t\tmoveBy: function() {\n\t\t\t\t\tvar current = getCurrentPath(this, true),\n\t\t\t\t\t\tlast = current && current.getLastSegment(),\n\t\t\t\t\t\tpoint = Point.read(arguments);\n\t\t\t\t\tthis.moveTo(last ? point.add(last._point) : point);\n\t\t\t\t},\n\t\n\t\t\t\tclosePath: function(tolerance) {\n\t\t\t\t\tgetCurrentPath(this, true).closePath(tolerance);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}, Base.each(['reverse', 'flatten', 'simplify', 'smooth'], function(key) {\n\t\tthis[key] = function(param) {\n\t\t\tvar children = this._children,\n\t\t\t\tres;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tres = children[i][key](param) || res;\n\t\t\t}\n\t\t\treturn res;\n\t\t};\n\t}, {}));\n\t\n\tPathItem.inject(new function() {\n\t\tvar min = Math.min,\n\t\t\tmax = Math.max,\n\t\t\tabs = Math.abs,\n\t\t\toperators = {\n\t\t\t\tunite:     { 1: true },\n\t\t\t\tintersect: { 2: true },\n\t\t\t\tsubtract:  { 1: true },\n\t\t\t\texclude:   { 1: true }\n\t\t\t};\n\t\n\t\tfunction preparePath(path, resolve) {\n\t\t\tvar res = path.clone(false).reduce({ simplify: true })\n\t\t\t\t\t.transform(null, true, true);\n\t\t\treturn resolve\n\t\t\t\t? res.resolveCrossings().reorient(res.getFillRule() === 'nonzero')\n\t\t\t\t: res;\n\t\t}\n\t\n\t\tfunction createResult(ctor, paths, reduce, path1, path2, options) {\n\t\t\tvar result = new ctor(Item.NO_INSERT);\n\t\t\tresult.addChildren(paths, true);\n\t\t\tif (reduce)\n\t\t\t\tresult = result.reduce({ simplify: true });\n\t\t\tif (!(options && options.insert === false)) {\n\t\t\t\tresult.insertAbove(path2 && path1.isSibling(path2)\n\t\t\t\t\t\t&& path1.getIndex() < path2.getIndex() ? path2 : path1);\n\t\t\t}\n\t\t\tresult.copyAttributes(path1, true);\n\t\t\treturn result;\n\t\t}\n\t\n\t\tfunction computeBoolean(path1, path2, operation, options) {\n\t\t\tif (options && options.stroke &&\n\t\t\t\t\t/^(subtract|intersect)$/.test(operation))\n\t\t\t\treturn computeStrokeBoolean(path1, path2, operation === 'subtract');\n\t\t\tvar _path1 = preparePath(path1, true),\n\t\t\t\t_path2 = path2 && path1 !== path2 && preparePath(path2, true),\n\t\t\t\toperator = operators[operation];\n\t\t\toperator[operation] = true;\n\t\t\tif (_path2 && (operator.subtract || operator.exclude)\n\t\t\t\t\t^ (_path2.isClockwise() ^ _path1.isClockwise()))\n\t\t\t\t_path2.reverse();\n\t\t\tvar crossings = divideLocations(\n\t\t\t\t\tCurveLocation.expand(_path1.getCrossings(_path2))),\n\t\t\t\tpaths1 = _path1._children || [_path1],\n\t\t\t\tpaths2 = _path2 && (_path2._children || [_path2]),\n\t\t\t\tsegments = [],\n\t\t\t\tcurves = [],\n\t\t\t\tpaths;\n\t\n\t\t\tif (!crossings.length) {\n\t\t\t\tvar ok = true;\n\t\t\t\tif (paths2) {\n\t\t\t\t\tfor (var i1 = 0, l1 = paths1.length; i1 < l1 && ok; i1++) {\n\t\t\t\t\t\tvar bounds1 = paths1[i1].getBounds();\n\t\t\t\t\t\tfor (var i2 = 0, l2 = paths2.length; i2 < l2 && ok; i2++) {\n\t\t\t\t\t\t\tvar bounds2 = paths2[i2].getBounds();\n\t\t\t\t\t\t\tok = !bounds1._containsRectangle(bounds2) &&\n\t\t\t\t\t\t\t\t !bounds2._containsRectangle(bounds1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ok) {\n\t\t\t\t\tpaths = operator.unite || operator.exclude ? [_path1, _path2]\n\t\t\t\t\t\t\t: operator.subtract ? [_path1]\n\t\t\t\t\t\t\t: operator.intersect ? [new Path(Item.NO_INSERT)]\n\t\t\t\t\t\t\t: null;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction collect(paths) {\n\t\t\t\tfor (var i = 0, l = paths.length; i < l; i++) {\n\t\t\t\t\tvar path = paths[i];\n\t\t\t\t\tsegments.push.apply(segments, path._segments);\n\t\t\t\t\tcurves.push.apply(curves, path.getCurves());\n\t\t\t\t\tpath._overlapsOnly = true;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (!paths) {\n\t\t\t\tcollect(paths1);\n\t\t\t\tif (paths2)\n\t\t\t\t\tcollect(paths2);\n\t\t\t\tfor (var i = 0, l = crossings.length; i < l; i++) {\n\t\t\t\t\tpropagateWinding(crossings[i]._segment, _path1, _path2, curves,\n\t\t\t\t\t\t\toperator);\n\t\t\t\t}\n\t\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\t\tvar segment = segments[i],\n\t\t\t\t\t\tinter = segment._intersection;\n\t\t\t\t\tif (segment._winding == null) {\n\t\t\t\t\t\tpropagateWinding(segment, _path1, _path2, curves, operator);\n\t\t\t\t\t}\n\t\t\t\t\tif (!(inter && inter._overlap))\n\t\t\t\t\t\tsegment._path._overlapsOnly = false;\n\t\t\t\t}\n\t\t\t\tpaths = tracePaths(segments, operator);\n\t\t\t}\n\t\n\t\t\treturn createResult(CompoundPath, paths, true, path1, path2, options);\n\t\t}\n\t\n\t\tfunction computeStrokeBoolean(path1, path2, subtract) {\n\t\t\tvar _path1 = preparePath(path1),\n\t\t\t\t_path2 = preparePath(path2),\n\t\t\t\tcrossings = _path1.getCrossings(_path2),\n\t\t\t\tpaths = [];\n\t\n\t\t\tfunction addPath(path) {\n\t\t\t\tif (_path2.contains(path.getPointAt(path.getLength() / 2))\n\t\t\t\t\t\t^ subtract) {\n\t\t\t\t\tpaths.unshift(path);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor (var i = crossings.length - 1; i >= 0; i--) {\n\t\t\t\tvar path = crossings[i].split();\n\t\t\t\tif (path) {\n\t\t\t\t\tif (addPath(path))\n\t\t\t\t\t\tpath.getFirstSegment().setHandleIn(0, 0);\n\t\t\t\t\t_path1.getLastSegment().setHandleOut(0, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\taddPath(_path1);\n\t\t\treturn createResult(Group, paths, false, path1, path2);\n\t\t}\n\t\n\t\tfunction linkIntersections(from, to) {\n\t\t\tvar prev = from;\n\t\t\twhile (prev) {\n\t\t\t\tif (prev === to)\n\t\t\t\t\treturn;\n\t\t\t\tprev = prev._previous;\n\t\t\t}\n\t\t\twhile (from._next && from._next !== to)\n\t\t\t\tfrom = from._next;\n\t\t\tif (!from._next) {\n\t\t\t\twhile (to._previous)\n\t\t\t\t\tto = to._previous;\n\t\t\t\tfrom._next = to;\n\t\t\t\tto._previous = from;\n\t\t\t}\n\t\t}\n\t\n\t\tfunction divideLocations(locations, include) {\n\t\t\tvar results = include && [],\n\t\t\t\ttMin = 4e-7,\n\t\t\t\ttMax = 1 - tMin,\n\t\t\t\tnoHandles = false,\n\t\t\t\tclearCurves = [],\n\t\t\t\tprevCurve,\n\t\t\t\tprevTime;\n\t\n\t\t\tfor (var i = locations.length - 1; i >= 0; i--) {\n\t\t\t\tvar loc = locations[i];\n\t\t\t\tif (include) {\n\t\t\t\t\tif (!include(loc))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tresults.unshift(loc);\n\t\t\t\t}\n\t\t\t\tvar curve = loc._curve,\n\t\t\t\t\ttime = loc._time,\n\t\t\t\t\torigTime = time,\n\t\t\t\t\tsegment;\n\t\t\t\tif (curve !== prevCurve) {\n\t\t\t\t\tnoHandles = !curve.hasHandles();\n\t\t\t\t} else if (prevTime >= tMin && prevTime <= tMax ) {\n\t\t\t\t\ttime /= prevTime;\n\t\t\t\t}\n\t\t\t\tif (time < tMin) {\n\t\t\t\t\tsegment = curve._segment1;\n\t\t\t\t} else if (time > tMax) {\n\t\t\t\t\tsegment = curve._segment2;\n\t\t\t\t} else {\n\t\t\t\t\tvar newCurve = curve.divideAtTime(time, true);\n\t\t\t\t\tif (noHandles)\n\t\t\t\t\t\tclearCurves.push(curve, newCurve);\n\t\t\t\t\tsegment = newCurve._segment1;\n\t\t\t\t}\n\t\t\t\tloc._setSegment(segment);\n\t\t\t\tvar inter = segment._intersection,\n\t\t\t\t\tdest = loc._intersection;\n\t\t\t\tif (inter) {\n\t\t\t\t\tlinkIntersections(inter, dest);\n\t\t\t\t\tvar other = inter;\n\t\t\t\t\twhile (other) {\n\t\t\t\t\t\tlinkIntersections(other._intersection, inter);\n\t\t\t\t\t\tother = other._next;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsegment._intersection = dest;\n\t\t\t\t}\n\t\t\t\tprevCurve = curve;\n\t\t\t\tprevTime = origTime;\n\t\t\t}\n\t\t\tfor (var i = 0, l = clearCurves.length; i < l; i++) {\n\t\t\t\tclearCurves[i].clearHandles();\n\t\t\t}\n\t\t\treturn results || locations;\n\t\t}\n\t\n\t\tfunction getWinding(point, curves, dir, closed, dontFlip) {\n\t\t\tvar epsilon = 1e-8,\n\t\t\t\tia = dir ? 1 : 0,\n\t\t\t\tio = dir ? 0 : 1,\n\t\t\t\tpv = [point.x, point.y],\n\t\t\t\tpa = pv[ia],\n\t\t\t\tpo = pv[io],\n\t\t\t\tpaL = pa - epsilon,\n\t\t\t\tpaR = pa + epsilon,\n\t\t\t\twindingL = 0,\n\t\t\t\twindingR = 0,\n\t\t\t\tpathWindingL = 0,\n\t\t\t\tpathWindingR = 0,\n\t\t\t\tonPath = false,\n\t\t\t\tonPathWinding = 0,\n\t\t\t\tonPathCount = 0,\n\t\t\t\troots = [],\n\t\t\t\tvPrev,\n\t\t\t\tvClose;\n\t\n\t\t\tfunction addWinding(v) {\n\t\t\t\tvar o0 = v[io],\n\t\t\t\t\to3 = v[io + 6];\n\t\t\t\tif (po < min(o0, o3) || po > max(o0, o3)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar a0 = v[ia],\n\t\t\t\t\ta1 = v[ia + 2],\n\t\t\t\t\ta2 = v[ia + 4],\n\t\t\t\t\ta3 = v[ia + 6];\n\t\t\t\tif (o0 === o3) {\n\t\t\t\t\tif (a1 < paR && a3 > paL || a3 < paR && a1 > paL) {\n\t\t\t\t\t\tonPath = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar t =   po === o0 ? 0\n\t\t\t\t\t\t: po === o3 ? 1\n\t\t\t\t\t\t: paL > max(a0, a1, a2, a3) || paR < min(a0, a1, a2, a3)\n\t\t\t\t\t\t? 0.5\n\t\t\t\t\t\t: Curve.solveCubic(v, io, po, roots, 0, 1) === 1\n\t\t\t\t\t\t\t? roots[0]\n\t\t\t\t\t\t\t: 0.5,\n\t\t\t\t\ta =   t === 0 ? a0\n\t\t\t\t\t\t: t === 1 ? a3\n\t\t\t\t\t\t: Curve.getPoint(v, t)[dir ? 'y' : 'x'],\n\t\t\t\t\twinding = o0 > o3 ? 1 : -1,\n\t\t\t\t\twindingPrev = vPrev[io] > vPrev[io + 6] ? 1 : -1,\n\t\t\t\t\ta3Prev = vPrev[ia + 6];\n\t\t\t\tif (po !== o0) {\n\t\t\t\t\tif (a < paL) {\n\t\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t\t} else if (a > paR) {\n\t\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tonPath = true;\n\t\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t\t}\n\t\t\t\t} else if (winding !== windingPrev) {\n\t\t\t\t\tif (a3Prev < paR) {\n\t\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t\t}\n\t\t\t\t\tif (a3Prev > paL) {\n\t\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t\t}\n\t\t\t\t} else if (a3Prev < paL && a > paL || a3Prev > paR && a < paR) {\n\t\t\t\t\tonPath = true;\n\t\t\t\t\tif (a3Prev < paL) {\n\t\t\t\t\t\tpathWindingR += winding;\n\t\t\t\t\t} else if (a3Prev > paR) {\n\t\t\t\t\t\tpathWindingL += winding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvPrev = v;\n\t\t\t\treturn !dontFlip && a > paL && a < paR\n\t\t\t\t\t\t&& Curve.getTangent(v, t)[dir ? 'x' : 'y'] === 0\n\t\t\t\t\t\t&& getWinding(point, curves, dir ? 0 : 1, closed, true);\n\t\t\t}\n\t\n\t\t\tfunction handleCurve(v) {\n\t\t\t\tvar o0 = v[io],\n\t\t\t\t\to1 = v[io + 2],\n\t\t\t\t\to2 = v[io + 4],\n\t\t\t\t\to3 = v[io + 6];\n\t\t\t\tif (po <= max(o0, o1, o2, o3) && po >= min(o0, o1, o2, o3)) {\n\t\t\t\t\tvar a0 = v[ia],\n\t\t\t\t\t\ta1 = v[ia + 2],\n\t\t\t\t\t\ta2 = v[ia + 4],\n\t\t\t\t\t\ta3 = v[ia + 6],\n\t\t\t\t\t\tmonoCurves = paL > max(a0, a1, a2, a3) ||\n\t\t\t\t\t\t\t\t\t paR < min(a0, a1, a2, a3)\n\t\t\t\t\t\t\t\t? [v] : Curve.getMonoCurves(v, dir),\n\t\t\t\t\t\tres;\n\t\t\t\t\tfor (var i = 0, l = monoCurves.length; i < l; i++) {\n\t\t\t\t\t\tif (res = addWinding(monoCurves[i]))\n\t\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\tvar curve = curves[i],\n\t\t\t\t\tpath = curve._path,\n\t\t\t\t\tv = curve.getValues(),\n\t\t\t\t\tres;\n\t\t\t\tif (!i || curves[i - 1]._path !== path) {\n\t\t\t\t\tvPrev = null;\n\t\t\t\t\tif (!path._closed) {\n\t\t\t\t\t\tvClose = Curve.getValues(\n\t\t\t\t\t\t\t\tpath.getLastCurve().getSegment2(),\n\t\t\t\t\t\t\t\tcurve.getSegment1(),\n\t\t\t\t\t\t\t\tnull, !closed);\n\t\t\t\t\t\tif (vClose[io] !== vClose[io + 6]) {\n\t\t\t\t\t\t\tvPrev = vClose;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (!vPrev) {\n\t\t\t\t\t\tvPrev = v;\n\t\t\t\t\t\tvar prev = path.getLastCurve();\n\t\t\t\t\t\twhile (prev && prev !== curve) {\n\t\t\t\t\t\t\tvar v2 = prev.getValues();\n\t\t\t\t\t\t\tif (v2[io] !== v2[io + 6]) {\n\t\t\t\t\t\t\t\tvPrev = v2;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprev = prev.getPrevious();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (res = handleCurve(v))\n\t\t\t\t\treturn res;\n\t\n\t\t\t\tif (i + 1 === l || curves[i + 1]._path !== path) {\n\t\t\t\t\tif (vClose && (res = handleCurve(vClose)))\n\t\t\t\t\t\treturn res;\n\t\t\t\t\tif (onPath && !pathWindingL && !pathWindingR) {\n\t\t\t\t\t\tvar add = path.isClockwise(closed) ^ dir ? 1 : -1;\n\t\t\t\t\t\twindingL += add;\n\t\t\t\t\t\twindingR -= add;\n\t\t\t\t\t\tonPathWinding += add;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twindingL += pathWindingL;\n\t\t\t\t\t\twindingR += pathWindingR;\n\t\t\t\t\t\tpathWindingL = pathWindingR = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (onPath)\n\t\t\t\t\t\tonPathCount++;\n\t\t\t\t\tonPath = false;\n\t\t\t\t\tvClose = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!windingL && !windingR) {\n\t\t\t\twindingL = windingR = onPathWinding;\n\t\t\t}\n\t\t\twindingL = windingL && (2 - abs(windingL) % 2);\n\t\t\twindingR = windingR && (2 - abs(windingR) % 2);\n\t\t\treturn {\n\t\t\t\twinding: max(windingL, windingR),\n\t\t\t\twindingL: windingL,\n\t\t\t\twindingR: windingR,\n\t\t\t\tonContour: !windingL ^ !windingR,\n\t\t\t\tonPathCount: onPathCount\n\t\t\t};\n\t\t}\n\t\n\t\tfunction propagateWinding(segment, path1, path2, curves, operator) {\n\t\t\tvar chain = [],\n\t\t\t\tstart = segment,\n\t\t\t\ttotalLength = 0,\n\t\t\t\twinding;\n\t\t\tdo {\n\t\t\t\tvar curve = segment.getCurve(),\n\t\t\t\t\tlength = curve.getLength();\n\t\t\t\tchain.push({ segment: segment, curve: curve, length: length });\n\t\t\t\ttotalLength += length;\n\t\t\t\tsegment = segment.getNext();\n\t\t\t} while (segment && !segment._intersection && segment !== start);\n\t\t\tvar length = totalLength / 2;\n\t\t\tfor (var j = 0, l = chain.length; j < l; j++) {\n\t\t\t\tvar entry = chain[j],\n\t\t\t\t\tcurveLength = entry.length;\n\t\t\t\tif (length <= curveLength) {\n\t\t\t\t\tvar curve = entry.curve,\n\t\t\t\t\t\tpath = curve._path,\n\t\t\t\t\t\tparent = path._parent,\n\t\t\t\t\t\tt = curve.getTimeAt(length),\n\t\t\t\t\t\tpt = curve.getPointAtTime(t),\n\t\t\t\t\t\tdir = abs(curve.getTangentAtTime(t).normalize().y) < 0.5\n\t\t\t\t\t\t\t\t? 1 : 0;\n\t\t\t\t\tif (parent instanceof CompoundPath)\n\t\t\t\t\t\tpath = parent;\n\t\t\t\t\twinding = !(operator.subtract && path2 && (\n\t\t\t\t\t\t\tpath === path1 &&\n\t\t\t\t\t\t\t\tpath2._getWinding(pt, dir, true).winding ||\n\t\t\t\t\t\t\tpath === path2 &&\n\t\t\t\t\t\t\t\t!path1._getWinding(pt, dir, true).winding))\n\t\t\t\t\t\t\t? getWinding(pt, curves, dir, true)\n\t\t\t\t\t\t\t: { winding: 0 };\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlength -= curveLength;\n\t\t\t}\n\t\t\tfor (var j = chain.length - 1; j >= 0; j--) {\n\t\t\t\tchain[j].segment._winding = winding;\n\t\t\t}\n\t\t}\n\t\n\t\tfunction tracePaths(segments, operator) {\n\t\t\tvar paths = [],\n\t\t\t\tstarts;\n\t\n\t\t\tfunction isValid(seg) {\n\t\t\t\tvar winding;\n\t\t\t\treturn !!(seg && !seg._visited && (!operator\n\t\t\t\t\t\t|| operator[(winding = seg._winding || {}).winding]\n\t\t\t\t\t\t|| operator.unite && winding.onContour));\n\t\t\t}\n\t\n\t\t\tfunction isStart(seg) {\n\t\t\t\tif (seg) {\n\t\t\t\t\tfor (var i = 0, l = starts.length; i < l; i++) {\n\t\t\t\t\t\tif (seg === starts[i])\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tfunction visitPath(path) {\n\t\t\t\tvar segments = path._segments;\n\t\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\t\tsegments[i]._visited = true;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction getIntersections(segment, collectStarts) {\n\t\t\t\tvar inter = segment._intersection,\n\t\t\t\t\tstart = inter,\n\t\t\t\t\tinters = [];\n\t\t\t\tif (collectStarts)\n\t\t\t\t\tstarts = [segment];\n\t\n\t\t\t\tfunction collect(inter, end) {\n\t\t\t\t\twhile (inter && inter !== end) {\n\t\t\t\t\t\tvar other = inter._segment,\n\t\t\t\t\t\t\tpath = other._path,\n\t\t\t\t\t\t\tnext = other.getNext() || path && path.getFirstSegment(),\n\t\t\t\t\t\t\tnextInter = next && next._intersection;\n\t\t\t\t\t\tif (other !== segment && (isStart(other) || isStart(next)\n\t\t\t\t\t\t\t|| next && (isValid(other) && (isValid(next)\n\t\t\t\t\t\t\t\t|| nextInter && isValid(nextInter._segment))))) {\n\t\t\t\t\t\t\tinters.push(inter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (collectStarts)\n\t\t\t\t\t\t\tstarts.push(other);\n\t\t\t\t\t\tinter = inter._next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (inter) {\n\t\t\t\t\tcollect(inter);\n\t\t\t\t\twhile (inter && inter._prev)\n\t\t\t\t\t\tinter = inter._prev;\n\t\t\t\t\tcollect(inter, start);\n\t\t\t\t}\n\t\t\t\treturn inters;\n\t\t\t}\n\t\n\t\t\tsegments.sort(function(seg1, seg2) {\n\t\t\t\tvar inter1 = seg1._intersection,\n\t\t\t\t\tinter2 = seg2._intersection,\n\t\t\t\t\tover1 = !!(inter1 && inter1._overlap),\n\t\t\t\t\tover2 = !!(inter2 && inter2._overlap),\n\t\t\t\t\tpath1 = seg1._path,\n\t\t\t\t\tpath2 = seg2._path;\n\t\t\t\treturn over1 ^ over2\n\t\t\t\t\t\t? over1 ? 1 : -1\n\t\t\t\t\t\t: inter1 ^ inter2\n\t\t\t\t\t\t\t? inter1 ? 1 : -1\n\t\t\t\t\t\t\t: path1 !== path2\n\t\t\t\t\t\t\t\t? path1._id - path2._id\n\t\t\t\t\t\t\t\t: seg1._index - seg2._index;\n\t\t\t});\n\t\n\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\t\tvar seg = segments[i],\n\t\t\t\t\tvalid = isValid(seg),\n\t\t\t\t\tpath = null,\n\t\t\t\t\tfinished = false,\n\t\t\t\t\tclosed = true,\n\t\t\t\t\tbranches = [],\n\t\t\t\t\tbranch,\n\t\t\t\t\tvisited,\n\t\t\t\t\thandleIn;\n\t\t\t\tif (valid && seg._path._overlapsOnly) {\n\t\t\t\t\tvar path1 = seg._path,\n\t\t\t\t\t\tpath2 = seg._intersection._segment._path;\n\t\t\t\t\tif (path1.compare(path2)) {\n\t\t\t\t\t\tif ((operator.unite || operator.intersect)\n\t\t\t\t\t\t\t\t&& path1.getArea()) {\n\t\t\t\t\t\t\tpaths.push(path1.clone(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvisitPath(path1);\n\t\t\t\t\t\tvisitPath(path2);\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (valid) {\n\t\t\t\t\tvar first = !path,\n\t\t\t\t\t\tintersections = getIntersections(seg, first),\n\t\t\t\t\t\tinter = intersections.shift(),\n\t\t\t\t\t\tother = inter && inter._segment,\n\t\t\t\t\t\tfinished = !first && (isStart(seg) || isStart(other)),\n\t\t\t\t\t\tcross = !finished && other;\n\t\t\t\t\tif (first) {\n\t\t\t\t\t\tpath = new Path(Item.NO_INSERT);\n\t\t\t\t\t\tbranch = null;\n\t\t\t\t\t}\n\t\t\t\t\tif (finished) {\n\t\t\t\t\t\tif (seg.isFirst() || seg.isLast())\n\t\t\t\t\t\t\tclosed = seg._path._closed;\n\t\t\t\t\t\tseg._visited = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (cross && branch) {\n\t\t\t\t\t\tbranches.push(branch);\n\t\t\t\t\t\tbranch = null;\n\t\t\t\t\t}\n\t\t\t\t\tif (!branch) {\n\t\t\t\t\t\tbranch = {\n\t\t\t\t\t\t\tstart: path._segments.length,\n\t\t\t\t\t\t\tsegment: seg,\n\t\t\t\t\t\t\tintersections: intersections,\n\t\t\t\t\t\t\tvisited: visited = [],\n\t\t\t\t\t\t\thandleIn: handleIn\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tif (cross)\n\t\t\t\t\t\tseg = other;\n\t\t\t\t\tif (!isValid(seg)) {\n\t\t\t\t\t\tpath.removeSegments(branch.start);\n\t\t\t\t\t\tfor (var j = 0, k = visited.length; j < k; j++) {\n\t\t\t\t\t\t\tvisited[j]._visited = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (inter = branch.intersections.shift()) {\n\t\t\t\t\t\t\tseg = inter._segment;\n\t\t\t\t\t\t\tvisited.length = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!(branch = branches.pop()) ||\n\t\t\t\t\t\t\t\t!isValid(seg = branch.segment))\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tvisited = branch.visited;\n\t\t\t\t\t\t}\n\t\t\t\t\t\thandleIn = branch.handleIn;\n\t\t\t\t\t}\n\t\t\t\t\tvar next = seg.getNext();\n\t\t\t\t\tpath.add(new Segment(seg._point, handleIn,\n\t\t\t\t\t\t\tnext && seg._handleOut));\n\t\t\t\t\tseg._visited = true;\n\t\t\t\t\tvisited.push(seg);\n\t\t\t\t\tseg = next || seg._path.getFirstSegment();\n\t\t\t\t\thandleIn = next && next._handleIn;\n\t\t\t\t}\n\t\t\t\tif (finished) {\n\t\t\t\t\tif (closed) {\n\t\t\t\t\t\tpath.firstSegment.setHandleIn(handleIn);\n\t\t\t\t\t\tpath.setClosed(closed);\n\t\t\t\t\t}\n\t\t\t\t\tif (path.getArea() !== 0) {\n\t\t\t\t\t\tpaths.push(path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn paths;\n\t\t}\n\t\n\t\treturn {\n\t\t\t_getWinding: function(point, dir, closed) {\n\t\t\t\treturn getWinding(point, this.getCurves(), dir, closed);\n\t\t\t},\n\t\n\t\t\tunite: function(path, options) {\n\t\t\t\treturn computeBoolean(this, path, 'unite', options);\n\t\t\t},\n\t\n\t\t\tintersect: function(path, options) {\n\t\t\t\treturn computeBoolean(this, path, 'intersect', options);\n\t\t\t},\n\t\n\t\t\tsubtract: function(path) {\n\t\t\t\treturn computeBoolean(this, path, 'subtract');\n\t\t\t},\n\t\n\t\t\texclude: function(path, options) {\n\t\t\t\treturn computeBoolean(this, path, 'exclude', options);\n\t\t\t},\n\t\n\t\t\tdivide: function(path, options) {\n\t\t\t\treturn createResult(Group, [\n\t\t\t\t\t\tthis.subtract(path, options),\n\t\t\t\t\t\tthis.intersect(path, options)\n\t\t\t\t\t], true, this, path, options);\n\t\t\t},\n\t\n\t\t\tresolveCrossings: function() {\n\t\t\t\tvar children = this._children,\n\t\t\t\t\tpaths = children || [this];\n\t\n\t\t\t\tfunction hasOverlap(seg) {\n\t\t\t\t\tvar inter = seg && seg._intersection;\n\t\t\t\t\treturn inter && inter._overlap;\n\t\t\t\t}\n\t\n\t\t\t\tvar hasOverlaps = false,\n\t\t\t\t\thasCrossings = false,\n\t\t\t\t\tintersections = this.getIntersections(null, function(inter) {\n\t\t\t\t\t\treturn inter._overlap && (hasOverlaps = true) ||\n\t\t\t\t\t\t\t\tinter.isCrossing() && (hasCrossings = true);\n\t\t\t\t\t});\n\t\t\t\tintersections = CurveLocation.expand(intersections);\n\t\t\t\tif (hasOverlaps) {\n\t\t\t\t\tvar overlaps = divideLocations(intersections, function(inter) {\n\t\t\t\t\t\treturn inter._overlap;\n\t\t\t\t\t});\n\t\t\t\t\tfor (var i = overlaps.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tvar seg = overlaps[i]._segment,\n\t\t\t\t\t\t\tprev = seg.getPrevious(),\n\t\t\t\t\t\t\tnext = seg.getNext();\n\t\t\t\t\t\tif (seg._path && hasOverlap(prev) && hasOverlap(next)) {\n\t\t\t\t\t\t\tseg.remove();\n\t\t\t\t\t\t\tprev._handleOut._set(0, 0);\n\t\t\t\t\t\t\tnext._handleIn._set(0, 0);\n\t\t\t\t\t\t\tvar curve = prev.getCurve();\n\t\t\t\t\t\t\tif (curve.isStraight() && curve.getLength() === 0) {\n\t\t\t\t\t\t\t\tnext._handleIn.set(prev._handleIn);\n\t\t\t\t\t\t\t\tprev.remove();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (hasCrossings) {\n\t\t\t\t\tdivideLocations(intersections, hasOverlaps && function(inter) {\n\t\t\t\t\t\tvar curve1 = inter.getCurve(),\n\t\t\t\t\t\t\tcurve2 = inter._intersection._curve,\n\t\t\t\t\t\t\tseg = inter._segment;\n\t\t\t\t\t\tif (curve1 && curve2 && curve1._path && curve2._path) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else if (seg) {\n\t\t\t\t\t\t\tseg._intersection = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tpaths = tracePaths(Base.each(paths, function(path) {\n\t\t\t\t\t\tthis.push.apply(this, path._segments);\n\t\t\t\t\t}, []));\n\t\t\t\t}\n\t\t\t\tvar length = paths.length,\n\t\t\t\t\titem;\n\t\t\t\tif (length > 1 && children) {\n\t\t\t\t\tif (paths !== children)\n\t\t\t\t\t\tthis.setChildren(paths);\n\t\t\t\t\titem = this;\n\t\t\t\t} else if (length === 1 && !children) {\n\t\t\t\t\tif (paths[0] !== this)\n\t\t\t\t\t\tthis.setSegments(paths[0].removeSegments());\n\t\t\t\t\titem = this;\n\t\t\t\t}\n\t\t\t\tif (!item) {\n\t\t\t\t\titem = new CompoundPath(Item.NO_INSERT);\n\t\t\t\t\titem.addChildren(paths);\n\t\t\t\t\titem = item.reduce();\n\t\t\t\t\titem.copyAttributes(this);\n\t\t\t\t\tthis.replaceWith(item);\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t},\n\t\n\t\t\treorient: function(nonZero) {\n\t\t\t\tvar children = this._children,\n\t\t\t\t\tlength = children && children.length;\n\t\t\t\tif (length > 1) {\n\t\t\t\t\tvar lookup = Base.each(children, function(path, i) {\n\t\t\t\t\t\t\tthis[path._id] = {\n\t\t\t\t\t\t\t\twinding: path.isClockwise() ? 1 : -1,\n\t\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}, {}),\n\t\t\t\t\t\tsorted = this.removeChildren().sort(function (a, b) {\n\t\t\t\t\t\t\treturn abs(b.getArea()) - abs(a.getArea());\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tfirst = sorted[0],\n\t\t\t\t\t\tpaths = [];\n\t\t\t\t\tpaths[lookup[first._id].index] = first;\n\t\t\t\t\tfor (var i1 = 1; i1 < length; i1++) {\n\t\t\t\t\t\tvar path1 = sorted[i1],\n\t\t\t\t\t\t\tentry1 = lookup[path1._id],\n\t\t\t\t\t\t\tpoint = path1.getInteriorPoint(),\n\t\t\t\t\t\t\tisContained = false,\n\t\t\t\t\t\t\tcontainer = null,\n\t\t\t\t\t\t\texclude = false;\n\t\t\t\t\t\tfor (var i2 = i1 - 1; i2 >= 0 && !container; i2--) {\n\t\t\t\t\t\t\tvar path2 = sorted[i2];\n\t\t\t\t\t\t\tif (path2.contains(point)) {\n\t\t\t\t\t\t\t\tvar entry2 = lookup[path2._id];\n\t\t\t\t\t\t\t\tif (nonZero && !isContained) {\n\t\t\t\t\t\t\t\t\tentry1.winding += entry2.winding;\n\t\t\t\t\t\t\t\t\tif (entry1.winding && entry2.winding) {\n\t\t\t\t\t\t\t\t\t\texclude = entry1.exclude = true;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tisContained = true;\n\t\t\t\t\t\t\t\tcontainer = !entry2.exclude && path2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!exclude) {\n\t\t\t\t\t\t\tpath1.setClockwise(container\n\t\t\t\t\t\t\t\t\t? !container.isClockwise()\n\t\t\t\t\t\t\t\t\t: first.isClockwise());\n\t\t\t\t\t\t\tpaths[entry1.index] = path1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.setChildren(paths);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\n\t\t\tgetInteriorPoint: function() {\n\t\t\t\tvar bounds = this.getBounds(),\n\t\t\t\t\tpoint = bounds.getCenter(true);\n\t\t\t\tif (!this.contains(point)) {\n\t\t\t\t\tvar curves = this.getCurves(),\n\t\t\t\t\t\ty = point.y,\n\t\t\t\t\t\tintercepts = [],\n\t\t\t\t\t\troots = [];\n\t\t\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\t\t\tvar v = curves[i].getValues(),\n\t\t\t\t\t\t\to0 = v[1],\n\t\t\t\t\t\t\to1 = v[3],\n\t\t\t\t\t\t\to2 = v[5],\n\t\t\t\t\t\t\to3 = v[7];\n\t\t\t\t\t\tif (y >= min(o0, o1, o2, o3) && y <= max(o0, o1, o2, o3)) {\n\t\t\t\t\t\t\tvar monoCurves = Curve.getMonoCurves(v);\n\t\t\t\t\t\t\tfor (var j = 0, m = monoCurves.length; j < m; j++) {\n\t\t\t\t\t\t\t\tvar mv = monoCurves[j],\n\t\t\t\t\t\t\t\t\tmo0 = mv[1],\n\t\t\t\t\t\t\t\t\tmo3 = mv[7];\n\t\t\t\t\t\t\t\tif ((mo0 !== mo3) &&\n\t\t\t\t\t\t\t\t\t(y >= mo0 && y <= mo3 || y >= mo3 && y <= mo0)){\n\t\t\t\t\t\t\t\t\tvar x = y === mo0 ? mv[0]\n\t\t\t\t\t\t\t\t\t\t: y === mo3 ? mv[6]\n\t\t\t\t\t\t\t\t\t\t: Curve.solveCubic(mv, 1, y, roots, 0, 1)\n\t\t\t\t\t\t\t\t\t\t\t=== 1\n\t\t\t\t\t\t\t\t\t\t\t? Curve.getPoint(mv, roots[0]).x\n\t\t\t\t\t\t\t\t\t\t\t: (mv[0] + mv[6]) / 2;\n\t\t\t\t\t\t\t\t\tintercepts.push(x);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (intercepts.length > 1) {\n\t\t\t\t\t\tintercepts.sort(function(a, b) { return a - b; });\n\t\t\t\t\t\tpoint.x = (intercepts[0] + intercepts[1]) / 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn point;\n\t\t\t}\n\t\t};\n\t});\n\t\n\tvar PathFlattener = Base.extend({\n\t\t_class: 'PathFlattener',\n\t\n\t\tinitialize: function(path, flatness, maxRecursion, ignoreStraight, matrix) {\n\t\t\tvar curves = [],\n\t\t\t\tparts = [],\n\t\t\t\tlength = 0,\n\t\t\t\tminSpan = 1 / (maxRecursion || 32),\n\t\t\t\tsegments = path._segments,\n\t\t\t\tsegment1 = segments[0],\n\t\t\t\tsegment2;\n\t\n\t\t\tfunction addCurve(segment1, segment2) {\n\t\t\t\tvar curve = Curve.getValues(segment1, segment2, matrix);\n\t\t\t\tcurves.push(curve);\n\t\t\t\tcomputeParts(curve, segment1._index, 0, 1);\n\t\t\t}\n\t\n\t\t\tfunction computeParts(curve, index, t1, t2) {\n\t\t\t\tif ((t2 - t1) > minSpan\n\t\t\t\t\t\t&& !(ignoreStraight && Curve.isStraight(curve))\n\t\t\t\t\t\t&& !Curve.isFlatEnough(curve, flatness || 0.25)) {\n\t\t\t\t\tvar halves = Curve.subdivide(curve, 0.5),\n\t\t\t\t\t\ttMid = (t1 + t2) / 2;\n\t\t\t\t\tcomputeParts(halves[0], index, t1, tMid);\n\t\t\t\t\tcomputeParts(halves[1], index, tMid, t2);\n\t\t\t\t} else {\n\t\t\t\t\tvar dx = curve[6] - curve[0],\n\t\t\t\t\t\tdy = curve[7] - curve[1],\n\t\t\t\t\t\tdist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\tif (dist > 0) {\n\t\t\t\t\t\tlength += dist;\n\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\toffset: length,\n\t\t\t\t\t\t\tcurve: curve,\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\ttime: t2,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor (var i = 1, l = segments.length; i < l; i++) {\n\t\t\t\tsegment2 = segments[i];\n\t\t\t\taddCurve(segment1, segment2);\n\t\t\t\tsegment1 = segment2;\n\t\t\t}\n\t\t\tif (path._closed)\n\t\t\t\taddCurve(segment2, segments[0]);\n\t\t\tthis.curves = curves;\n\t\t\tthis.parts = parts;\n\t\t\tthis.length = length;\n\t\t\tthis.index = 0;\n\t\t},\n\t\n\t\t_get: function(offset) {\n\t\t\tvar parts = this.parts,\n\t\t\t\tlength = parts.length,\n\t\t\t\tstart,\n\t\t\t\ti, j = this.index;\n\t\t\tfor (;;) {\n\t\t\t\ti = j;\n\t\t\t\tif (!j || parts[--j].offset < offset)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (; i < length; i++) {\n\t\t\t\tvar part = parts[i];\n\t\t\t\tif (part.offset >= offset) {\n\t\t\t\t\tthis.index = i;\n\t\t\t\t\tvar prev = parts[i - 1],\n\t\t\t\t\t\tprevTime = prev && prev.index === part.index ? prev.time : 0,\n\t\t\t\t\t\tprevOffset = prev ? prev.offset : 0;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tindex: part.index,\n\t\t\t\t\t\ttime: prevTime + (part.time - prevTime)\n\t\t\t\t\t\t\t* (offset - prevOffset) / (part.offset - prevOffset)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tindex: parts[length - 1].index,\n\t\t\t\ttime: 1\n\t\t\t};\n\t\t},\n\t\n\t\tdrawPart: function(ctx, from, to) {\n\t\t\tvar start = this._get(from),\n\t\t\t\tend = this._get(to);\n\t\t\tfor (var i = start.index, l = end.index; i <= l; i++) {\n\t\t\t\tvar curve = Curve.getPart(this.curves[i],\n\t\t\t\t\t\ti === start.index ? start.time : 0,\n\t\t\t\t\t\ti === end.index ? end.time : 1);\n\t\t\t\tif (i === start.index)\n\t\t\t\t\tctx.moveTo(curve[0], curve[1]);\n\t\t\t\tctx.bezierCurveTo.apply(ctx, curve.slice(2));\n\t\t\t}\n\t\t}\n\t}, Base.each(Curve._evaluateMethods,\n\t\tfunction(name) {\n\t\t\tthis[name + 'At'] = function(offset) {\n\t\t\t\tvar param = this._get(offset);\n\t\t\t\treturn Curve[name](this.curves[param.index], param.time);\n\t\t\t};\n\t\t}, {})\n\t);\n\t\n\tvar PathFitter = Base.extend({\n\t\tinitialize: function(path) {\n\t\t\tvar points = this.points = [],\n\t\t\t\tsegments = path._segments,\n\t\t\t\tclosed = path._closed;\n\t\t\tfor (var i = 0, prev, l = segments.length; i < l; i++) {\n\t\t\t\tvar point = segments[i].point;\n\t\t\t\tif (!prev || !prev.equals(point)) {\n\t\t\t\t\tpoints.push(prev = point.clone());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (closed) {\n\t\t\t\tpoints.unshift(points[points.length - 1]);\n\t\t\t\tpoints.push(points[1]);\n\t\t\t}\n\t\t\tthis.closed = closed;\n\t\t},\n\t\n\t\tfit: function(error) {\n\t\t\tvar points = this.points,\n\t\t\t\tlength = points.length,\n\t\t\t\tsegments = null;\n\t\t\tif (length > 0) {\n\t\t\t\tsegments = [new Segment(points[0])];\n\t\t\t\tif (length > 1) {\n\t\t\t\t\tthis.fitCubic(segments, error, 0, length - 1,\n\t\t\t\t\t\t\tpoints[1].subtract(points[0]),\n\t\t\t\t\t\t\tpoints[length - 2].subtract(points[length - 1]));\n\t\t\t\t\tif (this.closed) {\n\t\t\t\t\t\tsegments.shift();\n\t\t\t\t\t\tsegments.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn segments;\n\t\t},\n\t\n\t\tfitCubic: function(segments, error, first, last, tan1, tan2) {\n\t\t\tvar points = this.points;\n\t\t\tif (last - first === 1) {\n\t\t\t\tvar pt1 = points[first],\n\t\t\t\t\tpt2 = points[last],\n\t\t\t\t\tdist = pt1.getDistance(pt2) / 3;\n\t\t\t\tthis.addCurve(segments, [pt1, pt1.add(tan1.normalize(dist)),\n\t\t\t\t\t\tpt2.add(tan2.normalize(dist)), pt2]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar uPrime = this.chordLengthParameterize(first, last),\n\t\t\t\tmaxError = Math.max(error, error * error),\n\t\t\t\tsplit,\n\t\t\t\tparametersInOrder = true;\n\t\t\tfor (var i = 0; i <= 4; i++) {\n\t\t\t\tvar curve = this.generateBezier(first, last, uPrime, tan1, tan2);\n\t\t\t\tvar max = this.findMaxError(first, last, curve, uPrime);\n\t\t\t\tif (max.error < error && parametersInOrder) {\n\t\t\t\t\tthis.addCurve(segments, curve);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsplit = max.index;\n\t\t\t\tif (max.error >= maxError)\n\t\t\t\t\tbreak;\n\t\t\t\tparametersInOrder = this.reparameterize(first, last, uPrime, curve);\n\t\t\t\tmaxError = max.error;\n\t\t\t}\n\t\t\tvar tanCenter = points[split - 1].subtract(points[split + 1]);\n\t\t\tthis.fitCubic(segments, error, first, split, tan1, tanCenter);\n\t\t\tthis.fitCubic(segments, error, split, last, tanCenter.negate(), tan2);\n\t\t},\n\t\n\t\taddCurve: function(segments, curve) {\n\t\t\tvar prev = segments[segments.length - 1];\n\t\t\tprev.setHandleOut(curve[1].subtract(curve[0]));\n\t\t\tsegments.push(new Segment(curve[3], curve[2].subtract(curve[3])));\n\t\t},\n\t\n\t\tgenerateBezier: function(first, last, uPrime, tan1, tan2) {\n\t\t\tvar epsilon = 1e-12,\n\t\t\t\tabs = Math.abs,\n\t\t\t\tpoints = this.points,\n\t\t\t\tpt1 = points[first],\n\t\t\t\tpt2 = points[last],\n\t\t\t\tC = [[0, 0], [0, 0]],\n\t\t\t\tX = [0, 0];\n\t\n\t\t\tfor (var i = 0, l = last - first + 1; i < l; i++) {\n\t\t\t\tvar u = uPrime[i],\n\t\t\t\t\tt = 1 - u,\n\t\t\t\t\tb = 3 * u * t,\n\t\t\t\t\tb0 = t * t * t,\n\t\t\t\t\tb1 = b * t,\n\t\t\t\t\tb2 = b * u,\n\t\t\t\t\tb3 = u * u * u,\n\t\t\t\t\ta1 = tan1.normalize(b1),\n\t\t\t\t\ta2 = tan2.normalize(b2),\n\t\t\t\t\ttmp = points[first + i]\n\t\t\t\t\t\t.subtract(pt1.multiply(b0 + b1))\n\t\t\t\t\t\t.subtract(pt2.multiply(b2 + b3));\n\t\t\t\tC[0][0] += a1.dot(a1);\n\t\t\t\tC[0][1] += a1.dot(a2);\n\t\t\t\tC[1][0] = C[0][1];\n\t\t\t\tC[1][1] += a2.dot(a2);\n\t\t\t\tX[0] += a1.dot(tmp);\n\t\t\t\tX[1] += a2.dot(tmp);\n\t\t\t}\n\t\n\t\t\tvar detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],\n\t\t\t\talpha1, alpha2;\n\t\t\tif (abs(detC0C1) > epsilon) {\n\t\t\t\tvar detC0X = C[0][0] * X[1]    - C[1][0] * X[0],\n\t\t\t\t\tdetXC1 = X[0]    * C[1][1] - X[1]    * C[0][1];\n\t\t\t\talpha1 = detXC1 / detC0C1;\n\t\t\t\talpha2 = detC0X / detC0C1;\n\t\t\t} else {\n\t\t\t\tvar c0 = C[0][0] + C[0][1],\n\t\t\t\t\tc1 = C[1][0] + C[1][1];\n\t\t\t\tif (abs(c0) > epsilon) {\n\t\t\t\t\talpha1 = alpha2 = X[0] / c0;\n\t\t\t\t} else if (abs(c1) > epsilon) {\n\t\t\t\t\talpha1 = alpha2 = X[1] / c1;\n\t\t\t\t} else {\n\t\t\t\t\talpha1 = alpha2 = 0;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvar segLength = pt2.getDistance(pt1),\n\t\t\t\teps = epsilon * segLength,\n\t\t\t\thandle1,\n\t\t\t\thandle2;\n\t\t\tif (alpha1 < eps || alpha2 < eps) {\n\t\t\t\talpha1 = alpha2 = segLength / 3;\n\t\t\t} else {\n\t\t\t\tvar line = pt2.subtract(pt1);\n\t\t\t\thandle1 = tan1.normalize(alpha1);\n\t\t\t\thandle2 = tan2.normalize(alpha2);\n\t\t\t\tif (handle1.dot(line) - handle2.dot(line) > segLength * segLength) {\n\t\t\t\t\talpha1 = alpha2 = segLength / 3;\n\t\t\t\t\thandle1 = handle2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn [pt1,\n\t\t\t\t\tpt1.add(handle1 || tan1.normalize(alpha1)),\n\t\t\t\t\tpt2.add(handle2 || tan2.normalize(alpha2)),\n\t\t\t\t\tpt2];\n\t\t},\n\t\n\t\treparameterize: function(first, last, u, curve) {\n\t\t\tfor (var i = first; i <= last; i++) {\n\t\t\t\tu[i - first] = this.findRoot(curve, this.points[i], u[i - first]);\n\t\t\t}\n\t\t\tfor (var i = 1, l = u.length; i < l; i++) {\n\t\t\t\tif (u[i] <= u[i - 1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t\n\t\tfindRoot: function(curve, point, u) {\n\t\t\tvar curve1 = [],\n\t\t\t\tcurve2 = [];\n\t\t\tfor (var i = 0; i <= 2; i++) {\n\t\t\t\tcurve1[i] = curve[i + 1].subtract(curve[i]).multiply(3);\n\t\t\t}\n\t\t\tfor (var i = 0; i <= 1; i++) {\n\t\t\t\tcurve2[i] = curve1[i + 1].subtract(curve1[i]).multiply(2);\n\t\t\t}\n\t\t\tvar pt = this.evaluate(3, curve, u),\n\t\t\t\tpt1 = this.evaluate(2, curve1, u),\n\t\t\t\tpt2 = this.evaluate(1, curve2, u),\n\t\t\t\tdiff = pt.subtract(point),\n\t\t\t\tdf = pt1.dot(pt1) + diff.dot(pt2);\n\t\t\tif (Math.abs(df) < 1e-6)\n\t\t\t\treturn u;\n\t\t\treturn u - diff.dot(pt1) / df;\n\t\t},\n\t\n\t\tevaluate: function(degree, curve, t) {\n\t\t\tvar tmp = curve.slice();\n\t\t\tfor (var i = 1; i <= degree; i++) {\n\t\t\t\tfor (var j = 0; j <= degree - i; j++) {\n\t\t\t\t\ttmp[j] = tmp[j].multiply(1 - t).add(tmp[j + 1].multiply(t));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tmp[0];\n\t\t},\n\t\n\t\tchordLengthParameterize: function(first, last) {\n\t\t\tvar u = [0];\n\t\t\tfor (var i = first + 1; i <= last; i++) {\n\t\t\t\tu[i - first] = u[i - first - 1]\n\t\t\t\t\t\t+ this.points[i].getDistance(this.points[i - 1]);\n\t\t\t}\n\t\t\tfor (var i = 1, m = last - first; i <= m; i++) {\n\t\t\t\tu[i] /= u[m];\n\t\t\t}\n\t\t\treturn u;\n\t\t},\n\t\n\t\tfindMaxError: function(first, last, curve, u) {\n\t\t\tvar index = Math.floor((last - first + 1) / 2),\n\t\t\t\tmaxDist = 0;\n\t\t\tfor (var i = first + 1; i < last; i++) {\n\t\t\t\tvar P = this.evaluate(3, curve, u[i - first]);\n\t\t\t\tvar v = P.subtract(this.points[i]);\n\t\t\t\tvar dist = v.x * v.x + v.y * v.y;\n\t\t\t\tif (dist >= maxDist) {\n\t\t\t\t\tmaxDist = dist;\n\t\t\t\t\tindex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\terror: maxDist,\n\t\t\t\tindex: index\n\t\t\t};\n\t\t}\n\t});\n\t\n\tvar TextItem = Item.extend({\n\t\t_class: 'TextItem',\n\t\t_applyMatrix: false,\n\t\t_canApplyMatrix: false,\n\t\t_serializeFields: {\n\t\t\tcontent: null\n\t\t},\n\t\t_boundsOptions: { stroke: false, handle: false },\n\t\n\t\tinitialize: function TextItem(arg) {\n\t\t\tthis._content = '';\n\t\t\tthis._lines = [];\n\t\t\tvar hasProps = arg && Base.isPlainObject(arg)\n\t\t\t\t\t&& arg.x === undefined && arg.y === undefined;\n\t\t\tthis._initialize(hasProps && arg, !hasProps && Point.read(arguments));\n\t\t},\n\t\n\t\t_equals: function(item) {\n\t\t\treturn this._content === item._content;\n\t\t},\n\t\n\t\tcopyContent: function(source) {\n\t\t\tthis.setContent(source._content);\n\t\t},\n\t\n\t\tgetContent: function() {\n\t\t\treturn this._content;\n\t\t},\n\t\n\t\tsetContent: function(content) {\n\t\t\tthis._content = '' + content;\n\t\t\tthis._lines = this._content.split(/\\r\\n|\\n|\\r/mg);\n\t\t\tthis._changed(265);\n\t\t},\n\t\n\t\tisEmpty: function() {\n\t\t\treturn !this._content;\n\t\t},\n\t\n\t\tgetCharacterStyle: '#getStyle',\n\t\tsetCharacterStyle: '#setStyle',\n\t\n\t\tgetParagraphStyle: '#getStyle',\n\t\tsetParagraphStyle: '#setStyle'\n\t});\n\t\n\tvar PointText = TextItem.extend({\n\t\t_class: 'PointText',\n\t\n\t\tinitialize: function PointText() {\n\t\t\tTextItem.apply(this, arguments);\n\t\t},\n\t\n\t\tgetPoint: function() {\n\t\t\tvar point = this._matrix.getTranslation();\n\t\t\treturn new LinkedPoint(point.x, point.y, this, 'setPoint');\n\t\t},\n\t\n\t\tsetPoint: function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\tthis.translate(point.subtract(this._matrix.getTranslation()));\n\t\t},\n\t\n\t\t_draw: function(ctx, param, viewMatrix) {\n\t\t\tif (!this._content)\n\t\t\t\treturn;\n\t\t\tthis._setStyles(ctx, param, viewMatrix);\n\t\t\tvar lines = this._lines,\n\t\t\t\tstyle = this._style,\n\t\t\t\thasFill = style.hasFill(),\n\t\t\t\thasStroke = style.hasStroke(),\n\t\t\t\tleading = style.getLeading(),\n\t\t\t\tshadowColor = ctx.shadowColor;\n\t\t\tctx.font = style.getFontStyle();\n\t\t\tctx.textAlign = style.getJustification();\n\t\t\tfor (var i = 0, l = lines.length; i < l; i++) {\n\t\t\t\tctx.shadowColor = shadowColor;\n\t\t\t\tvar line = lines[i];\n\t\t\t\tif (hasFill) {\n\t\t\t\t\tctx.fillText(line, 0, 0);\n\t\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\t\t\t\tif (hasStroke)\n\t\t\t\t\tctx.strokeText(line, 0, 0);\n\t\t\t\tctx.translate(0, leading);\n\t\t\t}\n\t\t},\n\t\n\t\t_getBounds: function(matrix, options) {\n\t\t\tvar style = this._style,\n\t\t\t\tlines = this._lines,\n\t\t\t\tnumLines = lines.length,\n\t\t\t\tjustification = style.getJustification(),\n\t\t\t\tleading = style.getLeading(),\n\t\t\t\twidth = this.getView().getTextWidth(style.getFontStyle(), lines),\n\t\t\t\tx = 0;\n\t\t\tif (justification !== 'left')\n\t\t\t\tx -= width / (justification === 'center' ? 2: 1);\n\t\t\tvar bounds = new Rectangle(x,\n\t\t\t\t\t\tnumLines ? - 0.75 * leading : 0,\n\t\t\t\t\t\twidth, numLines * leading);\n\t\t\treturn matrix ? matrix._transformBounds(bounds, bounds) : bounds;\n\t\t}\n\t});\n\t\n\tvar Color = Base.extend(new function() {\n\t\tvar types = {\n\t\t\tgray: ['gray'],\n\t\t\trgb: ['red', 'green', 'blue'],\n\t\t\thsb: ['hue', 'saturation', 'brightness'],\n\t\t\thsl: ['hue', 'saturation', 'lightness'],\n\t\t\tgradient: ['gradient', 'origin', 'destination', 'highlight']\n\t\t};\n\t\n\t\tvar componentParsers = {},\n\t\t\tcolorCache = {},\n\t\t\tcolorCtx;\n\t\n\t\tfunction fromCSS(string) {\n\t\t\tvar match = string.match(/^#(\\w{1,2})(\\w{1,2})(\\w{1,2})$/),\n\t\t\t\tcomponents;\n\t\t\tif (match) {\n\t\t\t\tcomponents = [0, 0, 0];\n\t\t\t\tfor (var i = 0; i < 3; i++) {\n\t\t\t\t\tvar value = match[i + 1];\n\t\t\t\t\tcomponents[i] = parseInt(value.length == 1\n\t\t\t\t\t\t\t? value + value : value, 16) / 255;\n\t\t\t\t}\n\t\t\t} else if (match = string.match(/^rgba?\\((.*)\\)$/)) {\n\t\t\t\tcomponents = match[1].split(',');\n\t\t\t\tfor (var i = 0, l = components.length; i < l; i++) {\n\t\t\t\t\tvar value = +components[i];\n\t\t\t\t\tcomponents[i] = i < 3 ? value / 255 : value;\n\t\t\t\t}\n\t\t\t} else if (window) {\n\t\t\t\tvar cached = colorCache[string];\n\t\t\t\tif (!cached) {\n\t\t\t\t\tif (!colorCtx) {\n\t\t\t\t\t\tcolorCtx = CanvasProvider.getContext(1, 1);\n\t\t\t\t\t\tcolorCtx.globalCompositeOperation = 'copy';\n\t\t\t\t\t}\n\t\t\t\t\tcolorCtx.fillStyle = 'rgba(0,0,0,0)';\n\t\t\t\t\tcolorCtx.fillStyle = string;\n\t\t\t\t\tcolorCtx.fillRect(0, 0, 1, 1);\n\t\t\t\t\tvar data = colorCtx.getImageData(0, 0, 1, 1).data;\n\t\t\t\t\tcached = colorCache[string] = [\n\t\t\t\t\t\tdata[0] / 255,\n\t\t\t\t\t\tdata[1] / 255,\n\t\t\t\t\t\tdata[2] / 255\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\tcomponents = cached.slice();\n\t\t\t} else {\n\t\t\t\tcomponents = [0, 0, 0];\n\t\t\t}\n\t\t\treturn components;\n\t\t}\n\t\n\t\tvar hsbIndices = [\n\t\t\t[0, 3, 1],\n\t\t\t[2, 0, 1],\n\t\t\t[1, 0, 3],\n\t\t\t[1, 2, 0],\n\t\t\t[3, 1, 0],\n\t\t\t[0, 1, 2]\n\t\t];\n\t\n\t\tvar converters = {\n\t\t\t'rgb-hsb': function(r, g, b) {\n\t\t\t\tvar max = Math.max(r, g, b),\n\t\t\t\t\tmin = Math.min(r, g, b),\n\t\t\t\t\tdelta = max - min,\n\t\t\t\t\th = delta === 0 ? 0\n\t\t\t\t\t\t:   ( max == r ? (g - b) / delta + (g < b ? 6 : 0)\n\t\t\t\t\t\t\t: max == g ? (b - r) / delta + 2\n\t\t\t\t\t\t\t:            (r - g) / delta + 4) * 60;\n\t\t\t\treturn [h, max === 0 ? 0 : delta / max, max];\n\t\t\t},\n\t\n\t\t\t'hsb-rgb': function(h, s, b) {\n\t\t\t\th = (((h / 60) % 6) + 6) % 6;\n\t\t\t\tvar i = Math.floor(h),\n\t\t\t\t\tf = h - i,\n\t\t\t\t\ti = hsbIndices[i],\n\t\t\t\t\tv = [\n\t\t\t\t\t\tb,\n\t\t\t\t\t\tb * (1 - s),\n\t\t\t\t\t\tb * (1 - s * f),\n\t\t\t\t\t\tb * (1 - s * (1 - f))\n\t\t\t\t\t];\n\t\t\t\treturn [v[i[0]], v[i[1]], v[i[2]]];\n\t\t\t},\n\t\n\t\t\t'rgb-hsl': function(r, g, b) {\n\t\t\t\tvar max = Math.max(r, g, b),\n\t\t\t\t\tmin = Math.min(r, g, b),\n\t\t\t\t\tdelta = max - min,\n\t\t\t\t\tachromatic = delta === 0,\n\t\t\t\t\th = achromatic ? 0\n\t\t\t\t\t\t:   ( max == r ? (g - b) / delta + (g < b ? 6 : 0)\n\t\t\t\t\t\t\t: max == g ? (b - r) / delta + 2\n\t\t\t\t\t\t\t:            (r - g) / delta + 4) * 60,\n\t\t\t\t\tl = (max + min) / 2,\n\t\t\t\t\ts = achromatic ? 0 : l < 0.5\n\t\t\t\t\t\t\t? delta / (max + min)\n\t\t\t\t\t\t\t: delta / (2 - max - min);\n\t\t\t\treturn [h, s, l];\n\t\t\t},\n\t\n\t\t\t'hsl-rgb': function(h, s, l) {\n\t\t\t\th = (((h / 360) % 1) + 1) % 1;\n\t\t\t\tif (s === 0)\n\t\t\t\t\treturn [l, l, l];\n\t\t\t\tvar t3s = [ h + 1 / 3, h, h - 1 / 3 ],\n\t\t\t\t\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s,\n\t\t\t\t\tt1 = 2 * l - t2,\n\t\t\t\t\tc = [];\n\t\t\t\tfor (var i = 0; i < 3; i++) {\n\t\t\t\t\tvar t3 = t3s[i];\n\t\t\t\t\tif (t3 < 0) t3 += 1;\n\t\t\t\t\tif (t3 > 1) t3 -= 1;\n\t\t\t\t\tc[i] = 6 * t3 < 1\n\t\t\t\t\t\t? t1 + (t2 - t1) * 6 * t3\n\t\t\t\t\t\t: 2 * t3 < 1\n\t\t\t\t\t\t\t? t2\n\t\t\t\t\t\t\t: 3 * t3 < 2\n\t\t\t\t\t\t\t\t? t1 + (t2 - t1) * ((2 / 3) - t3) * 6\n\t\t\t\t\t\t\t\t: t1;\n\t\t\t\t}\n\t\t\t\treturn c;\n\t\t\t},\n\t\n\t\t\t'rgb-gray': function(r, g, b) {\n\t\t\t\treturn [r * 0.2989 + g * 0.587 + b * 0.114];\n\t\t\t},\n\t\n\t\t\t'gray-rgb': function(g) {\n\t\t\t\treturn [g, g, g];\n\t\t\t},\n\t\n\t\t\t'gray-hsb': function(g) {\n\t\t\t\treturn [0, 0, g];\n\t\t\t},\n\t\n\t\t\t'gray-hsl': function(g) {\n\t\t\t\treturn [0, 0, g];\n\t\t\t},\n\t\n\t\t\t'gradient-rgb': function() {\n\t\t\t\treturn [];\n\t\t\t},\n\t\n\t\t\t'rgb-gradient': function() {\n\t\t\t\treturn [];\n\t\t\t}\n\t\n\t\t};\n\t\n\t\treturn Base.each(types, function(properties, type) {\n\t\t\tcomponentParsers[type] = [];\n\t\t\tBase.each(properties, function(name, index) {\n\t\t\t\tvar part = Base.capitalize(name),\n\t\t\t\t\thasOverlap = /^(hue|saturation)$/.test(name),\n\t\t\t\t\tparser = componentParsers[type][index] = name === 'gradient'\n\t\t\t\t\t\t? function(value) {\n\t\t\t\t\t\t\tvar current = this._components[0];\n\t\t\t\t\t\t\tvalue = Gradient.read(Array.isArray(value) ? value\n\t\t\t\t\t\t\t\t\t: arguments, 0, { readNull: true });\n\t\t\t\t\t\t\tif (current !== value) {\n\t\t\t\t\t\t\t\tif (current)\n\t\t\t\t\t\t\t\t\tcurrent._removeOwner(this);\n\t\t\t\t\t\t\t\tif (value)\n\t\t\t\t\t\t\t\t\tvalue._addOwner(this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t: type === 'gradient'\n\t\t\t\t\t\t\t? function() {\n\t\t\t\t\t\t\t\treturn Point.read(arguments, 0, {\n\t\t\t\t\t\t\t\t\t\treadNull: name === 'highlight',\n\t\t\t\t\t\t\t\t\t\tclone: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: function(value) {\n\t\t\t\t\t\t\t\treturn value == null || isNaN(value) ? 0 : value;\n\t\t\t\t\t\t\t};\n\t\n\t\t\t\tthis['get' + part] = function() {\n\t\t\t\t\treturn this._type === type\n\t\t\t\t\t\t|| hasOverlap && /^hs[bl]$/.test(this._type)\n\t\t\t\t\t\t\t? this._components[index]\n\t\t\t\t\t\t\t: this._convert(type)[index];\n\t\t\t\t};\n\t\n\t\t\t\tthis['set' + part] = function(value) {\n\t\t\t\t\tif (this._type !== type\n\t\t\t\t\t\t\t&& !(hasOverlap && /^hs[bl]$/.test(this._type))) {\n\t\t\t\t\t\tthis._components = this._convert(type);\n\t\t\t\t\t\tthis._properties = types[type];\n\t\t\t\t\t\tthis._type = type;\n\t\t\t\t\t}\n\t\t\t\t\tthis._components[index] = parser.call(this, value);\n\t\t\t\t\tthis._changed();\n\t\t\t\t};\n\t\t\t}, this);\n\t\t}, {\n\t\t\t_class: 'Color',\n\t\t\t_readIndex: true,\n\t\n\t\t\tinitialize: function Color(arg) {\n\t\t\t\tvar args = arguments,\n\t\t\t\t\treading = this.__read,\n\t\t\t\t\tread = 0,\n\t\t\t\t\ttype,\n\t\t\t\t\tcomponents,\n\t\t\t\t\talpha,\n\t\t\t\t\tvalues;\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\targs = arg;\n\t\t\t\t\targ = args[0];\n\t\t\t\t}\n\t\t\t\tvar argType = arg != null && typeof arg;\n\t\t\t\tif (argType === 'string' && arg in types) {\n\t\t\t\t\ttype = arg;\n\t\t\t\t\targ = args[1];\n\t\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\t\tcomponents = arg;\n\t\t\t\t\t\talpha = args[2];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (reading)\n\t\t\t\t\t\t\tread = 1;\n\t\t\t\t\t\targs = Base.slice(args, 1);\n\t\t\t\t\t\targType = typeof arg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!components) {\n\t\t\t\t\tvalues = argType === 'number'\n\t\t\t\t\t\t\t? args\n\t\t\t\t\t\t\t: argType === 'object' && arg.length != null\n\t\t\t\t\t\t\t\t? arg\n\t\t\t\t\t\t\t\t: null;\n\t\t\t\t\tif (values) {\n\t\t\t\t\t\tif (!type)\n\t\t\t\t\t\t\ttype = values.length >= 3\n\t\t\t\t\t\t\t\t\t? 'rgb'\n\t\t\t\t\t\t\t\t\t: 'gray';\n\t\t\t\t\t\tvar length = types[type].length;\n\t\t\t\t\t\talpha = values[length];\n\t\t\t\t\t\tif (reading) {\n\t\t\t\t\t\t\tread += values === arguments\n\t\t\t\t\t\t\t\t? length + (alpha != null ? 1 : 0)\n\t\t\t\t\t\t\t\t: 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (values.length > length)\n\t\t\t\t\t\t\tvalues = Base.slice(values, 0, length);\n\t\t\t\t\t} else if (argType === 'string') {\n\t\t\t\t\t\ttype = 'rgb';\n\t\t\t\t\t\tcomponents = fromCSS(arg);\n\t\t\t\t\t\tif (components.length === 4) {\n\t\t\t\t\t\t\talpha = components[3];\n\t\t\t\t\t\t\tcomponents.length--;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (argType === 'object') {\n\t\t\t\t\t\tif (arg.constructor === Color) {\n\t\t\t\t\t\t\ttype = arg._type;\n\t\t\t\t\t\t\tcomponents = arg._components.slice();\n\t\t\t\t\t\t\talpha = arg._alpha;\n\t\t\t\t\t\t\tif (type === 'gradient') {\n\t\t\t\t\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {\n\t\t\t\t\t\t\t\t\tvar point = components[i];\n\t\t\t\t\t\t\t\t\tif (point)\n\t\t\t\t\t\t\t\t\t\tcomponents[i] = point.clone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (arg.constructor === Gradient) {\n\t\t\t\t\t\t\ttype = 'gradient';\n\t\t\t\t\t\t\tvalues = args;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttype = 'hue' in arg\n\t\t\t\t\t\t\t\t? 'lightness' in arg\n\t\t\t\t\t\t\t\t\t? 'hsl'\n\t\t\t\t\t\t\t\t\t: 'hsb'\n\t\t\t\t\t\t\t\t: 'gradient' in arg || 'stops' in arg\n\t\t\t\t\t\t\t\t\t\t|| 'radial' in arg\n\t\t\t\t\t\t\t\t\t? 'gradient'\n\t\t\t\t\t\t\t\t\t: 'gray' in arg\n\t\t\t\t\t\t\t\t\t\t? 'gray'\n\t\t\t\t\t\t\t\t\t\t: 'rgb';\n\t\t\t\t\t\t\tvar properties = types[type],\n\t\t\t\t\t\t\t\tparsers = componentParsers[type];\n\t\t\t\t\t\t\tthis._components = components = [];\n\t\t\t\t\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar value = arg[properties[i]];\n\t\t\t\t\t\t\t\tif (value == null && !i && type === 'gradient'\n\t\t\t\t\t\t\t\t\t\t&& 'stops' in arg) {\n\t\t\t\t\t\t\t\t\tvalue = {\n\t\t\t\t\t\t\t\t\t\tstops: arg.stops,\n\t\t\t\t\t\t\t\t\t\tradial: arg.radial\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalue = parsers[i].call(this, value);\n\t\t\t\t\t\t\t\tif (value != null)\n\t\t\t\t\t\t\t\t\tcomponents[i] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\talpha = arg.alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (reading && type)\n\t\t\t\t\t\tread = 1;\n\t\t\t\t}\n\t\t\t\tthis._type = type || 'rgb';\n\t\t\t\tif (!components) {\n\t\t\t\t\tthis._components = components = [];\n\t\t\t\t\tvar parsers = componentParsers[this._type];\n\t\t\t\t\tfor (var i = 0, l = parsers.length; i < l; i++) {\n\t\t\t\t\t\tvar value = parsers[i].call(this, values && values[i]);\n\t\t\t\t\t\tif (value != null)\n\t\t\t\t\t\t\tcomponents[i] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._components = components;\n\t\t\t\tthis._properties = types[this._type];\n\t\t\t\tthis._alpha = alpha;\n\t\t\t\tif (reading)\n\t\t\t\t\tthis.__read = read;\n\t\t\t\treturn this;\n\t\t\t},\n\t\n\t\t\tset: '#initialize',\n\t\n\t\t\t_serialize: function(options, dictionary) {\n\t\t\t\tvar components = this.getComponents();\n\t\t\t\treturn Base.serialize(\n\t\t\t\t\t\t/^(gray|rgb)$/.test(this._type)\n\t\t\t\t\t\t\t? components\n\t\t\t\t\t\t\t: [this._type].concat(components),\n\t\t\t\t\t\toptions, true, dictionary);\n\t\t\t},\n\t\n\t\t\t_changed: function() {\n\t\t\t\tthis._canvasStyle = null;\n\t\t\t\tif (this._owner)\n\t\t\t\t\tthis._owner._changed(65);\n\t\t\t},\n\t\n\t\t\t_convert: function(type) {\n\t\t\t\tvar converter;\n\t\t\t\treturn this._type === type\n\t\t\t\t\t\t? this._components.slice()\n\t\t\t\t\t\t: (converter = converters[this._type + '-' + type])\n\t\t\t\t\t\t\t? converter.apply(this, this._components)\n\t\t\t\t\t\t\t: converters['rgb-' + type].apply(this,\n\t\t\t\t\t\t\t\tconverters[this._type + '-rgb'].apply(this,\n\t\t\t\t\t\t\t\t\tthis._components));\n\t\t\t},\n\t\n\t\t\tconvert: function(type) {\n\t\t\t\treturn new Color(type, this._convert(type), this._alpha);\n\t\t\t},\n\t\n\t\t\tgetType: function() {\n\t\t\t\treturn this._type;\n\t\t\t},\n\t\n\t\t\tsetType: function(type) {\n\t\t\t\tthis._components = this._convert(type);\n\t\t\t\tthis._properties = types[type];\n\t\t\t\tthis._type = type;\n\t\t\t},\n\t\n\t\t\tgetComponents: function() {\n\t\t\t\tvar components = this._components.slice();\n\t\t\t\tif (this._alpha != null)\n\t\t\t\t\tcomponents.push(this._alpha);\n\t\t\t\treturn components;\n\t\t\t},\n\t\n\t\t\tgetAlpha: function() {\n\t\t\t\treturn this._alpha != null ? this._alpha : 1;\n\t\t\t},\n\t\n\t\t\tsetAlpha: function(alpha) {\n\t\t\t\tthis._alpha = alpha == null ? null : Math.min(Math.max(alpha, 0), 1);\n\t\t\t\tthis._changed();\n\t\t\t},\n\t\n\t\t\thasAlpha: function() {\n\t\t\t\treturn this._alpha != null;\n\t\t\t},\n\t\n\t\t\tequals: function(color) {\n\t\t\t\tvar col = Base.isPlainValue(color, true)\n\t\t\t\t\t\t? Color.read(arguments)\n\t\t\t\t\t\t: color;\n\t\t\t\treturn col === this || col && this._class === col._class\n\t\t\t\t\t\t&& this._type === col._type\n\t\t\t\t\t\t&& this.getAlpha() === col.getAlpha()\n\t\t\t\t\t\t&& Base.equals(this._components, col._components)\n\t\t\t\t\t\t|| false;\n\t\t\t},\n\t\n\t\t\ttoString: function() {\n\t\t\t\tvar properties = this._properties,\n\t\t\t\t\tparts = [],\n\t\t\t\t\tisGradient = this._type === 'gradient',\n\t\t\t\t\tf = Formatter.instance;\n\t\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {\n\t\t\t\t\tvar value = this._components[i];\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t\tparts.push(properties[i] + ': '\n\t\t\t\t\t\t\t\t+ (isGradient ? value : f.number(value)));\n\t\t\t\t}\n\t\t\t\tif (this._alpha != null)\n\t\t\t\t\tparts.push('alpha: ' + f.number(this._alpha));\n\t\t\t\treturn '{ ' + parts.join(', ') + ' }';\n\t\t\t},\n\t\n\t\t\ttoCSS: function(hex) {\n\t\t\t\tvar components = this._convert('rgb'),\n\t\t\t\t\talpha = hex || this._alpha == null ? 1 : this._alpha;\n\t\t\t\tfunction convert(val) {\n\t\t\t\t\treturn Math.round((val < 0 ? 0 : val > 1 ? 1 : val) * 255);\n\t\t\t\t}\n\t\t\t\tcomponents = [\n\t\t\t\t\tconvert(components[0]),\n\t\t\t\t\tconvert(components[1]),\n\t\t\t\t\tconvert(components[2])\n\t\t\t\t];\n\t\t\t\tif (alpha < 1)\n\t\t\t\t\tcomponents.push(alpha < 0 ? 0 : alpha);\n\t\t\t\treturn hex\n\t\t\t\t\t\t? '#' + ((1 << 24) + (components[0] << 16)\n\t\t\t\t\t\t\t+ (components[1] << 8)\n\t\t\t\t\t\t\t+ components[2]).toString(16).slice(1)\n\t\t\t\t\t\t: (components.length == 4 ? 'rgba(' : 'rgb(')\n\t\t\t\t\t\t\t+ components.join(',') + ')';\n\t\t\t},\n\t\n\t\t\ttoCanvasStyle: function(ctx) {\n\t\t\t\tif (this._canvasStyle)\n\t\t\t\t\treturn this._canvasStyle;\n\t\t\t\tif (this._type !== 'gradient')\n\t\t\t\t\treturn this._canvasStyle = this.toCSS();\n\t\t\t\tvar components = this._components,\n\t\t\t\t\tgradient = components[0],\n\t\t\t\t\tstops = gradient._stops,\n\t\t\t\t\torigin = components[1],\n\t\t\t\t\tdestination = components[2],\n\t\t\t\t\tcanvasGradient;\n\t\t\t\tif (gradient._radial) {\n\t\t\t\t\tvar radius = destination.getDistance(origin),\n\t\t\t\t\t\thighlight = components[3];\n\t\t\t\t\tif (highlight) {\n\t\t\t\t\t\tvar vector = highlight.subtract(origin);\n\t\t\t\t\t\tif (vector.getLength() > radius)\n\t\t\t\t\t\t\thighlight = origin.add(vector.normalize(radius - 0.1));\n\t\t\t\t\t}\n\t\t\t\t\tvar start = highlight || origin;\n\t\t\t\t\tcanvasGradient = ctx.createRadialGradient(start.x, start.y,\n\t\t\t\t\t\t\t0, origin.x, origin.y, radius);\n\t\t\t\t} else {\n\t\t\t\t\tcanvasGradient = ctx.createLinearGradient(origin.x, origin.y,\n\t\t\t\t\t\t\tdestination.x, destination.y);\n\t\t\t\t}\n\t\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {\n\t\t\t\t\tvar stop = stops[i];\n\t\t\t\t\tcanvasGradient.addColorStop(stop._offset || i / (l - 1),\n\t\t\t\t\t\t\tstop._color.toCanvasStyle());\n\t\t\t\t}\n\t\t\t\treturn this._canvasStyle = canvasGradient;\n\t\t\t},\n\t\n\t\t\ttransform: function(matrix) {\n\t\t\t\tif (this._type === 'gradient') {\n\t\t\t\t\tvar components = this._components;\n\t\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {\n\t\t\t\t\t\tvar point = components[i];\n\t\t\t\t\t\tmatrix._transformPoint(point, point, true);\n\t\t\t\t\t}\n\t\t\t\t\tthis._changed();\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tstatics: {\n\t\t\t\t_types: types,\n\t\n\t\t\t\trandom: function() {\n\t\t\t\t\tvar random = Math.random;\n\t\t\t\t\treturn new Color(random(), random(), random());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tnew function() {\n\t\tvar operators = {\n\t\t\tadd: function(a, b) {\n\t\t\t\treturn a + b;\n\t\t\t},\n\t\n\t\t\tsubtract: function(a, b) {\n\t\t\t\treturn a - b;\n\t\t\t},\n\t\n\t\t\tmultiply: function(a, b) {\n\t\t\t\treturn a * b;\n\t\t\t},\n\t\n\t\t\tdivide: function(a, b) {\n\t\t\t\treturn a / b;\n\t\t\t}\n\t\t};\n\t\n\t\treturn Base.each(operators, function(operator, name) {\n\t\t\tthis[name] = function(color) {\n\t\t\t\tcolor = Color.read(arguments);\n\t\t\t\tvar type = this._type,\n\t\t\t\t\tcomponents1 = this._components,\n\t\t\t\t\tcomponents2 = color._convert(type);\n\t\t\t\tfor (var i = 0, l = components1.length; i < l; i++)\n\t\t\t\t\tcomponents2[i] = operator(components1[i], components2[i]);\n\t\t\t\treturn new Color(type, components2,\n\t\t\t\t\t\tthis._alpha != null\n\t\t\t\t\t\t\t\t? operator(this._alpha, color.getAlpha())\n\t\t\t\t\t\t\t\t: null);\n\t\t\t};\n\t\t}, {\n\t\t});\n\t});\n\t\n\tvar Gradient = Base.extend({\n\t\t_class: 'Gradient',\n\t\n\t\tinitialize: function Gradient(stops, radial) {\n\t\t\tthis._id = UID.get();\n\t\t\tif (stops && Base.isPlainObject(stops)) {\n\t\t\t\tthis.set(stops);\n\t\t\t\tstops = radial = null;\n\t\t\t}\n\t\t\tif (this._stops == null) {\n\t\t\t\tthis.setStops(stops || ['white', 'black']);\n\t\t\t}\n\t\t\tif (this._radial == null) {\n\t\t\t\tthis.setRadial(typeof radial === 'string' && radial === 'radial'\n\t\t\t\t\t\t|| radial || false);\n\t\t\t}\n\t\t},\n\t\n\t\t_serialize: function(options, dictionary) {\n\t\t\treturn dictionary.add(this, function() {\n\t\t\t\treturn Base.serialize([this._stops, this._radial],\n\t\t\t\t\t\toptions, true, dictionary);\n\t\t\t});\n\t\t},\n\t\n\t\t_changed: function() {\n\t\t\tfor (var i = 0, l = this._owners && this._owners.length; i < l; i++) {\n\t\t\t\tthis._owners[i]._changed();\n\t\t\t}\n\t\t},\n\t\n\t\t_addOwner: function(color) {\n\t\t\tif (!this._owners)\n\t\t\t\tthis._owners = [];\n\t\t\tthis._owners.push(color);\n\t\t},\n\t\n\t\t_removeOwner: function(color) {\n\t\t\tvar index = this._owners ? this._owners.indexOf(color) : -1;\n\t\t\tif (index != -1) {\n\t\t\t\tthis._owners.splice(index, 1);\n\t\t\t\tif (!this._owners.length)\n\t\t\t\t\tthis._owners = undefined;\n\t\t\t}\n\t\t},\n\t\n\t\tclone: function() {\n\t\t\tvar stops = [];\n\t\t\tfor (var i = 0, l = this._stops.length; i < l; i++) {\n\t\t\t\tstops[i] = this._stops[i].clone();\n\t\t\t}\n\t\t\treturn new Gradient(stops, this._radial);\n\t\t},\n\t\n\t\tgetStops: function() {\n\t\t\treturn this._stops;\n\t\t},\n\t\n\t\tsetStops: function(stops) {\n\t\t\tif (stops.length < 2) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Gradient stop list needs to contain at least two stops.');\n\t\t\t}\n\t\t\tvar _stops = this._stops;\n\t\t\tif (_stops) {\n\t\t\t\tfor (var i = 0, l = _stops.length; i < l; i++)\n\t\t\t\t\t_stops[i]._owner = undefined;\n\t\t\t}\n\t\t\t_stops = this._stops = GradientStop.readList(stops, 0, { clone: true });\n\t\t\tfor (var i = 0, l = _stops.length; i < l; i++)\n\t\t\t\t_stops[i]._owner = this;\n\t\t\tthis._changed();\n\t\t},\n\t\n\t\tgetRadial: function() {\n\t\t\treturn this._radial;\n\t\t},\n\t\n\t\tsetRadial: function(radial) {\n\t\t\tthis._radial = radial;\n\t\t\tthis._changed();\n\t\t},\n\t\n\t\tequals: function(gradient) {\n\t\t\tif (gradient === this)\n\t\t\t\treturn true;\n\t\t\tif (gradient && this._class === gradient._class) {\n\t\t\t\tvar stops1 = this._stops,\n\t\t\t\t\tstops2 = gradient._stops,\n\t\t\t\t\tlength = stops1.length;\n\t\t\t\tif (length === stops2.length) {\n\t\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\t\tif (!stops1[i].equals(stops2[i]))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t});\n\t\n\tvar GradientStop = Base.extend({\n\t\t_class: 'GradientStop',\n\t\n\t\tinitialize: function GradientStop(arg0, arg1) {\n\t\t\tvar color = arg0,\n\t\t\t\toffset = arg1;\n\t\t\tif (typeof arg0 === 'object' && arg1 === undefined) {\n\t\t\t\tif (Array.isArray(arg0) && typeof arg0[0] !== 'number') {\n\t\t\t\t\tcolor = arg0[0];\n\t\t\t\t\toffset = arg0[1];\n\t\t\t\t} else if ('color' in arg0 || 'offset' in arg0\n\t\t\t\t\t\t|| 'rampPoint' in arg0) {\n\t\t\t\t\tcolor = arg0.color;\n\t\t\t\t\toffset = arg0.offset || arg0.rampPoint || 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setColor(color);\n\t\t\tthis.setOffset(offset);\n\t\t},\n\t\n\t\tclone: function() {\n\t\t\treturn new GradientStop(this._color.clone(), this._offset);\n\t\t},\n\t\n\t\t_serialize: function(options, dictionary) {\n\t\t\tvar color = this._color,\n\t\t\t\toffset = this._offset;\n\t\t\treturn Base.serialize(offset == null ? [color] : [color, offset],\n\t\t\t\t\toptions, true, dictionary);\n\t\t},\n\t\n\t\t_changed: function() {\n\t\t\tif (this._owner)\n\t\t\t\tthis._owner._changed(65);\n\t\t},\n\t\n\t\tgetOffset: function() {\n\t\t\treturn this._offset;\n\t\t},\n\t\n\t\tsetOffset: function(offset) {\n\t\t\tthis._offset = offset;\n\t\t\tthis._changed();\n\t\t},\n\t\n\t\tgetRampPoint: '#getOffset',\n\t\tsetRampPoint: '#setOffset',\n\t\n\t\tgetColor: function() {\n\t\t\treturn this._color;\n\t\t},\n\t\n\t\tsetColor: function() {\n\t\t\tvar color = Color.read(arguments, 0, { clone: true });\n\t\t\tif (color)\n\t\t\t\tcolor._owner = this;\n\t\t\tthis._color = color;\n\t\t\tthis._changed();\n\t\t},\n\t\n\t\tequals: function(stop) {\n\t\t\treturn stop === this || stop && this._class === stop._class\n\t\t\t\t\t&& this._color.equals(stop._color)\n\t\t\t\t\t&& this._offset == stop._offset\n\t\t\t\t\t|| false;\n\t\t}\n\t});\n\t\n\tvar Style = Base.extend(new function() {\n\t\tvar itemDefaults = {\n\t\t\tfillColor: null,\n\t\t\tfillRule: 'nonzero',\n\t\t\tstrokeColor: null,\n\t\t\tstrokeWidth: 1,\n\t\t\tstrokeCap: 'butt',\n\t\t\tstrokeJoin: 'miter',\n\t\t\tstrokeScaling: true,\n\t\t\tmiterLimit: 10,\n\t\t\tdashOffset: 0,\n\t\t\tdashArray: [],\n\t\t\tshadowColor: null,\n\t\t\tshadowBlur: 0,\n\t\t\tshadowOffset: new Point(),\n\t\t\tselectedColor: null\n\t\t},\n\t\tgroupDefaults = Base.set({}, itemDefaults, {\n\t\t\tfontFamily: 'sans-serif',\n\t\t\tfontWeight: 'normal',\n\t\t\tfontSize: 12,\n\t\t\tleading: null,\n\t\t\tjustification: 'left'\n\t\t}),\n\t\ttextDefaults = Base.set({}, groupDefaults, {\n\t\t\tfillColor: new Color()\n\t\t}),\n\t\tflags = {\n\t\t\tstrokeWidth: 97,\n\t\t\tstrokeCap: 97,\n\t\t\tstrokeJoin: 97,\n\t\t\tstrokeScaling: 105,\n\t\t\tmiterLimit: 97,\n\t\t\tfontFamily: 9,\n\t\t\tfontWeight: 9,\n\t\t\tfontSize: 9,\n\t\t\tfont: 9,\n\t\t\tleading: 9,\n\t\t\tjustification: 9\n\t\t},\n\t\titem = {\n\t\t\tbeans: true\n\t\t},\n\t\tfields = {\n\t\t\t_class: 'Style',\n\t\t\tbeans: true,\n\t\n\t\t\tinitialize: function Style(style, _owner, _project) {\n\t\t\t\tthis._values = {};\n\t\t\t\tthis._owner = _owner;\n\t\t\t\tthis._project = _owner && _owner._project || _project\n\t\t\t\t\t\t|| paper.project;\n\t\t\t\tthis._defaults = !_owner || _owner instanceof Group ? groupDefaults\n\t\t\t\t\t\t: _owner instanceof TextItem ? textDefaults\n\t\t\t\t\t\t: itemDefaults;\n\t\t\t\tif (style)\n\t\t\t\t\tthis.set(style);\n\t\t\t}\n\t\t};\n\t\n\t\tBase.each(groupDefaults, function(value, key) {\n\t\t\tvar isColor = /Color$/.test(key),\n\t\t\t\tisPoint = key === 'shadowOffset',\n\t\t\t\tpart = Base.capitalize(key),\n\t\t\t\tflag = flags[key],\n\t\t\t\tset = 'set' + part,\n\t\t\t\tget = 'get' + part;\n\t\n\t\t\tfields[set] = function(value) {\n\t\t\t\tvar owner = this._owner,\n\t\t\t\t\tchildren = owner && owner._children;\n\t\t\t\tif (children && children.length > 0\n\t\t\t\t\t\t&& !(owner instanceof CompoundPath)) {\n\t\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\t\t\tchildren[i]._style[set](value);\n\t\t\t\t} else if (key in this._defaults) {\n\t\t\t\t\tvar old = this._values[key];\n\t\t\t\t\tif (old !== value) {\n\t\t\t\t\t\tif (isColor) {\n\t\t\t\t\t\t\tif (old && old._owner !== undefined)\n\t\t\t\t\t\t\t\told._owner = undefined;\n\t\t\t\t\t\t\tif (value && value.constructor === Color) {\n\t\t\t\t\t\t\t\tif (value._owner)\n\t\t\t\t\t\t\t\t\tvalue = value.clone();\n\t\t\t\t\t\t\t\tvalue._owner = owner;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._values[key] = value;\n\t\t\t\t\t\tif (owner)\n\t\t\t\t\t\t\towner._changed(flag || 65);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tfields[get] = function(_dontMerge) {\n\t\t\t\tvar owner = this._owner,\n\t\t\t\t\tchildren = owner && owner._children,\n\t\t\t\t\tvalue;\n\t\t\t\tif (key in this._defaults && (!children || !children.length\n\t\t\t\t\t\t|| _dontMerge || owner instanceof CompoundPath)) {\n\t\t\t\t\tvar value = this._values[key];\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tvalue = this._defaults[key];\n\t\t\t\t\t\tif (value && value.clone)\n\t\t\t\t\t\t\tvalue = value.clone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar ctor = isColor ? Color : isPoint ? Point : null;\n\t\t\t\t\t\tif (ctor && !(value && value.constructor === ctor)) {\n\t\t\t\t\t\t\tthis._values[key] = value = ctor.read([value], 0,\n\t\t\t\t\t\t\t\t\t{ readNull: true, clone: true });\n\t\t\t\t\t\t\tif (value && isColor)\n\t\t\t\t\t\t\t\tvalue._owner = owner;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (children) {\n\t\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\t\tvar childValue = children[i]._style[get]();\n\t\t\t\t\t\tif (!i) {\n\t\t\t\t\t\t\tvalue = childValue;\n\t\t\t\t\t\t} else if (!Base.equals(value, childValue)) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t};\n\t\n\t\t\titem[get] = function(_dontMerge) {\n\t\t\t\treturn this._style[get](_dontMerge);\n\t\t\t};\n\t\n\t\t\titem[set] = function(value) {\n\t\t\t\tthis._style[set](value);\n\t\t\t};\n\t\t});\n\t\n\t\tBase.each({\n\t\t\tFont: 'FontFamily',\n\t\t\tWindingRule: 'FillRule'\n\t\t}, function(value, key) {\n\t\t\tvar get = 'get' + key,\n\t\t\t\tset = 'set' + key;\n\t\t\tfields[get] = item[get] = '#get' + value;\n\t\t\tfields[set] = item[set] = '#set' + value;\n\t\t});\n\t\n\t\tItem.inject(item);\n\t\treturn fields;\n\t}, {\n\t\tset: function(style) {\n\t\t\tthis._values = {};\n\t\t\tvar isStyle = style instanceof Style,\n\t\t\t\tvalues = isStyle ? style._values : style;\n\t\t\tif (values) {\n\t\t\t\tfor (var key in values) {\n\t\t\t\t\tif (key in this._defaults) {\n\t\t\t\t\t\tvar value = values[key];\n\t\t\t\t\t\tthis[key] = value && isStyle && value.clone\n\t\t\t\t\t\t\t\t? value.clone() : value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tequals: function(style) {\n\t\t\tfunction compare(style1, style2, secondary) {\n\t\t\t\tvar values1 = style1._values,\n\t\t\t\t\tvalues2 = style2._values,\n\t\t\t\t\tdefaults2 = style2._defaults;\n\t\t\t\tfor (var key in values1) {\n\t\t\t\t\tvar value1 = values1[key],\n\t\t\t\t\t\tvalue2 = values2[key];\n\t\t\t\t\tif (!(secondary && key in values2) && !Base.equals(value1,\n\t\t\t\t\t\t\tvalue2 === undefined ? defaults2[key] : value2))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\treturn style === this || style && this._class === style._class\n\t\t\t\t\t&& compare(this, style)\n\t\t\t\t\t&& compare(style, this, true)\n\t\t\t\t\t|| false;\n\t\t},\n\t\n\t\thasFill: function() {\n\t\t\tvar color = this.getFillColor();\n\t\t\treturn !!color && color.alpha > 0;\n\t\t},\n\t\n\t\thasStroke: function() {\n\t\t\tvar color = this.getStrokeColor();\n\t\t\treturn !!color && color.alpha > 0 && this.getStrokeWidth() > 0;\n\t\t},\n\t\n\t\thasShadow: function() {\n\t\t\tvar color = this.getShadowColor();\n\t\t\treturn !!color && color.alpha > 0 && (this.getShadowBlur() > 0\n\t\t\t\t\t|| !this.getShadowOffset().isZero());\n\t\t},\n\t\n\t\tgetView: function() {\n\t\t\treturn this._project._view;\n\t\t},\n\t\n\t\tgetFontStyle: function() {\n\t\t\tvar fontSize = this.getFontSize();\n\t\t\treturn this.getFontWeight()\n\t\t\t\t\t+ ' ' + fontSize + (/[a-z]/i.test(fontSize + '') ? ' ' : 'px ')\n\t\t\t\t\t+ this.getFontFamily();\n\t\t},\n\t\n\t\tgetFont: '#getFontFamily',\n\t\tsetFont: '#setFontFamily',\n\t\n\t\tgetLeading: function getLeading() {\n\t\t\tvar leading = getLeading.base.call(this),\n\t\t\t\tfontSize = this.getFontSize();\n\t\t\tif (/pt|em|%|px/.test(fontSize))\n\t\t\t\tfontSize = this.getView().getPixelSize(fontSize);\n\t\t\treturn leading != null ? leading : fontSize * 1.2;\n\t\t}\n\t\n\t});\n\t\n\tvar DomElement = new function() {\n\t\tfunction handlePrefix(el, name, set, value) {\n\t\t\tvar prefixes = ['', 'webkit', 'moz', 'Moz', 'ms', 'o'],\n\t\t\t\tsuffix = name[0].toUpperCase() + name.substring(1);\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar prefix = prefixes[i],\n\t\t\t\t\tkey = prefix ? prefix + suffix : name;\n\t\t\t\tif (key in el) {\n\t\t\t\t\tif (set) {\n\t\t\t\t\t\tel[key] = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn el[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn {\n\t\t\tgetStyles: function(el) {\n\t\t\t\tvar doc = el && el.nodeType !== 9 ? el.ownerDocument : el,\n\t\t\t\t\tview = doc && doc.defaultView;\n\t\t\t\treturn view && view.getComputedStyle(el, '');\n\t\t\t},\n\t\n\t\t\tgetBounds: function(el, viewport) {\n\t\t\t\tvar doc = el.ownerDocument,\n\t\t\t\t\tbody = doc.body,\n\t\t\t\t\thtml = doc.documentElement,\n\t\t\t\t\trect;\n\t\t\t\ttry {\n\t\t\t\t\trect = el.getBoundingClientRect();\n\t\t\t\t} catch (e) {\n\t\t\t\t\trect = { left: 0, top: 0, width: 0, height: 0 };\n\t\t\t\t}\n\t\t\t\tvar x = rect.left - (html.clientLeft || body.clientLeft || 0),\n\t\t\t\t\ty = rect.top - (html.clientTop || body.clientTop || 0);\n\t\t\t\tif (!viewport) {\n\t\t\t\t\tvar view = doc.defaultView;\n\t\t\t\t\tx += view.pageXOffset || html.scrollLeft || body.scrollLeft;\n\t\t\t\t\ty += view.pageYOffset || html.scrollTop || body.scrollTop;\n\t\t\t\t}\n\t\t\t\treturn new Rectangle(x, y, rect.width, rect.height);\n\t\t\t},\n\t\n\t\t\tgetViewportBounds: function(el) {\n\t\t\t\tvar doc = el.ownerDocument,\n\t\t\t\t\tview = doc.defaultView,\n\t\t\t\t\thtml = doc.documentElement;\n\t\t\t\treturn new Rectangle(0, 0,\n\t\t\t\t\tview.innerWidth || html.clientWidth,\n\t\t\t\t\tview.innerHeight || html.clientHeight\n\t\t\t\t);\n\t\t\t},\n\t\n\t\t\tgetOffset: function(el, viewport) {\n\t\t\t\treturn DomElement.getBounds(el, viewport).getPoint();\n\t\t\t},\n\t\n\t\t\tgetSize: function(el) {\n\t\t\t\treturn DomElement.getBounds(el, true).getSize();\n\t\t\t},\n\t\n\t\t\tisInvisible: function(el) {\n\t\t\t\treturn DomElement.getSize(el).equals(new Size(0, 0));\n\t\t\t},\n\t\n\t\t\tisInView: function(el) {\n\t\t\t\treturn !DomElement.isInvisible(el)\n\t\t\t\t\t\t&& DomElement.getViewportBounds(el).intersects(\n\t\t\t\t\t\t\tDomElement.getBounds(el, true));\n\t\t\t},\n\t\n\t\t\tisInserted: function(el) {\n\t\t\t\treturn document.body.contains(el);\n\t\t\t},\n\t\n\t\t\tgetPrefixed: function(el, name) {\n\t\t\t\treturn el && handlePrefix(el, name);\n\t\t\t},\n\t\n\t\t\tsetPrefixed: function(el, name, value) {\n\t\t\t\tif (typeof name === 'object') {\n\t\t\t\t\tfor (var key in name)\n\t\t\t\t\t\thandlePrefix(el, key, true, name[key]);\n\t\t\t\t} else {\n\t\t\t\t\thandlePrefix(el, name, true, value);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n\t\n\tvar DomEvent = {\n\t\tadd: function(el, events) {\n\t\t\tif (el) {\n\t\t\t\tfor (var type in events) {\n\t\t\t\t\tvar func = events[type],\n\t\t\t\t\t\tparts = type.split(/[\\s,]+/g);\n\t\t\t\t\tfor (var i = 0, l = parts.length; i < l; i++)\n\t\t\t\t\t\tel.addEventListener(parts[i], func, false);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tremove: function(el, events) {\n\t\t\tif (el) {\n\t\t\t\tfor (var type in events) {\n\t\t\t\t\tvar func = events[type],\n\t\t\t\t\t\tparts = type.split(/[\\s,]+/g);\n\t\t\t\t\tfor (var i = 0, l = parts.length; i < l; i++)\n\t\t\t\t\t\tel.removeEventListener(parts[i], func, false);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tgetPoint: function(event) {\n\t\t\tvar pos = event.targetTouches\n\t\t\t\t\t? event.targetTouches.length\n\t\t\t\t\t\t? event.targetTouches[0]\n\t\t\t\t\t\t: event.changedTouches[0]\n\t\t\t\t\t: event;\n\t\t\treturn new Point(\n\t\t\t\tpos.pageX || pos.clientX + document.documentElement.scrollLeft,\n\t\t\t\tpos.pageY || pos.clientY + document.documentElement.scrollTop\n\t\t\t);\n\t\t},\n\t\n\t\tgetTarget: function(event) {\n\t\t\treturn event.target || event.srcElement;\n\t\t},\n\t\n\t\tgetRelatedTarget: function(event) {\n\t\t\treturn event.relatedTarget || event.toElement;\n\t\t},\n\t\n\t\tgetOffset: function(event, target) {\n\t\t\treturn DomEvent.getPoint(event).subtract(DomElement.getOffset(\n\t\t\t\t\ttarget || DomEvent.getTarget(event)));\n\t\t}\n\t};\n\t\n\tDomEvent.requestAnimationFrame = new function() {\n\t\tvar nativeRequest = DomElement.getPrefixed(window, 'requestAnimationFrame'),\n\t\t\trequested = false,\n\t\t\tcallbacks = [],\n\t\t\ttimer;\n\t\n\t\tfunction handleCallbacks() {\n\t\t\tvar functions = callbacks;\n\t\t\tcallbacks = [];\n\t\t\tfor (var i = 0, l = functions.length; i < l; i++)\n\t\t\t\tfunctions[i]();\n\t\t\trequested = nativeRequest && callbacks.length;\n\t\t\tif (requested)\n\t\t\t\tnativeRequest(handleCallbacks);\n\t\t}\n\t\n\t\treturn function(callback) {\n\t\t\tcallbacks.push(callback);\n\t\t\tif (nativeRequest) {\n\t\t\t\tif (!requested) {\n\t\t\t\t\tnativeRequest(handleCallbacks);\n\t\t\t\t\trequested = true;\n\t\t\t\t}\n\t\t\t} else if (!timer) {\n\t\t\t\ttimer = setInterval(handleCallbacks, 1000 / 60);\n\t\t\t}\n\t\t};\n\t};\n\t\n\tvar View = Base.extend(Emitter, {\n\t\t_class: 'View',\n\t\n\t\tinitialize: function View(project, element) {\n\t\n\t\t\tfunction getSize(name) {\n\t\t\t\treturn element[name] || parseInt(element.getAttribute(name), 10);\n\t\t\t}\n\t\n\t\t\tfunction getCanvasSize() {\n\t\t\t\tvar size = DomElement.getSize(element);\n\t\t\t\treturn size.isNaN() || size.isZero()\n\t\t\t\t\t\t? new Size(getSize('width'), getSize('height'))\n\t\t\t\t\t\t: size;\n\t\t\t}\n\t\n\t\t\tvar size;\n\t\t\tif (window && element) {\n\t\t\t\tthis._id = element.getAttribute('id');\n\t\t\t\tif (this._id == null)\n\t\t\t\t\telement.setAttribute('id', this._id = 'view-' + View._id++);\n\t\t\t\tDomEvent.add(element, this._viewEvents);\n\t\t\t\tvar none = 'none';\n\t\t\t\tDomElement.setPrefixed(element.style, {\n\t\t\t\t\tuserDrag: none,\n\t\t\t\t\tuserSelect: none,\n\t\t\t\t\ttouchCallout: none,\n\t\t\t\t\tcontentZooming: none,\n\t\t\t\t\ttapHighlightColor: 'rgba(0,0,0,0)'\n\t\t\t\t});\n\t\n\t\t\t\tif (PaperScope.hasAttribute(element, 'resize')) {\n\t\t\t\t\tvar that = this;\n\t\t\t\t\tDomEvent.add(window, this._windowEvents = {\n\t\t\t\t\t\tresize: function() {\n\t\t\t\t\t\t\tthat.setViewSize(getCanvasSize());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\tsize = getCanvasSize();\n\t\n\t\t\t\tif (PaperScope.hasAttribute(element, 'stats')\n\t\t\t\t\t\t&& typeof Stats !== 'undefined') {\n\t\t\t\t\tthis._stats = new Stats();\n\t\t\t\t\tvar stats = this._stats.domElement,\n\t\t\t\t\t\tstyle = stats.style,\n\t\t\t\t\t\toffset = DomElement.getOffset(element);\n\t\t\t\t\tstyle.position = 'absolute';\n\t\t\t\t\tstyle.left = offset.x + 'px';\n\t\t\t\t\tstyle.top = offset.y + 'px';\n\t\t\t\t\tdocument.body.appendChild(stats);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsize = new Size(element);\n\t\t\t\telement = null;\n\t\t\t}\n\t\t\tthis._project = project;\n\t\t\tthis._scope = project._scope;\n\t\t\tthis._element = element;\n\t\t\tif (!this._pixelRatio)\n\t\t\t\tthis._pixelRatio = window && window.devicePixelRatio || 1;\n\t\t\tthis._setElementSize(size.width, size.height);\n\t\t\tthis._viewSize = size;\n\t\t\tView._views.push(this);\n\t\t\tView._viewsById[this._id] = this;\n\t\t\t(this._matrix = new Matrix())._owner = this;\n\t\t\tif (!View._focused)\n\t\t\t\tView._focused = this;\n\t\t\tthis._frameItems = {};\n\t\t\tthis._frameItemCount = 0;\n\t\t\tthis._itemEvents = { native: {}, virtual: {} };\n\t\t\tthis._autoUpdate = !paper.agent.node;\n\t\t\tthis._needsUpdate = false;\n\t\t},\n\t\n\t\tremove: function() {\n\t\t\tif (!this._project)\n\t\t\t\treturn false;\n\t\t\tif (View._focused === this)\n\t\t\t\tView._focused = null;\n\t\t\tView._views.splice(View._views.indexOf(this), 1);\n\t\t\tdelete View._viewsById[this._id];\n\t\t\tvar project = this._project;\n\t\t\tif (project._view === this)\n\t\t\t\tproject._view = null;\n\t\t\tDomEvent.remove(this._element, this._viewEvents);\n\t\t\tDomEvent.remove(window, this._windowEvents);\n\t\t\tthis._element = this._project = null;\n\t\t\tthis.off('frame');\n\t\t\tthis._animate = false;\n\t\t\tthis._frameItems = {};\n\t\t\treturn true;\n\t\t},\n\t\n\t\t_events: Base.each(\n\t\t\tItem._itemHandlers.concat(['onResize', 'onKeyDown', 'onKeyUp']),\n\t\t\tfunction(name) {\n\t\t\t\tthis[name] = {};\n\t\t\t}, {\n\t\t\t\tonFrame: {\n\t\t\t\t\tinstall: function() {\n\t\t\t\t\t\tthis.play();\n\t\t\t\t\t},\n\t\n\t\t\t\t\tuninstall: function() {\n\t\t\t\t\t\tthis.pause();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t),\n\t\n\t\t_animate: false,\n\t\t_time: 0,\n\t\t_count: 0,\n\t\n\t\tgetAutoUpdate: function() {\n\t\t\treturn this._autoUpdate;\n\t\t},\n\t\n\t\tsetAutoUpdate: function(autoUpdate) {\n\t\t\tthis._autoUpdate = autoUpdate;\n\t\t\tif (autoUpdate)\n\t\t\t\tthis.requestUpdate();\n\t\t},\n\t\n\t\tupdate: function() {\n\t\t},\n\t\n\t\tdraw: function() {\n\t\t\tthis.update();\n\t\t},\n\t\n\t\trequestUpdate: function() {\n\t\t\tif (!this._requested) {\n\t\t\t\tvar that = this;\n\t\t\t\tDomEvent.requestAnimationFrame(function() {\n\t\t\t\t\tthat._requested = false;\n\t\t\t\t\tif (that._animate) {\n\t\t\t\t\t\tthat.requestUpdate();\n\t\t\t\t\t\tvar element = that._element;\n\t\t\t\t\t\tif ((!DomElement.getPrefixed(document, 'hidden')\n\t\t\t\t\t\t\t\t|| PaperScope.getAttribute(element, 'keepalive')\n\t\t\t\t\t\t\t\t\t=== 'true') && DomElement.isInView(element)) {\n\t\t\t\t\t\t\tthat._handleFrame();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (that._autoUpdate)\n\t\t\t\t\t\tthat.update();\n\t\t\t\t});\n\t\t\t\tthis._requested = true;\n\t\t\t}\n\t\t},\n\t\n\t\tplay: function() {\n\t\t\tthis._animate = true;\n\t\t\tthis.requestUpdate();\n\t\t},\n\t\n\t\tpause: function() {\n\t\t\tthis._animate = false;\n\t\t},\n\t\n\t\t_handleFrame: function() {\n\t\t\tpaper = this._scope;\n\t\t\tvar now = Date.now() / 1000,\n\t\t\t\tdelta = this._last ? now - this._last : 0;\n\t\t\tthis._last = now;\n\t\t\tthis.emit('frame', new Base({\n\t\t\t\tdelta: delta,\n\t\t\t\ttime: this._time += delta,\n\t\t\t\tcount: this._count++\n\t\t\t}));\n\t\t\tif (this._stats)\n\t\t\t\tthis._stats.update();\n\t\t},\n\t\n\t\t_animateItem: function(item, animate) {\n\t\t\tvar items = this._frameItems;\n\t\t\tif (animate) {\n\t\t\t\titems[item._id] = {\n\t\t\t\t\titem: item,\n\t\t\t\t\ttime: 0,\n\t\t\t\t\tcount: 0\n\t\t\t\t};\n\t\t\t\tif (++this._frameItemCount === 1)\n\t\t\t\t\tthis.on('frame', this._handleFrameItems);\n\t\t\t} else {\n\t\t\t\tdelete items[item._id];\n\t\t\t\tif (--this._frameItemCount === 0) {\n\t\t\t\t\tthis.off('frame', this._handleFrameItems);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t_handleFrameItems: function(event) {\n\t\t\tfor (var i in this._frameItems) {\n\t\t\t\tvar entry = this._frameItems[i];\n\t\t\t\tentry.item.emit('frame', new Base(event, {\n\t\t\t\t\ttime: entry.time += event.delta,\n\t\t\t\t\tcount: entry.count++\n\t\t\t\t}));\n\t\t\t}\n\t\t},\n\t\n\t\t_changed: function() {\n\t\t\tthis._project._changed(2049);\n\t\t\tthis._bounds = this._decomposed = undefined;\n\t\t},\n\t\n\t\tgetElement: function() {\n\t\t\treturn this._element;\n\t\t},\n\t\n\t\tgetPixelRatio: function() {\n\t\t\treturn this._pixelRatio;\n\t\t},\n\t\n\t\tgetResolution: function() {\n\t\t\treturn this._pixelRatio * 72;\n\t\t},\n\t\n\t\tgetViewSize: function() {\n\t\t\tvar size = this._viewSize;\n\t\t\treturn new LinkedSize(size.width, size.height, this, 'setViewSize');\n\t\t},\n\t\n\t\tsetViewSize: function() {\n\t\t\tvar size = Size.read(arguments),\n\t\t\t\tdelta = size.subtract(this._viewSize);\n\t\t\tif (delta.isZero())\n\t\t\t\treturn;\n\t\t\tthis._setElementSize(size.width, size.height);\n\t\t\tthis._viewSize.set(size);\n\t\t\tthis._changed();\n\t\t\tthis.emit('resize', { size: size, delta: delta });\n\t\t\tif (this._autoUpdate) {\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t},\n\t\n\t\t_setElementSize: function(width, height) {\n\t\t\tvar element = this._element;\n\t\t\tif (element) {\n\t\t\t\tif (element.width !== width)\n\t\t\t\t\telement.width = width;\n\t\t\t\tif (element.height !== height)\n\t\t\t\t\telement.height = height;\n\t\t\t}\n\t\t},\n\t\n\t\tgetBounds: function() {\n\t\t\tif (!this._bounds)\n\t\t\t\tthis._bounds = this._matrix.inverted()._transformBounds(\n\t\t\t\t\t\tnew Rectangle(new Point(), this._viewSize));\n\t\t\treturn this._bounds;\n\t\t},\n\t\n\t\tgetSize: function() {\n\t\t\treturn this.getBounds().getSize();\n\t\t},\n\t\n\t\tisVisible: function() {\n\t\t\treturn DomElement.isInView(this._element);\n\t\t},\n\t\n\t\tisInserted: function() {\n\t\t\treturn DomElement.isInserted(this._element);\n\t\t},\n\t\n\t\tgetPixelSize: function(size) {\n\t\t\tvar element = this._element,\n\t\t\t\tpixels;\n\t\t\tif (element) {\n\t\t\t\tvar parent = element.parentNode,\n\t\t\t\t\ttemp = document.createElement('div');\n\t\t\t\ttemp.style.fontSize = size;\n\t\t\t\tparent.appendChild(temp);\n\t\t\t\tpixels = parseFloat(DomElement.getStyles(temp).fontSize);\n\t\t\t\tparent.removeChild(temp);\n\t\t\t} else {\n\t\t\t\tpixels = parseFloat(pixels);\n\t\t\t}\n\t\t\treturn pixels;\n\t\t},\n\t\n\t\tgetTextWidth: function(font, lines) {\n\t\t\treturn 0;\n\t\t}\n\t}, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {\n\t\tvar rotate = key === 'rotate';\n\t\tthis[key] = function() {\n\t\t\tvar value = (rotate ? Base : Point).read(arguments),\n\t\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\t\treturn this.transform(new Matrix()[key](value,\n\t\t\t\t\tcenter || this.getCenter(true)));\n\t\t};\n\t}, {\n\t\t_decompose: function() {\n\t\t\treturn this._decomposed || (this._decomposed = this._matrix.decompose());\n\t\t},\n\t\n\t\ttranslate: function() {\n\t\t\tvar mx = new Matrix();\n\t\t\treturn this.transform(mx.translate.apply(mx, arguments));\n\t\t},\n\t\n\t\tgetCenter: function() {\n\t\t\treturn this.getBounds().getCenter();\n\t\t},\n\t\n\t\tsetCenter: function() {\n\t\t\tvar center = Point.read(arguments);\n\t\t\tthis.translate(this.getCenter().subtract(center));\n\t\t},\n\t\n\t\tgetZoom: function() {\n\t\t\tvar decomposed = this._decompose(),\n\t\t\t\tscaling = decomposed && decomposed.scaling;\n\t\t\treturn scaling ? (scaling.x + scaling.y) / 2 : 0;\n\t\t},\n\t\n\t\tsetZoom: function(zoom) {\n\t\t\tthis.transform(new Matrix().scale(zoom / this.getZoom(),\n\t\t\t\tthis.getCenter()));\n\t\t},\n\t\n\t\tgetRotation: function() {\n\t\t\tvar decomposed = this._decompose();\n\t\t\treturn decomposed && decomposed.rotation;\n\t\t},\n\t\n\t\tsetRotation: function(rotation) {\n\t\t\tvar current = this.getRotation();\n\t\t\tif (current != null && rotation != null) {\n\t\t\t\tthis.rotate(rotation - current);\n\t\t\t}\n\t\t},\n\t\n\t\tgetScaling: function() {\n\t\t\tvar decomposed = this._decompose(),\n\t\t\t\tscaling = decomposed && decomposed.scaling;\n\t\t\treturn scaling\n\t\t\t\t\t? new LinkedPoint(scaling.x, scaling.y, this, 'setScaling')\n\t\t\t\t\t: undefined;\n\t\t},\n\t\n\t\tsetScaling: function() {\n\t\t\tvar current = this.getScaling(),\n\t\t\t\tscaling = Point.read(arguments, 0, { clone: true, readNull: true });\n\t\t\tif (current && scaling) {\n\t\t\t\tthis.scale(scaling.x / current.x, scaling.y / current.y);\n\t\t\t}\n\t\t},\n\t\n\t\tgetMatrix: function() {\n\t\t\treturn this._matrix;\n\t\t},\n\t\n\t\tsetMatrix: function() {\n\t\t\tvar matrix = this._matrix;\n\t\t\tmatrix.initialize.apply(matrix, arguments);\n\t\t},\n\t\n\t\ttransform: function(matrix) {\n\t\t\tthis._matrix.append(matrix);\n\t\t},\n\t\n\t\tscrollBy: function() {\n\t\t\tthis.translate(Point.read(arguments).negate());\n\t\t}\n\t}), {\n\t\n\t\tprojectToView: function() {\n\t\t\treturn this._matrix._transformPoint(Point.read(arguments));\n\t\t},\n\t\n\t\tviewToProject: function() {\n\t\t\treturn this._matrix._inverseTransform(Point.read(arguments));\n\t\t},\n\t\n\t\tgetEventPoint: function(event) {\n\t\t\treturn this.viewToProject(DomEvent.getOffset(event, this._element));\n\t\t},\n\t\n\t}, {\n\t\tstatics: {\n\t\t\t_views: [],\n\t\t\t_viewsById: {},\n\t\t\t_id: 0,\n\t\n\t\t\tcreate: function(project, element) {\n\t\t\t\tif (document && typeof element === 'string')\n\t\t\t\t\telement = document.getElementById(element);\n\t\t\t\tvar ctor = window ? CanvasView : View;\n\t\t\t\treturn new ctor(project, element);\n\t\t\t}\n\t\t}\n\t},\n\tnew function() {\n\t\tif (!window)\n\t\t\treturn;\n\t\tvar prevFocus,\n\t\t\ttempFocus,\n\t\t\tdragging = false,\n\t\t\tmouseDown = false;\n\t\n\t\tfunction getView(event) {\n\t\t\tvar target = DomEvent.getTarget(event);\n\t\t\treturn target.getAttribute && View._viewsById[\n\t\t\t\t\ttarget.getAttribute('id')];\n\t\t}\n\t\n\t\tfunction updateFocus() {\n\t\t\tvar view = View._focused;\n\t\t\tif (!view || !view.isVisible()) {\n\t\t\t\tfor (var i = 0, l = View._views.length; i < l; i++) {\n\t\t\t\t\tif ((view = View._views[i]).isVisible()) {\n\t\t\t\t\t\tView._focused = tempFocus = view;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction handleMouseMove(view, event, point) {\n\t\t\tview._handleMouseEvent('mousemove', event, point);\n\t\t}\n\t\n\t\tvar navigator = window.navigator,\n\t\t\tmousedown, mousemove, mouseup;\n\t\tif (navigator.pointerEnabled || navigator.msPointerEnabled) {\n\t\t\tmousedown = 'pointerdown MSPointerDown';\n\t\t\tmousemove = 'pointermove MSPointerMove';\n\t\t\tmouseup = 'pointerup pointercancel MSPointerUp MSPointerCancel';\n\t\t} else {\n\t\t\tmousedown = 'touchstart';\n\t\t\tmousemove = 'touchmove';\n\t\t\tmouseup = 'touchend touchcancel';\n\t\t\tif (!('ontouchstart' in window && navigator.userAgent.match(\n\t\t\t\t\t/mobile|tablet|ip(ad|hone|od)|android|silk/i))) {\n\t\t\t\tmousedown += ' mousedown';\n\t\t\t\tmousemove += ' mousemove';\n\t\t\t\tmouseup += ' mouseup';\n\t\t\t}\n\t\t}\n\t\n\t\tvar viewEvents = {},\n\t\t\tdocEvents = {\n\t\t\t\tmouseout: function(event) {\n\t\t\t\t\tvar view = View._focused,\n\t\t\t\t\t\ttarget = DomEvent.getRelatedTarget(event);\n\t\t\t\t\tif (view && (!target || target.nodeName === 'HTML')) {\n\t\t\t\t\t\tvar offset = DomEvent.getOffset(event, view._element),\n\t\t\t\t\t\t\tx = offset.x,\n\t\t\t\t\t\t\tabs = Math.abs,\n\t\t\t\t\t\t\tax = abs(x),\n\t\t\t\t\t\t\tmax = 1 << 25,\n\t\t\t\t\t\t\tdiff = ax - max;\n\t\t\t\t\t\toffset.x = abs(diff) < ax ? diff * (x < 0 ? -1 : 1) : x;\n\t\t\t\t\t\thandleMouseMove(view, event, view.viewToProject(offset));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\n\t\t\t\tscroll: updateFocus\n\t\t\t};\n\t\n\t\tviewEvents[mousedown] = function(event) {\n\t\t\tvar view = View._focused = getView(event);\n\t\t\tif (!dragging) {\n\t\t\t\tdragging = true;\n\t\t\t\tview._handleMouseEvent('mousedown', event);\n\t\t\t}\n\t\t};\n\t\n\t\tdocEvents[mousemove] = function(event) {\n\t\t\tvar view = View._focused;\n\t\t\tif (!mouseDown) {\n\t\t\t\tvar target = getView(event);\n\t\t\t\tif (target) {\n\t\t\t\t\tif (view !== target) {\n\t\t\t\t\t\tif (view)\n\t\t\t\t\t\t\thandleMouseMove(view, event);\n\t\t\t\t\t\tif (!prevFocus)\n\t\t\t\t\t\t\tprevFocus = view;\n\t\t\t\t\t\tview = View._focused = tempFocus = target;\n\t\t\t\t\t}\n\t\t\t\t} else if (tempFocus && tempFocus === view) {\n\t\t\t\t\tif (prevFocus && !prevFocus.isInserted())\n\t\t\t\t\t\tprevFocus = null;\n\t\t\t\t\tview = View._focused = prevFocus;\n\t\t\t\t\tprevFocus = null;\n\t\t\t\t\tupdateFocus();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (view)\n\t\t\t\thandleMouseMove(view, event);\n\t\t};\n\t\n\t\tdocEvents[mousedown] = function() {\n\t\t\tmouseDown = true;\n\t\t};\n\t\n\t\tdocEvents[mouseup] = function(event) {\n\t\t\tvar view = View._focused;\n\t\t\tif (view && dragging)\n\t\t\t\tview._handleMouseEvent('mouseup', event);\n\t\t\tmouseDown = dragging = false;\n\t\t};\n\t\n\t\tDomEvent.add(document, docEvents);\n\t\n\t\tDomEvent.add(window, {\n\t\t\tload: updateFocus\n\t\t});\n\t\n\t\tvar called = false,\n\t\t\tprevented = false,\n\t\t\tfallbacks = {\n\t\t\t\tdoubleclick: 'click',\n\t\t\t\tmousedrag: 'mousemove'\n\t\t\t},\n\t\t\twasInView = false,\n\t\t\toverView,\n\t\t\tdownPoint,\n\t\t\tlastPoint,\n\t\t\tdownItem,\n\t\t\toverItem,\n\t\t\tdragItem,\n\t\t\tclickItem,\n\t\t\tclickTime,\n\t\t\tdblClick;\n\t\n\t\tfunction emitMouseEvent(obj, target, type, event, point, prevPoint,\n\t\t\t\tstopItem) {\n\t\t\tvar stopped = false,\n\t\t\t\tmouseEvent;\n\t\n\t\t\tfunction emit(obj, type) {\n\t\t\t\tif (obj.responds(type)) {\n\t\t\t\t\tif (!mouseEvent) {\n\t\t\t\t\t\tmouseEvent = new MouseEvent(type, event, point,\n\t\t\t\t\t\t\t\ttarget || obj,\n\t\t\t\t\t\t\t\tprevPoint ? point.subtract(prevPoint) : null);\n\t\t\t\t\t}\n\t\t\t\t\tif (obj.emit(type, mouseEvent)) {\n\t\t\t\t\t\tcalled = true;\n\t\t\t\t\t\tif (mouseEvent.prevented)\n\t\t\t\t\t\t\tprevented = true;\n\t\t\t\t\t\tif (mouseEvent.stopped)\n\t\t\t\t\t\t\treturn stopped = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar fallback = fallbacks[type];\n\t\t\t\t\tif (fallback)\n\t\t\t\t\t\treturn emit(obj, fallback);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\twhile (obj && obj !== stopItem) {\n\t\t\t\tif (emit(obj, type))\n\t\t\t\t\tbreak;\n\t\t\t\tobj = obj._parent;\n\t\t\t}\n\t\t\treturn stopped;\n\t\t}\n\t\n\t\tfunction emitMouseEvents(view, hitItem, type, event, point, prevPoint) {\n\t\t\tview._project.removeOn(type);\n\t\t\tprevented = called = false;\n\t\t\treturn (dragItem && emitMouseEvent(dragItem, null, type, event,\n\t\t\t\t\t\tpoint, prevPoint)\n\t\t\t\t|| hitItem && hitItem !== dragItem\n\t\t\t\t\t&& !hitItem.isDescendant(dragItem)\n\t\t\t\t\t&& emitMouseEvent(hitItem, null, fallbacks[type] || type, event,\n\t\t\t\t\t\tpoint, prevPoint, dragItem)\n\t\t\t\t|| emitMouseEvent(view, dragItem || hitItem || view, type, event,\n\t\t\t\t\t\tpoint, prevPoint));\n\t\t}\n\t\n\t\tvar itemEventsMap = {\n\t\t\tmousedown: {\n\t\t\t\tmousedown: 1,\n\t\t\t\tmousedrag: 1,\n\t\t\t\tclick: 1,\n\t\t\t\tdoubleclick: 1\n\t\t\t},\n\t\t\tmouseup: {\n\t\t\t\tmouseup: 1,\n\t\t\t\tmousedrag: 1,\n\t\t\t\tclick: 1,\n\t\t\t\tdoubleclick: 1\n\t\t\t},\n\t\t\tmousemove: {\n\t\t\t\tmousedrag: 1,\n\t\t\t\tmousemove: 1,\n\t\t\t\tmouseenter: 1,\n\t\t\t\tmouseleave: 1\n\t\t\t}\n\t\t};\n\t\n\t\treturn {\n\t\t\t_viewEvents: viewEvents,\n\t\n\t\t\t_handleMouseEvent: function(type, event, point) {\n\t\t\t\tvar itemEvents = this._itemEvents,\n\t\t\t\t\thitItems = itemEvents.native[type],\n\t\t\t\t\tnativeMove = type === 'mousemove',\n\t\t\t\t\ttool = this._scope.tool,\n\t\t\t\t\tview = this;\n\t\n\t\t\t\tfunction responds(type) {\n\t\t\t\t\treturn itemEvents.virtual[type] || view.responds(type)\n\t\t\t\t\t\t\t|| tool && tool.responds(type);\n\t\t\t\t}\n\t\n\t\t\t\tif (nativeMove && dragging && responds('mousedrag'))\n\t\t\t\t\ttype = 'mousedrag';\n\t\t\t\tif (!point)\n\t\t\t\t\tpoint = this.getEventPoint(event);\n\t\n\t\t\t\tvar inView = this.getBounds().contains(point),\n\t\t\t\t\thit = hitItems && inView && view._project.hitTest(point, {\n\t\t\t\t\t\ttolerance: 0,\n\t\t\t\t\t\tfill: true,\n\t\t\t\t\t\tstroke: true\n\t\t\t\t\t}),\n\t\t\t\t\thitItem = hit && hit.item || null,\n\t\t\t\t\thandle = false,\n\t\t\t\t\tmouse = {};\n\t\t\t\tmouse[type.substr(5)] = true;\n\t\n\t\t\t\tif (hitItems && hitItem !== overItem) {\n\t\t\t\t\tif (overItem) {\n\t\t\t\t\t\temitMouseEvent(overItem, null, 'mouseleave', event, point);\n\t\t\t\t\t}\n\t\t\t\t\tif (hitItem) {\n\t\t\t\t\t\temitMouseEvent(hitItem, null, 'mouseenter', event, point);\n\t\t\t\t\t}\n\t\t\t\t\toverItem = hitItem;\n\t\t\t\t}\n\t\t\t\tif (wasInView ^ inView) {\n\t\t\t\t\temitMouseEvent(this, null, inView ? 'mouseenter' : 'mouseleave',\n\t\t\t\t\t\t\tevent, point);\n\t\t\t\t\toverView = inView ? this : null;\n\t\t\t\t\thandle = true;\n\t\t\t\t}\n\t\t\t\tif ((inView || mouse.drag) && !point.equals(lastPoint)) {\n\t\t\t\t\temitMouseEvents(this, hitItem, nativeMove ? type : 'mousemove',\n\t\t\t\t\t\t\tevent, point, lastPoint);\n\t\t\t\t\thandle = true;\n\t\t\t\t}\n\t\t\t\twasInView = inView;\n\t\t\t\tif (mouse.down && inView || mouse.up && downPoint) {\n\t\t\t\t\temitMouseEvents(this, hitItem, type, event, point, downPoint);\n\t\t\t\t\tif (mouse.down) {\n\t\t\t\t\t\tdblClick = hitItem === clickItem\n\t\t\t\t\t\t\t&& (Date.now() - clickTime < 300);\n\t\t\t\t\t\tdownItem = clickItem = hitItem;\n\t\t\t\t\t\tdragItem = !prevented && hitItem;\n\t\t\t\t\t\tdownPoint = point;\n\t\t\t\t\t} else if (mouse.up) {\n\t\t\t\t\t\tif (!prevented && hitItem === downItem) {\n\t\t\t\t\t\t\tclickTime = Date.now();\n\t\t\t\t\t\t\temitMouseEvents(this, hitItem, dblClick ? 'doubleclick'\n\t\t\t\t\t\t\t\t\t: 'click', event, point, downPoint);\n\t\t\t\t\t\t\tdblClick = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdownItem = dragItem = null;\n\t\t\t\t\t}\n\t\t\t\t\twasInView = false;\n\t\t\t\t\thandle = true;\n\t\t\t\t}\n\t\t\t\tlastPoint = point;\n\t\t\t\tif (handle && tool) {\n\t\t\t\t\tcalled = tool._handleMouseEvent(type, event, point, mouse)\n\t\t\t\t\t\t|| called;\n\t\t\t\t}\n\t\n\t\t\t\tif (called && !mouse.move || mouse.down && responds('mouseup'))\n\t\t\t\t\tevent.preventDefault();\n\t\t\t},\n\t\n\t\t\t_handleKeyEvent: function(type, event, key, character) {\n\t\t\t\tvar scope = this._scope,\n\t\t\t\t\ttool = scope.tool,\n\t\t\t\t\tkeyEvent;\n\t\n\t\t\t\tfunction emit(obj) {\n\t\t\t\t\tif (obj.responds(type)) {\n\t\t\t\t\t\tpaper = scope;\n\t\t\t\t\t\tobj.emit(type, keyEvent = keyEvent\n\t\t\t\t\t\t\t\t|| new KeyEvent(type, event, key, character));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif (this.isVisible()) {\n\t\t\t\t\temit(this);\n\t\t\t\t\tif (tool && tool.responds(type))\n\t\t\t\t\t\temit(tool);\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\t_countItemEvent: function(type, sign) {\n\t\t\t\tvar itemEvents = this._itemEvents,\n\t\t\t\t\tnative = itemEvents.native,\n\t\t\t\t\tvirtual = itemEvents.virtual;\n\t\t\t\tfor (var key in itemEventsMap) {\n\t\t\t\t\tnative[key] = (native[key] || 0)\n\t\t\t\t\t\t\t+ (itemEventsMap[key][type] || 0) * sign;\n\t\t\t\t}\n\t\t\t\tvirtual[type] = (virtual[type] || 0) + sign;\n\t\t\t},\n\t\n\t\t\tstatics: {\n\t\t\t\tupdateFocus: updateFocus\n\t\t\t}\n\t\t};\n\t});\n\t\n\tvar CanvasView = View.extend({\n\t\t_class: 'CanvasView',\n\t\n\t\tinitialize: function CanvasView(project, canvas) {\n\t\t\tif (!(canvas instanceof window.HTMLCanvasElement)) {\n\t\t\t\tvar size = Size.read(arguments, 1);\n\t\t\t\tif (size.isZero())\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Cannot create CanvasView with the provided argument: '\n\t\t\t\t\t\t\t+ Base.slice(arguments, 1));\n\t\t\t\tcanvas = CanvasProvider.getCanvas(size);\n\t\t\t}\n\t\t\tvar ctx = this._context = canvas.getContext('2d');\n\t\t\tctx.save();\n\t\t\tthis._pixelRatio = 1;\n\t\t\tif (!/^off|false$/.test(PaperScope.getAttribute(canvas, 'hidpi'))) {\n\t\t\t\tvar deviceRatio = window.devicePixelRatio || 1,\n\t\t\t\t\tbackingStoreRatio = DomElement.getPrefixed(ctx,\n\t\t\t\t\t\t\t'backingStorePixelRatio') || 1;\n\t\t\t\tthis._pixelRatio = deviceRatio / backingStoreRatio;\n\t\t\t}\n\t\t\tView.call(this, project, canvas);\n\t\t\tthis._needsUpdate = true;\n\t\t},\n\t\n\t\tremove: function remove() {\n\t\t\tthis._context.restore();\n\t\t\treturn remove.base.call(this);\n\t\t},\n\t\n\t\t_setElementSize: function _setElementSize(width, height) {\n\t\t\tvar pixelRatio = this._pixelRatio;\n\t\t\t_setElementSize.base.call(this, width * pixelRatio, height * pixelRatio);\n\t\t\tif (pixelRatio !== 1) {\n\t\t\t\tvar element = this._element,\n\t\t\t\t\tctx = this._context;\n\t\t\t\tif (!PaperScope.hasAttribute(element, 'resize')) {\n\t\t\t\t\tvar style = element.style;\n\t\t\t\t\tstyle.width = width + 'px';\n\t\t\t\t\tstyle.height = height + 'px';\n\t\t\t\t}\n\t\t\t\tctx.restore();\n\t\t\t\tctx.save();\n\t\t\t\tctx.scale(pixelRatio, pixelRatio);\n\t\t\t}\n\t\t},\n\t\n\t\tgetPixelSize: function getPixelSize(size) {\n\t\t\tvar agent = paper.agent,\n\t\t\t\tpixels;\n\t\t\tif (agent && agent.firefox) {\n\t\t\t\tpixels = getPixelSize.base.call(this, size);\n\t\t\t} else {\n\t\t\t\tvar ctx = this._context,\n\t\t\t\t\tprevFont = ctx.font;\n\t\t\t\tctx.font = size + ' serif';\n\t\t\t\tpixels = parseFloat(ctx.font);\n\t\t\t\tctx.font = prevFont;\n\t\t\t}\n\t\t\treturn pixels;\n\t\t},\n\t\n\t\tgetTextWidth: function(font, lines) {\n\t\t\tvar ctx = this._context,\n\t\t\t\tprevFont = ctx.font,\n\t\t\t\twidth = 0;\n\t\t\tctx.font = font;\n\t\t\tfor (var i = 0, l = lines.length; i < l; i++)\n\t\t\t\twidth = Math.max(width, ctx.measureText(lines[i]).width);\n\t\t\tctx.font = prevFont;\n\t\t\treturn width;\n\t\t},\n\t\n\t\tupdate: function() {\n\t\t\tif (!this._needsUpdate)\n\t\t\t\treturn false;\n\t\t\tvar project = this._project,\n\t\t\t\tctx = this._context,\n\t\t\t\tsize = this._viewSize;\n\t\t\tctx.clearRect(0, 0, size.width + 1, size.height + 1);\n\t\t\tif (project)\n\t\t\t\tproject.draw(ctx, this._matrix, this._pixelRatio);\n\t\t\tthis._needsUpdate = false;\n\t\t\treturn true;\n\t\t}\n\t});\n\t\n\tvar Event = Base.extend({\n\t\t_class: 'Event',\n\t\n\t\tinitialize: function Event(event) {\n\t\t\tthis.event = event;\n\t\t\tthis.type = event && event.type;\n\t\t},\n\t\n\t\tprevented: false,\n\t\tstopped: false,\n\t\n\t\tpreventDefault: function() {\n\t\t\tthis.prevented = true;\n\t\t\tthis.event.preventDefault();\n\t\t},\n\t\n\t\tstopPropagation: function() {\n\t\t\tthis.stopped = true;\n\t\t\tthis.event.stopPropagation();\n\t\t},\n\t\n\t\tstop: function() {\n\t\t\tthis.stopPropagation();\n\t\t\tthis.preventDefault();\n\t\t},\n\t\n\t\tgetTimeStamp: function() {\n\t\t\treturn this.event.timeStamp;\n\t\t},\n\t\n\t\tgetModifiers: function() {\n\t\t\treturn Key.modifiers;\n\t\t}\n\t});\n\t\n\tvar KeyEvent = Event.extend({\n\t\t_class: 'KeyEvent',\n\t\n\t\tinitialize: function KeyEvent(type, event, key, character) {\n\t\t\tthis.type = type;\n\t\t\tthis.event = event;\n\t\t\tthis.key = key;\n\t\t\tthis.character = character;\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\treturn \"{ type: '\" + this.type\n\t\t\t\t\t+ \"', key: '\" + this.key\n\t\t\t\t\t+ \"', character: '\" + this.character\n\t\t\t\t\t+ \"', modifiers: \" + this.getModifiers()\n\t\t\t\t\t+ \" }\";\n\t\t}\n\t});\n\t\n\tvar Key = new function() {\n\t\tvar keyLookup = {\n\t\t\t\t'\\t': 'tab',\n\t\t\t\t' ': 'space',\n\t\t\t\t'\\b': 'backspace',\n\t\t\t\t'\\x7f': 'delete',\n\t\t\t\t'Spacebar': 'space',\n\t\t\t\t'Del': 'delete',\n\t\t\t\t'Win': 'meta',\n\t\t\t\t'Esc': 'escape'\n\t\t\t},\n\t\n\t\t\tcharLookup = {\n\t\t\t\t'tab': '\\t',\n\t\t\t\t'space': ' ',\n\t\t\t\t'enter': '\\r'\n\t\t\t},\n\t\n\t\t\tkeyMap = {},\n\t\t\tcharMap = {},\n\t\t\tmetaFixMap,\n\t\t\tdownKey,\n\t\n\t\t\tmodifiers = new Base({\n\t\t\t\tshift: false,\n\t\t\t\tcontrol: false,\n\t\t\t\talt: false,\n\t\t\t\tmeta: false,\n\t\t\t\tcapsLock: false,\n\t\t\t\tspace: false\n\t\t\t}).inject({\n\t\t\t\toption: {\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\treturn this.alt;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\n\t\t\t\tcommand: {\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tvar agent = paper && paper.agent;\n\t\t\t\t\t\treturn agent && agent.mac ? this.meta : this.control;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\n\t\tfunction getKey(event) {\n\t\t\tvar key = event.key || event.keyIdentifier;\n\t\t\tkey = /^U\\+/.test(key)\n\t\t\t\t\t? String.fromCharCode(parseInt(key.substr(2), 16))\n\t\t\t\t\t: /^Arrow[A-Z]/.test(key) ? key.substr(5)\n\t\t\t\t\t: key === 'Unidentified' ? String.fromCharCode(event.keyCode)\n\t\t\t\t\t: key;\n\t\t\treturn keyLookup[key] ||\n\t\t\t\t\t(key.length > 1 ? Base.hyphenate(key) : key.toLowerCase());\n\t\t}\n\t\n\t\tfunction handleKey(down, key, character, event) {\n\t\t\tvar type = down ? 'keydown' : 'keyup',\n\t\t\t\tview = View._focused,\n\t\t\t\tname;\n\t\t\tkeyMap[key] = down;\n\t\t\tif (down) {\n\t\t\t\tcharMap[key] = character;\n\t\t\t} else {\n\t\t\t\tdelete charMap[key];\n\t\t\t}\n\t\t\tif (key.length > 1 && (name = Base.camelize(key)) in modifiers) {\n\t\t\t\tmodifiers[name] = down;\n\t\t\t\tvar agent = paper && paper.agent;\n\t\t\t\tif (name === 'meta' && agent && agent.mac) {\n\t\t\t\t\tif (down) {\n\t\t\t\t\t\tmetaFixMap = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var k in metaFixMap) {\n\t\t\t\t\t\t\tif (k in charMap)\n\t\t\t\t\t\t\t\thandleKey(false, k, metaFixMap[k], event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmetaFixMap = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (down && metaFixMap) {\n\t\t\t\tmetaFixMap[key] = character;\n\t\t\t}\n\t\t\tif (view) {\n\t\t\t\tview._handleKeyEvent(down ? 'keydown' : 'keyup', event, key,\n\t\t\t\t\t\tcharacter);\n\t\t\t}\n\t\t}\n\t\n\t\tDomEvent.add(document, {\n\t\t\tkeydown: function(event) {\n\t\t\t\tvar key = getKey(event),\n\t\t\t\t\tagent = paper && paper.agent;\n\t\t\t\tif (key.length > 1 || agent && (agent.chrome && (event.altKey\n\t\t\t\t\t\t\t|| agent.mac && event.metaKey\n\t\t\t\t\t\t\t|| !agent.mac && event.ctrlKey))) {\n\t\t\t\t\thandleKey(true, key,\n\t\t\t\t\t\t\tcharLookup[key] || (key.length > 1 ? '' : key), event);\n\t\t\t\t} else {\n\t\t\t\t\tdownKey = key;\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tkeypress: function(event) {\n\t\t\t\tif (downKey) {\n\t\t\t\t\tvar key = getKey(event),\n\t\t\t\t\t\tcode = event.charCode,\n\t\t\t\t\t\tcharacter = code >= 32 ? String.fromCharCode(code)\n\t\t\t\t\t\t\t: key.length > 1 ? '' : key;\n\t\t\t\t\tif (key !== downKey) {\n\t\t\t\t\t\tkey = character.toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\thandleKey(true, key, character, event);\n\t\t\t\t\tdownKey = null;\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tkeyup: function(event) {\n\t\t\t\tvar key = getKey(event);\n\t\t\t\tif (key in charMap)\n\t\t\t\t\thandleKey(false, key, charMap[key], event);\n\t\t\t}\n\t\t});\n\t\n\t\tDomEvent.add(window, {\n\t\t\tblur: function(event) {\n\t\t\t\tfor (var key in charMap)\n\t\t\t\t\thandleKey(false, key, charMap[key], event);\n\t\t\t}\n\t\t});\n\t\n\t\treturn {\n\t\t\tmodifiers: modifiers,\n\t\n\t\t\tisDown: function(key) {\n\t\t\t\treturn !!keyMap[key];\n\t\t\t}\n\t\t};\n\t};\n\t\n\tvar MouseEvent = Event.extend({\n\t\t_class: 'MouseEvent',\n\t\n\t\tinitialize: function MouseEvent(type, event, point, target, delta) {\n\t\t\tthis.type = type;\n\t\t\tthis.event = event;\n\t\t\tthis.point = point;\n\t\t\tthis.target = target;\n\t\t\tthis.delta = delta;\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\treturn \"{ type: '\" + this.type\n\t\t\t\t\t+ \"', point: \" + this.point\n\t\t\t\t\t+ ', target: ' + this.target\n\t\t\t\t\t+ (this.delta ? ', delta: ' + this.delta : '')\n\t\t\t\t\t+ ', modifiers: ' + this.getModifiers()\n\t\t\t\t\t+ ' }';\n\t\t}\n\t});\n\t\n\tvar ToolEvent = Event.extend({\n\t\t_class: 'ToolEvent',\n\t\t_item: null,\n\t\n\t\tinitialize: function ToolEvent(tool, type, event) {\n\t\t\tthis.tool = tool;\n\t\t\tthis.type = type;\n\t\t\tthis.event = event;\n\t\t},\n\t\n\t\t_choosePoint: function(point, toolPoint) {\n\t\t\treturn point ? point : toolPoint ? toolPoint.clone() : null;\n\t\t},\n\t\n\t\tgetPoint: function() {\n\t\t\treturn this._choosePoint(this._point, this.tool._point);\n\t\t},\n\t\n\t\tsetPoint: function(point) {\n\t\t\tthis._point = point;\n\t\t},\n\t\n\t\tgetLastPoint: function() {\n\t\t\treturn this._choosePoint(this._lastPoint, this.tool._lastPoint);\n\t\t},\n\t\n\t\tsetLastPoint: function(lastPoint) {\n\t\t\tthis._lastPoint = lastPoint;\n\t\t},\n\t\n\t\tgetDownPoint: function() {\n\t\t\treturn this._choosePoint(this._downPoint, this.tool._downPoint);\n\t\t},\n\t\n\t\tsetDownPoint: function(downPoint) {\n\t\t\tthis._downPoint = downPoint;\n\t\t},\n\t\n\t\tgetMiddlePoint: function() {\n\t\t\tif (!this._middlePoint && this.tool._lastPoint) {\n\t\t\t\treturn this.tool._point.add(this.tool._lastPoint).divide(2);\n\t\t\t}\n\t\t\treturn this._middlePoint;\n\t\t},\n\t\n\t\tsetMiddlePoint: function(middlePoint) {\n\t\t\tthis._middlePoint = middlePoint;\n\t\t},\n\t\n\t\tgetDelta: function() {\n\t\t\treturn !this._delta && this.tool._lastPoint\n\t\t\t\t\t? this.tool._point.subtract(this.tool._lastPoint)\n\t\t\t\t\t: this._delta;\n\t\t},\n\t\n\t\tsetDelta: function(delta) {\n\t\t\tthis._delta = delta;\n\t\t},\n\t\n\t\tgetCount: function() {\n\t\t\treturn this.tool[/^mouse(down|up)$/.test(this.type)\n\t\t\t\t\t? '_downCount' : '_moveCount'];\n\t\t},\n\t\n\t\tsetCount: function(count) {\n\t\t\tthis.tool[/^mouse(down|up)$/.test(this.type) ? 'downCount' : 'count']\n\t\t\t\t= count;\n\t\t},\n\t\n\t\tgetItem: function() {\n\t\t\tif (!this._item) {\n\t\t\t\tvar result = this.tool._scope.project.hitTest(this.getPoint());\n\t\t\t\tif (result) {\n\t\t\t\t\tvar item = result.item,\n\t\t\t\t\t\tparent = item._parent;\n\t\t\t\t\twhile (/^(Group|CompoundPath)$/.test(parent._class)) {\n\t\t\t\t\t\titem = parent;\n\t\t\t\t\t\tparent = parent._parent;\n\t\t\t\t\t}\n\t\t\t\t\tthis._item = item;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._item;\n\t\t},\n\t\n\t\tsetItem: function(item) {\n\t\t\tthis._item = item;\n\t\t},\n\t\n\t\ttoString: function() {\n\t\t\treturn '{ type: ' + this.type\n\t\t\t\t\t+ ', point: ' + this.getPoint()\n\t\t\t\t\t+ ', count: ' + this.getCount()\n\t\t\t\t\t+ ', modifiers: ' + this.getModifiers()\n\t\t\t\t\t+ ' }';\n\t\t}\n\t});\n\t\n\tvar Tool = PaperScopeItem.extend({\n\t\t_class: 'Tool',\n\t\t_list: 'tools',\n\t\t_reference: 'tool',\n\t\t_events: ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onMouseMove',\n\t\t\t\t'onActivate', 'onDeactivate', 'onEditOptions', 'onKeyDown',\n\t\t\t\t'onKeyUp'],\n\t\n\t\tinitialize: function Tool(props) {\n\t\t\tPaperScopeItem.call(this);\n\t\t\tthis._moveCount = -1;\n\t\t\tthis._downCount = -1;\n\t\t\tthis.set(props);\n\t\t},\n\t\n\t\tgetMinDistance: function() {\n\t\t\treturn this._minDistance;\n\t\t},\n\t\n\t\tsetMinDistance: function(minDistance) {\n\t\t\tthis._minDistance = minDistance;\n\t\t\tif (minDistance != null && this._maxDistance != null\n\t\t\t\t\t&& minDistance > this._maxDistance) {\n\t\t\t\tthis._maxDistance = minDistance;\n\t\t\t}\n\t\t},\n\t\n\t\tgetMaxDistance: function() {\n\t\t\treturn this._maxDistance;\n\t\t},\n\t\n\t\tsetMaxDistance: function(maxDistance) {\n\t\t\tthis._maxDistance = maxDistance;\n\t\t\tif (this._minDistance != null && maxDistance != null\n\t\t\t\t\t&& maxDistance < this._minDistance) {\n\t\t\t\tthis._minDistance = maxDistance;\n\t\t\t}\n\t\t},\n\t\n\t\tgetFixedDistance: function() {\n\t\t\treturn this._minDistance == this._maxDistance\n\t\t\t\t? this._minDistance : null;\n\t\t},\n\t\n\t\tsetFixedDistance: function(distance) {\n\t\t\tthis._minDistance = this._maxDistance = distance;\n\t\t},\n\t\n\t\t_handleMouseEvent: function(type, event, point, mouse) {\n\t\t\tpaper = this._scope;\n\t\t\tif (mouse.drag && !this.responds(type))\n\t\t\t\ttype = 'mousemove';\n\t\t\tvar move = mouse.move || mouse.drag,\n\t\t\t\tresponds = this.responds(type),\n\t\t\t\tminDistance = this.minDistance,\n\t\t\t\tmaxDistance = this.maxDistance,\n\t\t\t\tcalled = false,\n\t\t\t\ttool = this;\n\t\t\tfunction update(minDistance, maxDistance) {\n\t\t\t\tvar pt = point,\n\t\t\t\t\ttoolPoint = move ? tool._point : (tool._downPoint || pt);\n\t\t\t\tif (move) {\n\t\t\t\t\tif (tool._moveCount && pt.equals(toolPoint)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (toolPoint && (minDistance != null || maxDistance != null)) {\n\t\t\t\t\t\tvar vector = pt.subtract(toolPoint),\n\t\t\t\t\t\t\tdistance = vector.getLength();\n\t\t\t\t\t\tif (distance < (minDistance || 0))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tif (maxDistance) {\n\t\t\t\t\t\t\tpt = toolPoint.add(vector.normalize(\n\t\t\t\t\t\t\t\t\tMath.min(distance, maxDistance)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttool._moveCount++;\n\t\t\t\t}\n\t\t\t\ttool._point = pt;\n\t\t\t\ttool._lastPoint = toolPoint || pt;\n\t\t\t\tif (mouse.down) {\n\t\t\t\t\ttool._moveCount = -1;\n\t\t\t\t\ttool._downPoint = pt;\n\t\t\t\t\ttool._downCount++;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\tfunction emit() {\n\t\t\t\tif (responds) {\n\t\t\t\t\tcalled = tool.emit(type, new ToolEvent(tool, type, event))\n\t\t\t\t\t\t\t|| called;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (mouse.down) {\n\t\t\t\tupdate();\n\t\t\t\temit();\n\t\t\t} else if (mouse.up) {\n\t\t\t\tupdate(null, maxDistance);\n\t\t\t\temit();\n\t\t\t} else if (responds) {\n\t\t\t\twhile (update(minDistance, maxDistance))\n\t\t\t\t\temit();\n\t\t\t}\n\t\t\treturn called;\n\t\t}\n\t\n\t});\n\t\n\tvar Http = {\n\t\trequest: function(options) {\n\t\t\tvar xhr = new self.XMLHttpRequest();\n\t\t\txhr.open((options.method || 'get').toUpperCase(), options.url,\n\t\t\t\t\tBase.pick(options.async, true));\n\t\t\tif (options.mimeType)\n\t\t\t\txhr.overrideMimeType(options.mimeType);\n\t\t\txhr.onload = function() {\n\t\t\t\tvar status = xhr.status;\n\t\t\t\tif (status === 0 || status === 200) {\n\t\t\t\t\tif (options.onLoad) {\n\t\t\t\t\t\toptions.onLoad.call(xhr, xhr.responseText);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\txhr.onerror();\n\t\t\t\t}\n\t\t\t};\n\t\t\txhr.onerror = function() {\n\t\t\t\tvar status = xhr.status,\n\t\t\t\t\tmessage = 'Could not load \"' + options.url + '\" (Status: '\n\t\t\t\t\t\t\t+ status + ')';\n\t\t\t\tif (options.onError) {\n\t\t\t\t\toptions.onError(message, status);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(message);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn xhr.send(null);\n\t\t}\n\t};\n\t\n\tvar CanvasProvider = {\n\t\tcanvases: [],\n\t\n\t\tgetCanvas: function(width, height) {\n\t\t\tif (!window)\n\t\t\t\treturn null;\n\t\t\tvar canvas,\n\t\t\t\tclear = true;\n\t\t\tif (typeof width === 'object') {\n\t\t\t\theight = width.height;\n\t\t\t\twidth = width.width;\n\t\t\t}\n\t\t\tif (this.canvases.length) {\n\t\t\t\tcanvas = this.canvases.pop();\n\t\t\t} else {\n\t\t\t\tcanvas = document.createElement('canvas');\n\t\t\t\tclear = false;\n\t\t\t}\n\t\t\tvar ctx = canvas.getContext('2d');\n\t\t\tif (!ctx) {\n\t\t\t\tthrow new Error('Canvas ' + canvas +\n\t\t\t\t\t\t' is unable toprovide a 2D context.');\n\t\t\t}\n\t\t\tif (canvas.width === width && canvas.height === height) {\n\t\t\t\tif (clear)\n\t\t\t\t\tctx.clearRect(0, 0, width + 1, height + 1);\n\t\t\t} else {\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\t\t\t}\n\t\t\tctx.save();\n\t\t\treturn canvas;\n\t\t},\n\t\n\t\tgetContext: function(width, height) {\n\t\t\tvar canvas = this.getCanvas(width, height);\n\t\t\treturn canvas ? canvas.getContext('2d') : null;\n\t\t},\n\t\n\t\trelease: function(obj) {\n\t\t\tvar canvas = obj && obj.canvas ? obj.canvas : obj;\n\t\t\tif (canvas && canvas.getContext) {\n\t\t\t\tcanvas.getContext('2d').restore();\n\t\t\t\tthis.canvases.push(canvas);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar BlendMode = new function() {\n\t\tvar min = Math.min,\n\t\t\tmax = Math.max,\n\t\t\tabs = Math.abs,\n\t\t\tsr, sg, sb, sa,\n\t\t\tbr, bg, bb, ba,\n\t\t\tdr, dg, db;\n\t\n\t\tfunction getLum(r, g, b) {\n\t\t\treturn 0.2989 * r + 0.587 * g + 0.114 * b;\n\t\t}\n\t\n\t\tfunction setLum(r, g, b, l) {\n\t\t\tvar d = l - getLum(r, g, b);\n\t\t\tdr = r + d;\n\t\t\tdg = g + d;\n\t\t\tdb = b + d;\n\t\t\tvar l = getLum(dr, dg, db),\n\t\t\t\tmn = min(dr, dg, db),\n\t\t\t\tmx = max(dr, dg, db);\n\t\t\tif (mn < 0) {\n\t\t\t\tvar lmn = l - mn;\n\t\t\t\tdr = l + (dr - l) * l / lmn;\n\t\t\t\tdg = l + (dg - l) * l / lmn;\n\t\t\t\tdb = l + (db - l) * l / lmn;\n\t\t\t}\n\t\t\tif (mx > 255) {\n\t\t\t\tvar ln = 255 - l,\n\t\t\t\t\tmxl = mx - l;\n\t\t\t\tdr = l + (dr - l) * ln / mxl;\n\t\t\t\tdg = l + (dg - l) * ln / mxl;\n\t\t\t\tdb = l + (db - l) * ln / mxl;\n\t\t\t}\n\t\t}\n\t\n\t\tfunction getSat(r, g, b) {\n\t\t\treturn max(r, g, b) - min(r, g, b);\n\t\t}\n\t\n\t\tfunction setSat(r, g, b, s) {\n\t\t\tvar col = [r, g, b],\n\t\t\t\tmx = max(r, g, b),\n\t\t\t\tmn = min(r, g, b),\n\t\t\t\tmd;\n\t\t\tmn = mn === r ? 0 : mn === g ? 1 : 2;\n\t\t\tmx = mx === r ? 0 : mx === g ? 1 : 2;\n\t\t\tmd = min(mn, mx) === 0 ? max(mn, mx) === 1 ? 2 : 1 : 0;\n\t\t\tif (col[mx] > col[mn]) {\n\t\t\t\tcol[md] = (col[md] - col[mn]) * s / (col[mx] - col[mn]);\n\t\t\t\tcol[mx] = s;\n\t\t\t} else {\n\t\t\t\tcol[md] = col[mx] = 0;\n\t\t\t}\n\t\t\tcol[mn] = 0;\n\t\t\tdr = col[0];\n\t\t\tdg = col[1];\n\t\t\tdb = col[2];\n\t\t}\n\t\n\t\tvar modes = {\n\t\t\tmultiply: function() {\n\t\t\t\tdr = br * sr / 255;\n\t\t\t\tdg = bg * sg / 255;\n\t\t\t\tdb = bb * sb / 255;\n\t\t\t},\n\t\n\t\t\tscreen: function() {\n\t\t\t\tdr = br + sr - (br * sr / 255);\n\t\t\t\tdg = bg + sg - (bg * sg / 255);\n\t\t\t\tdb = bb + sb - (bb * sb / 255);\n\t\t\t},\n\t\n\t\t\toverlay: function() {\n\t\t\t\tdr = br < 128 ? 2 * br * sr / 255 : 255 - 2 * (255 - br) * (255 - sr) / 255;\n\t\t\t\tdg = bg < 128 ? 2 * bg * sg / 255 : 255 - 2 * (255 - bg) * (255 - sg) / 255;\n\t\t\t\tdb = bb < 128 ? 2 * bb * sb / 255 : 255 - 2 * (255 - bb) * (255 - sb) / 255;\n\t\t\t},\n\t\n\t\t\t'soft-light': function() {\n\t\t\t\tvar t = sr * br / 255;\n\t\t\t\tdr = t + br * (255 - (255 - br) * (255 - sr) / 255 - t) / 255;\n\t\t\t\tt = sg * bg / 255;\n\t\t\t\tdg = t + bg * (255 - (255 - bg) * (255 - sg) / 255 - t) / 255;\n\t\t\t\tt = sb * bb / 255;\n\t\t\t\tdb = t + bb * (255 - (255 - bb) * (255 - sb) / 255 - t) / 255;\n\t\t\t},\n\t\n\t\t\t'hard-light': function() {\n\t\t\t\tdr = sr < 128 ? 2 * sr * br / 255 : 255 - 2 * (255 - sr) * (255 - br) / 255;\n\t\t\t\tdg = sg < 128 ? 2 * sg * bg / 255 : 255 - 2 * (255 - sg) * (255 - bg) / 255;\n\t\t\t\tdb = sb < 128 ? 2 * sb * bb / 255 : 255 - 2 * (255 - sb) * (255 - bb) / 255;\n\t\t\t},\n\t\n\t\t\t'color-dodge': function() {\n\t\t\t\tdr = br === 0 ? 0 : sr === 255 ? 255 : min(255, 255 * br / (255 - sr));\n\t\t\t\tdg = bg === 0 ? 0 : sg === 255 ? 255 : min(255, 255 * bg / (255 - sg));\n\t\t\t\tdb = bb === 0 ? 0 : sb === 255 ? 255 : min(255, 255 * bb / (255 - sb));\n\t\t\t},\n\t\n\t\t\t'color-burn': function() {\n\t\t\t\tdr = br === 255 ? 255 : sr === 0 ? 0 : max(0, 255 - (255 - br) * 255 / sr);\n\t\t\t\tdg = bg === 255 ? 255 : sg === 0 ? 0 : max(0, 255 - (255 - bg) * 255 / sg);\n\t\t\t\tdb = bb === 255 ? 255 : sb === 0 ? 0 : max(0, 255 - (255 - bb) * 255 / sb);\n\t\t\t},\n\t\n\t\t\tdarken: function() {\n\t\t\t\tdr = br < sr ? br : sr;\n\t\t\t\tdg = bg < sg ? bg : sg;\n\t\t\t\tdb = bb < sb ? bb : sb;\n\t\t\t},\n\t\n\t\t\tlighten: function() {\n\t\t\t\tdr = br > sr ? br : sr;\n\t\t\t\tdg = bg > sg ? bg : sg;\n\t\t\t\tdb = bb > sb ? bb : sb;\n\t\t\t},\n\t\n\t\t\tdifference: function() {\n\t\t\t\tdr = br - sr;\n\t\t\t\tif (dr < 0)\n\t\t\t\t\tdr = -dr;\n\t\t\t\tdg = bg - sg;\n\t\t\t\tif (dg < 0)\n\t\t\t\t\tdg = -dg;\n\t\t\t\tdb = bb - sb;\n\t\t\t\tif (db < 0)\n\t\t\t\t\tdb = -db;\n\t\t\t},\n\t\n\t\t\texclusion: function() {\n\t\t\t\tdr = br + sr * (255 - br - br) / 255;\n\t\t\t\tdg = bg + sg * (255 - bg - bg) / 255;\n\t\t\t\tdb = bb + sb * (255 - bb - bb) / 255;\n\t\t\t},\n\t\n\t\t\thue: function() {\n\t\t\t\tsetSat(sr, sg, sb, getSat(br, bg, bb));\n\t\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));\n\t\t\t},\n\t\n\t\t\tsaturation: function() {\n\t\t\t\tsetSat(br, bg, bb, getSat(sr, sg, sb));\n\t\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));\n\t\t\t},\n\t\n\t\t\tluminosity: function() {\n\t\t\t\tsetLum(br, bg, bb, getLum(sr, sg, sb));\n\t\t\t},\n\t\n\t\t\tcolor: function() {\n\t\t\t\tsetLum(sr, sg, sb, getLum(br, bg, bb));\n\t\t\t},\n\t\n\t\t\tadd: function() {\n\t\t\t\tdr = min(br + sr, 255);\n\t\t\t\tdg = min(bg + sg, 255);\n\t\t\t\tdb = min(bb + sb, 255);\n\t\t\t},\n\t\n\t\t\tsubtract: function() {\n\t\t\t\tdr = max(br - sr, 0);\n\t\t\t\tdg = max(bg - sg, 0);\n\t\t\t\tdb = max(bb - sb, 0);\n\t\t\t},\n\t\n\t\t\taverage: function() {\n\t\t\t\tdr = (br + sr) / 2;\n\t\t\t\tdg = (bg + sg) / 2;\n\t\t\t\tdb = (bb + sb) / 2;\n\t\t\t},\n\t\n\t\t\tnegation: function() {\n\t\t\t\tdr = 255 - abs(255 - sr - br);\n\t\t\t\tdg = 255 - abs(255 - sg - bg);\n\t\t\t\tdb = 255 - abs(255 - sb - bb);\n\t\t\t}\n\t\t};\n\t\n\t\tvar nativeModes = this.nativeModes = Base.each([\n\t\t\t'source-over', 'source-in', 'source-out', 'source-atop',\n\t\t\t'destination-over', 'destination-in', 'destination-out',\n\t\t\t'destination-atop', 'lighter', 'darker', 'copy', 'xor'\n\t\t], function(mode) {\n\t\t\tthis[mode] = true;\n\t\t}, {});\n\t\n\t\tvar ctx = CanvasProvider.getContext(1, 1);\n\t\tif (ctx) {\n\t\t\tBase.each(modes, function(func, mode) {\n\t\t\t\tvar darken = mode === 'darken',\n\t\t\t\t\tok = false;\n\t\t\t\tctx.save();\n\t\t\t\ttry {\n\t\t\t\t\tctx.fillStyle = darken ? '#300' : '#a00';\n\t\t\t\t\tctx.fillRect(0, 0, 1, 1);\n\t\t\t\t\tctx.globalCompositeOperation = mode;\n\t\t\t\t\tif (ctx.globalCompositeOperation === mode) {\n\t\t\t\t\t\tctx.fillStyle = darken ? '#a00' : '#300';\n\t\t\t\t\t\tctx.fillRect(0, 0, 1, 1);\n\t\t\t\t\t\tok = ctx.getImageData(0, 0, 1, 1).data[0] !== darken\n\t\t\t\t\t\t\t\t? 170 : 51;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t\tctx.restore();\n\t\t\t\tnativeModes[mode] = ok;\n\t\t\t});\n\t\t\tCanvasProvider.release(ctx);\n\t\t}\n\t\n\t\tthis.process = function(mode, srcContext, dstContext, alpha, offset) {\n\t\t\tvar srcCanvas = srcContext.canvas,\n\t\t\t\tnormal = mode === 'normal';\n\t\t\tif (normal || nativeModes[mode]) {\n\t\t\t\tdstContext.save();\n\t\t\t\tdstContext.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\t\tdstContext.globalAlpha = alpha;\n\t\t\t\tif (!normal)\n\t\t\t\t\tdstContext.globalCompositeOperation = mode;\n\t\t\t\tdstContext.drawImage(srcCanvas, offset.x, offset.y);\n\t\t\t\tdstContext.restore();\n\t\t\t} else {\n\t\t\t\tvar process = modes[mode];\n\t\t\t\tif (!process)\n\t\t\t\t\treturn;\n\t\t\t\tvar dstData = dstContext.getImageData(offset.x, offset.y,\n\t\t\t\t\t\tsrcCanvas.width, srcCanvas.height),\n\t\t\t\t\tdst = dstData.data,\n\t\t\t\t\tsrc = srcContext.getImageData(0, 0,\n\t\t\t\t\t\tsrcCanvas.width, srcCanvas.height).data;\n\t\t\t\tfor (var i = 0, l = dst.length; i < l; i += 4) {\n\t\t\t\t\tsr = src[i];\n\t\t\t\t\tbr = dst[i];\n\t\t\t\t\tsg = src[i + 1];\n\t\t\t\t\tbg = dst[i + 1];\n\t\t\t\t\tsb = src[i + 2];\n\t\t\t\t\tbb = dst[i + 2];\n\t\t\t\t\tsa = src[i + 3];\n\t\t\t\t\tba = dst[i + 3];\n\t\t\t\t\tprocess();\n\t\t\t\t\tvar a1 = sa * alpha / 255,\n\t\t\t\t\t\ta2 = 1 - a1;\n\t\t\t\t\tdst[i] = a1 * dr + a2 * br;\n\t\t\t\t\tdst[i + 1] = a1 * dg + a2 * bg;\n\t\t\t\t\tdst[i + 2] = a1 * db + a2 * bb;\n\t\t\t\t\tdst[i + 3] = sa * alpha + a2 * ba;\n\t\t\t\t}\n\t\t\t\tdstContext.putImageData(dstData, offset.x, offset.y);\n\t\t\t}\n\t\t};\n\t};\n\t\n\tvar SvgElement = new function() {\n\t\tvar svg = 'http://www.w3.org/2000/svg',\n\t\t\txmlns = 'http://www.w3.org/2000/xmlns',\n\t\t\txlink = 'http://www.w3.org/1999/xlink',\n\t\t\tattributeNamespace = {\n\t\t\t\thref: xlink,\n\t\t\t\txlink: xmlns,\n\t\t\t\txmlns: xmlns + '/',\n\t\t\t\t'xmlns:xlink': xmlns + '/'\n\t\t\t};\n\t\n\t\tfunction create(tag, attributes, formatter) {\n\t\t\treturn set(document.createElementNS(svg, tag), attributes, formatter);\n\t\t}\n\t\n\t\tfunction get(node, name) {\n\t\t\tvar namespace = attributeNamespace[name],\n\t\t\t\tvalue = namespace\n\t\t\t\t\t? node.getAttributeNS(namespace, name)\n\t\t\t\t\t: node.getAttribute(name);\n\t\t\treturn value === 'null' ? null : value;\n\t\t}\n\t\n\t\tfunction set(node, attributes, formatter) {\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar value = attributes[name],\n\t\t\t\t\tnamespace = attributeNamespace[name];\n\t\t\t\tif (typeof value === 'number' && formatter)\n\t\t\t\t\tvalue = formatter.number(value);\n\t\t\t\tif (namespace) {\n\t\t\t\t\tnode.setAttributeNS(namespace, name, value);\n\t\t\t\t} else {\n\t\t\t\t\tnode.setAttribute(name, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn node;\n\t\t}\n\t\n\t\treturn {\n\t\t\tsvg: svg,\n\t\t\txmlns: xmlns,\n\t\t\txlink: xlink,\n\t\n\t\t\tcreate: create,\n\t\t\tget: get,\n\t\t\tset: set\n\t\t};\n\t};\n\t\n\tvar SvgStyles = Base.each({\n\t\tfillColor: ['fill', 'color'],\n\t\tfillRule: ['fill-rule', 'string'],\n\t\tstrokeColor: ['stroke', 'color'],\n\t\tstrokeWidth: ['stroke-width', 'number'],\n\t\tstrokeCap: ['stroke-linecap', 'string'],\n\t\tstrokeJoin: ['stroke-linejoin', 'string'],\n\t\tstrokeScaling: ['vector-effect', 'lookup', {\n\t\t\ttrue: 'none',\n\t\t\tfalse: 'non-scaling-stroke'\n\t\t}, function(item, value) {\n\t\t\treturn !value\n\t\t\t\t\t&& (item instanceof PathItem\n\t\t\t\t\t\t|| item instanceof Shape\n\t\t\t\t\t\t|| item instanceof TextItem);\n\t\t}],\n\t\tmiterLimit: ['stroke-miterlimit', 'number'],\n\t\tdashArray: ['stroke-dasharray', 'array'],\n\t\tdashOffset: ['stroke-dashoffset', 'number'],\n\t\tfontFamily: ['font-family', 'string'],\n\t\tfontWeight: ['font-weight', 'string'],\n\t\tfontSize: ['font-size', 'number'],\n\t\tjustification: ['text-anchor', 'lookup', {\n\t\t\tleft: 'start',\n\t\t\tcenter: 'middle',\n\t\t\tright: 'end'\n\t\t}],\n\t\topacity: ['opacity', 'number'],\n\t\tblendMode: ['mix-blend-mode', 'style']\n\t}, function(entry, key) {\n\t\tvar part = Base.capitalize(key),\n\t\t\tlookup = entry[2];\n\t\tthis[key] = {\n\t\t\ttype: entry[1],\n\t\t\tproperty: key,\n\t\t\tattribute: entry[0],\n\t\t\ttoSVG: lookup,\n\t\t\tfromSVG: lookup && Base.each(lookup, function(value, name) {\n\t\t\t\tthis[value] = name;\n\t\t\t}, {}),\n\t\t\texportFilter: entry[3],\n\t\t\tget: 'get' + part,\n\t\t\tset: 'set' + part\n\t\t};\n\t}, {});\n\t\n\tnew function() {\n\t\tvar formatter;\n\t\n\t\tfunction getTransform(matrix, coordinates, center) {\n\t\t\tvar attrs = new Base(),\n\t\t\t\ttrans = matrix.getTranslation();\n\t\t\tif (coordinates) {\n\t\t\t\tmatrix = matrix._shiftless();\n\t\t\t\tvar point = matrix._inverseTransform(trans);\n\t\t\t\tattrs[center ? 'cx' : 'x'] = point.x;\n\t\t\t\tattrs[center ? 'cy' : 'y'] = point.y;\n\t\t\t\ttrans = null;\n\t\t\t}\n\t\t\tif (!matrix.isIdentity()) {\n\t\t\t\tvar decomposed = matrix.decompose();\n\t\t\t\tif (decomposed) {\n\t\t\t\t\tvar parts = [],\n\t\t\t\t\t\tangle = decomposed.rotation,\n\t\t\t\t\t\tscale = decomposed.scaling,\n\t\t\t\t\t\tskew = decomposed.skewing;\n\t\t\t\t\tif (trans && !trans.isZero())\n\t\t\t\t\t\tparts.push('translate(' + formatter.point(trans) + ')');\n\t\t\t\t\tif (angle)\n\t\t\t\t\t\tparts.push('rotate(' + formatter.number(angle) + ')');\n\t\t\t\t\tif (!Numerical.isZero(scale.x - 1)\n\t\t\t\t\t\t\t|| !Numerical.isZero(scale.y - 1))\n\t\t\t\t\t\tparts.push('scale(' + formatter.point(scale) +')');\n\t\t\t\t\tif (skew && skew.x)\n\t\t\t\t\t\tparts.push('skewX(' + formatter.number(skew.x) + ')');\n\t\t\t\t\tif (skew && skew.y)\n\t\t\t\t\t\tparts.push('skewY(' + formatter.number(skew.y) + ')');\n\t\t\t\t\tattrs.transform = parts.join(' ');\n\t\t\t\t} else {\n\t\t\t\t\tattrs.transform = 'matrix(' + matrix.getValues().join(',') + ')';\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn attrs;\n\t\t}\n\t\n\t\tfunction exportGroup(item, options) {\n\t\t\tvar attrs = getTransform(item._matrix),\n\t\t\t\tchildren = item._children;\n\t\t\tvar node = SvgElement.create('g', attrs, formatter);\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tvar child = children[i];\n\t\t\t\tvar childNode = exportSVG(child, options);\n\t\t\t\tif (childNode) {\n\t\t\t\t\tif (child.isClipMask()) {\n\t\t\t\t\t\tvar clip = SvgElement.create('clipPath');\n\t\t\t\t\t\tclip.appendChild(childNode);\n\t\t\t\t\t\tsetDefinition(child, clip, 'clip');\n\t\t\t\t\t\tSvgElement.set(node, {\n\t\t\t\t\t\t\t'clip-path': 'url(#' + clip.id + ')'\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn node;\n\t\t}\n\t\n\t\tfunction exportRaster(item, options) {\n\t\t\tvar attrs = getTransform(item._matrix, true),\n\t\t\t\tsize = item.getSize(),\n\t\t\t\timage = item.getImage();\n\t\t\tattrs.x -= size.width / 2;\n\t\t\tattrs.y -= size.height / 2;\n\t\t\tattrs.width = size.width;\n\t\t\tattrs.height = size.height;\n\t\t\tattrs.href = options.embedImages === false && image && image.src\n\t\t\t\t\t|| item.toDataURL();\n\t\t\treturn SvgElement.create('image', attrs, formatter);\n\t\t}\n\t\n\t\tfunction exportPath(item, options) {\n\t\t\tvar matchShapes = options.matchShapes;\n\t\t\tif (matchShapes) {\n\t\t\t\tvar shape = item.toShape(false);\n\t\t\t\tif (shape)\n\t\t\t\t\treturn exportShape(shape, options);\n\t\t\t}\n\t\t\tvar segments = item._segments,\n\t\t\t\tlength = segments.length,\n\t\t\t\ttype,\n\t\t\t\tattrs = getTransform(item._matrix);\n\t\t\tif (matchShapes && length >= 2 && !item.hasHandles()) {\n\t\t\t\tif (length > 2) {\n\t\t\t\t\ttype = item._closed ? 'polygon' : 'polyline';\n\t\t\t\t\tvar parts = [];\n\t\t\t\t\tfor(var i = 0; i < length; i++)\n\t\t\t\t\t\tparts.push(formatter.point(segments[i]._point));\n\t\t\t\t\tattrs.points = parts.join(' ');\n\t\t\t\t} else {\n\t\t\t\t\ttype = 'line';\n\t\t\t\t\tvar start = segments[0]._point,\n\t\t\t\t\t\tend = segments[1]._point;\n\t\t\t\t\tattrs.set({\n\t\t\t\t\t\tx1: start.x,\n\t\t\t\t\t\ty1: start.y,\n\t\t\t\t\t\tx2: end.x,\n\t\t\t\t\t\ty2: end.y\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttype = 'path';\n\t\t\t\tattrs.d = item.getPathData(null, options.precision);\n\t\t\t}\n\t\t\treturn SvgElement.create(type, attrs, formatter);\n\t\t}\n\t\n\t\tfunction exportShape(item) {\n\t\t\tvar type = item._type,\n\t\t\t\tradius = item._radius,\n\t\t\t\tattrs = getTransform(item._matrix, true, type !== 'rectangle');\n\t\t\tif (type === 'rectangle') {\n\t\t\t\ttype = 'rect';\n\t\t\t\tvar size = item._size,\n\t\t\t\t\twidth = size.width,\n\t\t\t\t\theight = size.height;\n\t\t\t\tattrs.x -= width / 2;\n\t\t\t\tattrs.y -= height / 2;\n\t\t\t\tattrs.width = width;\n\t\t\t\tattrs.height = height;\n\t\t\t\tif (radius.isZero())\n\t\t\t\t\tradius = null;\n\t\t\t}\n\t\t\tif (radius) {\n\t\t\t\tif (type === 'circle') {\n\t\t\t\t\tattrs.r = radius;\n\t\t\t\t} else {\n\t\t\t\t\tattrs.rx = radius.width;\n\t\t\t\t\tattrs.ry = radius.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn SvgElement.create(type, attrs, formatter);\n\t\t}\n\t\n\t\tfunction exportCompoundPath(item, options) {\n\t\t\tvar attrs = getTransform(item._matrix);\n\t\t\tvar data = item.getPathData(null, options.precision);\n\t\t\tif (data)\n\t\t\t\tattrs.d = data;\n\t\t\treturn SvgElement.create('path', attrs, formatter);\n\t\t}\n\t\n\t\tfunction exportSymbolItem(item, options) {\n\t\t\tvar attrs = getTransform(item._matrix, true),\n\t\t\t\tdefinition = item._definition,\n\t\t\t\tnode = getDefinition(definition, 'symbol'),\n\t\t\t\tdefinitionItem = definition._item,\n\t\t\t\tbounds = definitionItem.getBounds();\n\t\t\tif (!node) {\n\t\t\t\tnode = SvgElement.create('symbol', {\n\t\t\t\t\tviewBox: formatter.rectangle(bounds)\n\t\t\t\t});\n\t\t\t\tnode.appendChild(exportSVG(definitionItem, options));\n\t\t\t\tsetDefinition(definition, node, 'symbol');\n\t\t\t}\n\t\t\tattrs.href = '#' + node.id;\n\t\t\tattrs.x += bounds.x;\n\t\t\tattrs.y += bounds.y;\n\t\t\tattrs.width = bounds.width;\n\t\t\tattrs.height = bounds.height;\n\t\t\tattrs.overflow = 'visible';\n\t\t\treturn SvgElement.create('use', attrs, formatter);\n\t\t}\n\t\n\t\tfunction exportGradient(color) {\n\t\t\tvar gradientNode = getDefinition(color, 'color');\n\t\t\tif (!gradientNode) {\n\t\t\t\tvar gradient = color.getGradient(),\n\t\t\t\t\tradial = gradient._radial,\n\t\t\t\t\torigin = color.getOrigin(),\n\t\t\t\t\tdestination = color.getDestination(),\n\t\t\t\t\tattrs;\n\t\t\t\tif (radial) {\n\t\t\t\t\tattrs = {\n\t\t\t\t\t\tcx: origin.x,\n\t\t\t\t\t\tcy: origin.y,\n\t\t\t\t\t\tr: origin.getDistance(destination)\n\t\t\t\t\t};\n\t\t\t\t\tvar highlight = color.getHighlight();\n\t\t\t\t\tif (highlight) {\n\t\t\t\t\t\tattrs.fx = highlight.x;\n\t\t\t\t\t\tattrs.fy = highlight.y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tattrs = {\n\t\t\t\t\t\tx1: origin.x,\n\t\t\t\t\t\ty1: origin.y,\n\t\t\t\t\t\tx2: destination.x,\n\t\t\t\t\t\ty2: destination.y\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tattrs.gradientUnits = 'userSpaceOnUse';\n\t\t\t\tgradientNode = SvgElement.create((radial ? 'radial' : 'linear')\n\t\t\t\t\t\t+ 'Gradient', attrs, formatter);\n\t\t\t\tvar stops = gradient._stops;\n\t\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {\n\t\t\t\t\tvar stop = stops[i],\n\t\t\t\t\t\tstopColor = stop._color,\n\t\t\t\t\t\talpha = stopColor.getAlpha();\n\t\t\t\t\tattrs = {\n\t\t\t\t\t\toffset: stop._offset || i / (l - 1)\n\t\t\t\t\t};\n\t\t\t\t\tif (stopColor)\n\t\t\t\t\t\tattrs['stop-color'] = stopColor.toCSS(true);\n\t\t\t\t\tif (alpha < 1)\n\t\t\t\t\t\tattrs['stop-opacity'] = alpha;\n\t\t\t\t\tgradientNode.appendChild(\n\t\t\t\t\t\t\tSvgElement.create('stop', attrs, formatter));\n\t\t\t\t}\n\t\t\t\tsetDefinition(color, gradientNode, 'color');\n\t\t\t}\n\t\t\treturn 'url(#' + gradientNode.id + ')';\n\t\t}\n\t\n\t\tfunction exportText(item) {\n\t\t\tvar node = SvgElement.create('text', getTransform(item._matrix, true),\n\t\t\t\t\tformatter);\n\t\t\tnode.textContent = item._content;\n\t\t\treturn node;\n\t\t}\n\t\n\t\tvar exporters = {\n\t\t\tGroup: exportGroup,\n\t\t\tLayer: exportGroup,\n\t\t\tRaster: exportRaster,\n\t\t\tPath: exportPath,\n\t\t\tShape: exportShape,\n\t\t\tCompoundPath: exportCompoundPath,\n\t\t\tSymbolItem: exportSymbolItem,\n\t\t\tPointText: exportText\n\t\t};\n\t\n\t\tfunction applyStyle(item, node, isRoot) {\n\t\t\tvar attrs = {},\n\t\t\t\tparent = !isRoot && item.getParent(),\n\t\t\t\tstyle = [];\n\t\n\t\t\tif (item._name != null)\n\t\t\t\tattrs.id = item._name;\n\t\n\t\t\tBase.each(SvgStyles, function(entry) {\n\t\t\t\tvar get = entry.get,\n\t\t\t\t\ttype = entry.type,\n\t\t\t\t\tvalue = item[get]();\n\t\t\t\tif (entry.exportFilter\n\t\t\t\t\t\t? entry.exportFilter(item, value)\n\t\t\t\t\t\t: !parent || !Base.equals(parent[get](), value)) {\n\t\t\t\t\tif (type === 'color' && value != null) {\n\t\t\t\t\t\tvar alpha = value.getAlpha();\n\t\t\t\t\t\tif (alpha < 1)\n\t\t\t\t\t\t\tattrs[entry.attribute + '-opacity'] = alpha;\n\t\t\t\t\t}\n\t\t\t\t\tif (type === 'style') {\n\t\t\t\t\t\tstyle.push(entry.attribute + ': ' + value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tattrs[entry.attribute] = value == null ? 'none'\n\t\t\t\t\t\t\t\t: type === 'color' ? value.gradient\n\t\t\t\t\t\t\t\t\t? exportGradient(value, item)\n\t\t\t\t\t\t\t\t\t: value.toCSS(true)\n\t\t\t\t\t\t\t\t: type === 'array' ? value.join(',')\n\t\t\t\t\t\t\t\t: type === 'lookup' ? entry.toSVG[value]\n\t\t\t\t\t\t\t\t: value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tif (style.length)\n\t\t\t\tattrs.style = style.join(';');\n\t\n\t\t\tif (attrs.opacity === 1)\n\t\t\t\tdelete attrs.opacity;\n\t\n\t\t\tif (!item._visible)\n\t\t\t\tattrs.visibility = 'hidden';\n\t\n\t\t\treturn SvgElement.set(node, attrs, formatter);\n\t\t}\n\t\n\t\tvar definitions;\n\t\tfunction getDefinition(item, type) {\n\t\t\tif (!definitions)\n\t\t\t\tdefinitions = { ids: {}, svgs: {} };\n\t\t\tvar id = item._id || item.__id || (item.__id = UID.get('svg'));\n\t\t\treturn item && definitions.svgs[type + '-' + id];\n\t\t}\n\t\n\t\tfunction setDefinition(item, node, type) {\n\t\t\tif (!definitions)\n\t\t\t\tgetDefinition();\n\t\t\tvar typeId = definitions.ids[type] = (definitions.ids[type] || 0) + 1;\n\t\t\tnode.id = type + '-' + typeId;\n\t\t\tdefinitions.svgs[type + '-' + (item._id || item.__id)] = node;\n\t\t}\n\t\n\t\tfunction exportDefinitions(node, options) {\n\t\t\tvar svg = node,\n\t\t\t\tdefs = null;\n\t\t\tif (definitions) {\n\t\t\t\tsvg = node.nodeName.toLowerCase() === 'svg' && node;\n\t\t\t\tfor (var i in definitions.svgs) {\n\t\t\t\t\tif (!defs) {\n\t\t\t\t\t\tif (!svg) {\n\t\t\t\t\t\t\tsvg = SvgElement.create('svg');\n\t\t\t\t\t\t\tsvg.appendChild(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefs = svg.insertBefore(SvgElement.create('defs'),\n\t\t\t\t\t\t\t\tsvg.firstChild);\n\t\t\t\t\t}\n\t\t\t\t\tdefs.appendChild(definitions.svgs[i]);\n\t\t\t\t}\n\t\t\t\tdefinitions = null;\n\t\t\t}\n\t\t\treturn options.asString\n\t\t\t\t\t? new self.XMLSerializer().serializeToString(svg)\n\t\t\t\t\t: svg;\n\t\t}\n\t\n\t\tfunction exportSVG(item, options, isRoot) {\n\t\t\tvar exporter = exporters[item._class],\n\t\t\t\tnode = exporter && exporter(item, options);\n\t\t\tif (node) {\n\t\t\t\tvar onExport = options.onExport;\n\t\t\t\tif (onExport)\n\t\t\t\t\tnode = onExport(item, node, options) || node;\n\t\t\t\tvar data = JSON.stringify(item._data);\n\t\t\t\tif (data && data !== '{}' && data !== 'null')\n\t\t\t\t\tnode.setAttribute('data-paper-data', data);\n\t\t\t}\n\t\t\treturn node && applyStyle(item, node, isRoot);\n\t\t}\n\t\n\t\tfunction setOptions(options) {\n\t\t\tif (!options)\n\t\t\t\toptions = {};\n\t\t\tformatter = new Formatter(options.precision);\n\t\t\treturn options;\n\t\t}\n\t\n\t\tItem.inject({\n\t\t\texportSVG: function(options) {\n\t\t\t\toptions = setOptions(options);\n\t\t\t\treturn exportDefinitions(exportSVG(this, options, true), options);\n\t\t\t}\n\t\t});\n\t\n\t\tProject.inject({\n\t\t\texportSVG: function(options) {\n\t\t\t\toptions = setOptions(options);\n\t\t\t\tvar children = this._children,\n\t\t\t\t\tview = this.getView(),\n\t\t\t\t\tbounds = Base.pick(options.bounds, 'view'),\n\t\t\t\t\tmx = options.matrix || bounds === 'view' && view._matrix,\n\t\t\t\t\tmatrix = mx && Matrix.read([mx]),\n\t\t\t\t\trect = bounds === 'view'\n\t\t\t\t\t\t? new Rectangle([0, 0], view.getViewSize())\n\t\t\t\t\t\t: bounds === 'content'\n\t\t\t\t\t\t\t? Item._getBounds(children, matrix, { stroke: true })\n\t\t\t\t\t\t\t: Rectangle.read([bounds], 0, { readNull: true }),\n\t\t\t\t\tattrs = {\n\t\t\t\t\t\tversion: '1.1',\n\t\t\t\t\t\txmlns: SvgElement.svg,\n\t\t\t\t\t\t'xmlns:xlink': SvgElement.xlink,\n\t\t\t\t\t};\n\t\t\t\tif (rect) {\n\t\t\t\t\tattrs.width = rect.width;\n\t\t\t\t\tattrs.height = rect.height;\n\t\t\t\t\tif (rect.x || rect.y)\n\t\t\t\t\t\tattrs.viewBox = formatter.rectangle(rect);\n\t\t\t\t}\n\t\t\t\tvar node = SvgElement.create('svg', attrs, formatter),\n\t\t\t\t\tparent = node;\n\t\t\t\tif (matrix && !matrix.isIdentity()) {\n\t\t\t\t\tparent = node.appendChild(SvgElement.create('g',\n\t\t\t\t\t\t\tgetTransform(matrix), formatter));\n\t\t\t\t}\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tparent.appendChild(exportSVG(children[i], options, true));\n\t\t\t\t}\n\t\t\t\treturn exportDefinitions(node, options);\n\t\t\t}\n\t\t});\n\t};\n\t\n\tnew function() {\n\t\n\t\tvar definitions = {},\n\t\t\trootSize;\n\t\n\t\tfunction getValue(node, name, isString, allowNull, allowPercent) {\n\t\t\tvar value = SvgElement.get(node, name),\n\t\t\t\tres = value == null\n\t\t\t\t\t? allowNull\n\t\t\t\t\t\t? null\n\t\t\t\t\t\t: isString ? '' : 0\n\t\t\t\t\t: isString\n\t\t\t\t\t\t? value\n\t\t\t\t\t\t: parseFloat(value);\n\t\t\treturn /%\\s*$/.test(value)\n\t\t\t\t? (res / 100) * (allowPercent ? 1\n\t\t\t\t\t: rootSize[/x|^width/.test(name) ? 'width' : 'height'])\n\t\t\t\t: res;\n\t\t}\n\t\n\t\tfunction getPoint(node, x, y, allowNull, allowPercent) {\n\t\t\tx = getValue(node, x || 'x', false, allowNull, allowPercent);\n\t\t\ty = getValue(node, y || 'y', false, allowNull, allowPercent);\n\t\t\treturn allowNull && (x == null || y == null) ? null\n\t\t\t\t\t: new Point(x, y);\n\t\t}\n\t\n\t\tfunction getSize(node, w, h, allowNull, allowPercent) {\n\t\t\tw = getValue(node, w || 'width', false, allowNull, allowPercent);\n\t\t\th = getValue(node, h || 'height', false, allowNull, allowPercent);\n\t\t\treturn allowNull && (w == null || h == null) ? null\n\t\t\t\t\t: new Size(w, h);\n\t\t}\n\t\n\t\tfunction convertValue(value, type, lookup) {\n\t\t\treturn value === 'none' ? null\n\t\t\t\t\t: type === 'number' ? parseFloat(value)\n\t\t\t\t\t: type === 'array' ?\n\t\t\t\t\t\tvalue ? value.split(/[\\s,]+/g).map(parseFloat) : []\n\t\t\t\t\t: type === 'color' ? getDefinition(value) || value\n\t\t\t\t\t: type === 'lookup' ? lookup[value]\n\t\t\t\t\t: value;\n\t\t}\n\t\n\t\tfunction importGroup(node, type, options, isRoot) {\n\t\t\tvar nodes = node.childNodes,\n\t\t\t\tisClip = type === 'clippath',\n\t\t\t\tisDefs = type === 'defs',\n\t\t\t\titem = new Group(),\n\t\t\t\tproject = item._project,\n\t\t\t\tcurrentStyle = project._currentStyle,\n\t\t\t\tchildren = [];\n\t\t\tif (!isClip && !isDefs) {\n\t\t\t\titem = applyAttributes(item, node, isRoot);\n\t\t\t\tproject._currentStyle = item._style.clone();\n\t\t\t}\n\t\t\tif (isRoot) {\n\t\t\t\tvar defs = node.querySelectorAll('defs');\n\t\t\t\tfor (var i = 0, l = defs.length; i < l; i++) {\n\t\t\t\t\timportNode(defs[i], options, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\t\tvar childNode = nodes[i],\n\t\t\t\t\tchild;\n\t\t\t\tif (childNode.nodeType === 1\n\t\t\t\t\t\t&& !/^defs$/i.test(childNode.nodeName)\n\t\t\t\t\t\t&& (child = importNode(childNode, options, false))\n\t\t\t\t\t\t&& !(child instanceof SymbolDefinition))\n\t\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t\titem.addChildren(children);\n\t\t\tif (isClip)\n\t\t\t\titem = applyAttributes(item.reduce(), node, isRoot);\n\t\t\tproject._currentStyle = currentStyle;\n\t\t\tif (isClip || isDefs) {\n\t\t\t\titem.remove();\n\t\t\t\titem = null;\n\t\t\t}\n\t\t\treturn item;\n\t\t}\n\t\n\t\tfunction importPoly(node, type) {\n\t\t\tvar coords = node.getAttribute('points').match(\n\t\t\t\t\t\t/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g),\n\t\t\t\tpoints = [];\n\t\t\tfor (var i = 0, l = coords.length; i < l; i += 2)\n\t\t\t\tpoints.push(new Point(\n\t\t\t\t\t\tparseFloat(coords[i]),\n\t\t\t\t\t\tparseFloat(coords[i + 1])));\n\t\t\tvar path = new Path(points);\n\t\t\tif (type === 'polygon')\n\t\t\t\tpath.closePath();\n\t\t\treturn path;\n\t\t}\n\t\n\t\tfunction importPath(node) {\n\t\t\treturn PathItem.create(node.getAttribute('d'));\n\t\t}\n\t\n\t\tfunction importGradient(node, type) {\n\t\t\tvar id = (getValue(node, 'href', true) || '').substring(1),\n\t\t\t\tradial = type === 'radialgradient',\n\t\t\t\tgradient;\n\t\t\tif (id) {\n\t\t\t\tgradient = definitions[id].getGradient();\n\t\t\t\tif (gradient._radial ^ radial) {\n\t\t\t\t\tgradient = gradient.clone();\n\t\t\t\t\tgradient._radial = radial;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar nodes = node.childNodes,\n\t\t\t\t\tstops = [];\n\t\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\t\t\tvar child = nodes[i];\n\t\t\t\t\tif (child.nodeType === 1)\n\t\t\t\t\t\tstops.push(applyAttributes(new GradientStop(), child));\n\t\t\t\t}\n\t\t\t\tgradient = new Gradient(stops, radial);\n\t\t\t}\n\t\t\tvar origin, destination, highlight,\n\t\t\t\tscaleToBounds = getValue(node, 'gradientUnits', true) !==\n\t\t\t\t\t'userSpaceOnUse';\n\t\t\tif (radial) {\n\t\t\t\torigin = getPoint(node, 'cx', 'cy', false, scaleToBounds);\n\t\t\t\tdestination = origin.add(\n\t\t\t\t\t\tgetValue(node, 'r', false, false, scaleToBounds), 0);\n\t\t\t\thighlight = getPoint(node, 'fx', 'fy', true, scaleToBounds);\n\t\t\t} else {\n\t\t\t\torigin = getPoint(node, 'x1', 'y1', false, scaleToBounds);\n\t\t\t\tdestination = getPoint(node, 'x2', 'y2', false, scaleToBounds);\n\t\t\t}\n\t\t\tvar color = applyAttributes(\n\t\t\t\t\tnew Color(gradient, origin, destination, highlight), node);\n\t\t\tcolor._scaleToBounds = scaleToBounds;\n\t\t\treturn null;\n\t\t}\n\t\n\t\tvar importers = {\n\t\t\t'#document': function (node, type, options, isRoot) {\n\t\t\t\tvar nodes = node.childNodes;\n\t\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\t\t\tvar child = nodes[i];\n\t\t\t\t\tif (child.nodeType === 1)\n\t\t\t\t\t\treturn importNode(child, options, isRoot);\n\t\t\t\t}\n\t\t\t},\n\t\t\tg: importGroup,\n\t\t\tsvg: importGroup,\n\t\t\tclippath: importGroup,\n\t\t\tpolygon: importPoly,\n\t\t\tpolyline: importPoly,\n\t\t\tpath: importPath,\n\t\t\tlineargradient: importGradient,\n\t\t\tradialgradient: importGradient,\n\t\n\t\t\timage: function (node) {\n\t\t\t\tvar raster = new Raster(getValue(node, 'href', true));\n\t\t\t\traster.on('load', function() {\n\t\t\t\t\tvar size = getSize(node);\n\t\t\t\t\tthis.setSize(size);\n\t\t\t\t\tvar center = this._matrix._transformPoint(\n\t\t\t\t\t\t\tgetPoint(node).add(size.divide(2)));\n\t\t\t\t\tthis.translate(center);\n\t\t\t\t});\n\t\t\t\treturn raster;\n\t\t\t},\n\t\n\t\t\tsymbol: function(node, type, options, isRoot) {\n\t\t\t\treturn new SymbolDefinition(\n\t\t\t\t\t\timportGroup(node, type, options, isRoot), true);\n\t\t\t},\n\t\n\t\t\tdefs: importGroup,\n\t\n\t\t\tuse: function(node) {\n\t\t\t\tvar id = (getValue(node, 'href', true) || '').substring(1),\n\t\t\t\t\tdefinition = definitions[id],\n\t\t\t\t\tpoint = getPoint(node);\n\t\t\t\treturn definition\n\t\t\t\t\t\t? definition instanceof SymbolDefinition\n\t\t\t\t\t\t\t? definition.place(point)\n\t\t\t\t\t\t\t: definition.clone().translate(point)\n\t\t\t\t\t\t: null;\n\t\t\t},\n\t\n\t\t\tcircle: function(node) {\n\t\t\t\treturn new Shape.Circle(\n\t\t\t\t\t\tgetPoint(node, 'cx', 'cy'),\n\t\t\t\t\t\tgetValue(node, 'r'));\n\t\t\t},\n\t\n\t\t\tellipse: function(node) {\n\t\t\t\treturn new Shape.Ellipse({\n\t\t\t\t\tcenter: getPoint(node, 'cx', 'cy'),\n\t\t\t\t\tradius: getSize(node, 'rx', 'ry')\n\t\t\t\t});\n\t\t\t},\n\t\n\t\t\trect: function(node) {\n\t\t\t\treturn new Shape.Rectangle(new Rectangle(\n\t\t\t\t\t\t\tgetPoint(node),\n\t\t\t\t\t\t\tgetSize(node)\n\t\t\t\t\t\t), getSize(node, 'rx', 'ry'));\n\t\t\t\t},\n\t\n\t\t\tline: function(node) {\n\t\t\t\treturn new Path.Line(\n\t\t\t\t\t\tgetPoint(node, 'x1', 'y1'),\n\t\t\t\t\t\tgetPoint(node, 'x2', 'y2'));\n\t\t\t},\n\t\n\t\t\ttext: function(node) {\n\t\t\t\tvar text = new PointText(getPoint(node).add(\n\t\t\t\t\t\tgetPoint(node, 'dx', 'dy')));\n\t\t\t\ttext.setContent(node.textContent.trim() || '');\n\t\t\t\treturn text;\n\t\t\t}\n\t\t};\n\t\n\t\tfunction applyTransform(item, value, name, node) {\n\t\t\tif (item.transform) {\n\t\t\t\tvar transforms = (node.getAttribute(name) || '').split(/\\)\\s*/g),\n\t\t\t\t\tmatrix = new Matrix();\n\t\t\t\tfor (var i = 0, l = transforms.length; i < l; i++) {\n\t\t\t\t\tvar transform = transforms[i];\n\t\t\t\t\tif (!transform)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tvar parts = transform.split(/\\(\\s*/),\n\t\t\t\t\t\tcommand = parts[0],\n\t\t\t\t\t\tv = parts[1].split(/[\\s,]+/g);\n\t\t\t\t\tfor (var j = 0, m = v.length; j < m; j++)\n\t\t\t\t\t\tv[j] = parseFloat(v[j]);\n\t\t\t\t\tswitch (command) {\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tmatrix.append(\n\t\t\t\t\t\t\t\tnew Matrix(v[0], v[1], v[2], v[3], v[4], v[5]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tmatrix.rotate(v[0], v[1], v[2]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\tmatrix.translate(v[0], v[1]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tmatrix.scale(v);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'skewX':\n\t\t\t\t\t\tmatrix.skew(v[0], 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'skewY':\n\t\t\t\t\t\tmatrix.skew(0, v[0]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\titem.transform(matrix);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction applyOpacity(item, value, name) {\n\t\t\tvar key = name === 'fill-opacity' ? 'getFillColor' : 'getStrokeColor',\n\t\t\t\tcolor = item[key] && item[key]();\n\t\t\tif (color)\n\t\t\t\tcolor.setAlpha(parseFloat(value));\n\t\t}\n\t\n\t\tvar attributes = Base.set(Base.each(SvgStyles, function(entry) {\n\t\t\tthis[entry.attribute] = function(item, value) {\n\t\t\t\tif (item[entry.set]) {\n\t\t\t\t\titem[entry.set](convertValue(value, entry.type, entry.fromSVG));\n\t\t\t\t\tif (entry.type === 'color') {\n\t\t\t\t\t\tvar color = item[entry.get]();\n\t\t\t\t\t\tif (color) {\n\t\t\t\t\t\t\tif (color._scaleToBounds) {\n\t\t\t\t\t\t\t\tvar bounds = item.getBounds();\n\t\t\t\t\t\t\t\tcolor.transform(new Matrix()\n\t\t\t\t\t\t\t\t\t.translate(bounds.getPoint())\n\t\t\t\t\t\t\t\t\t.scale(bounds.getSize()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (item instanceof Shape) {\n\t\t\t\t\t\t\t\tcolor.transform(new Matrix().translate(\n\t\t\t\t\t\t\t\t\titem.getPosition(true).negate()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}, {}), {\n\t\t\tid: function(item, value) {\n\t\t\t\tdefinitions[value] = item;\n\t\t\t\tif (item.setName)\n\t\t\t\t\titem.setName(value);\n\t\t\t},\n\t\n\t\t\t'clip-path': function(item, value) {\n\t\t\t\tvar clip = getDefinition(value);\n\t\t\t\tif (clip) {\n\t\t\t\t\tclip = clip.clone();\n\t\t\t\t\tclip.setClipMask(true);\n\t\t\t\t\tif (item instanceof Group) {\n\t\t\t\t\t\titem.insertChild(0, clip);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new Group(clip, item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tgradientTransform: applyTransform,\n\t\t\ttransform: applyTransform,\n\t\n\t\t\t'fill-opacity': applyOpacity,\n\t\t\t'stroke-opacity': applyOpacity,\n\t\n\t\t\tvisibility: function(item, value) {\n\t\t\t\tif (item.setVisible)\n\t\t\t\t\titem.setVisible(value === 'visible');\n\t\t\t},\n\t\n\t\t\tdisplay: function(item, value) {\n\t\t\t\tif (item.setVisible)\n\t\t\t\t\titem.setVisible(value !== null);\n\t\t\t},\n\t\n\t\t\t'stop-color': function(item, value) {\n\t\t\t\tif (item.setColor)\n\t\t\t\t\titem.setColor(value);\n\t\t\t},\n\t\n\t\t\t'stop-opacity': function(item, value) {\n\t\t\t\tif (item._color)\n\t\t\t\t\titem._color.setAlpha(parseFloat(value));\n\t\t\t},\n\t\n\t\t\toffset: function(item, value) {\n\t\t\t\tif (item.setOffset) {\n\t\t\t\t\tvar percent = value.match(/(.*)%$/);\n\t\t\t\t\titem.setOffset(percent ? percent[1] / 100 : parseFloat(value));\n\t\t\t\t}\n\t\t\t},\n\t\n\t\t\tviewBox: function(item, value, name, node, styles) {\n\t\t\t\tvar rect = new Rectangle(convertValue(value, 'array')),\n\t\t\t\t\tsize = getSize(node, null, null, true),\n\t\t\t\t\tgroup,\n\t\t\t\t\tmatrix;\n\t\t\t\tif (item instanceof Group) {\n\t\t\t\t\tvar scale = size ? size.divide(rect.getSize()) : 1,\n\t\t\t\t\tmatrix = new Matrix().scale(scale)\n\t\t\t\t\t\t\t.translate(rect.getPoint().negate());\n\t\t\t\t\tgroup = item;\n\t\t\t\t} else if (item instanceof SymbolDefinition) {\n\t\t\t\t\tif (size)\n\t\t\t\t\t\trect.setSize(size);\n\t\t\t\t\tgroup = item._item;\n\t\t\t\t}\n\t\t\t\tif (group)  {\n\t\t\t\t\tif (getAttribute(node, 'overflow', styles) !== 'visible') {\n\t\t\t\t\t\tvar clip = new Shape.Rectangle(rect);\n\t\t\t\t\t\tclip.setClipMask(true);\n\t\t\t\t\t\tgroup.addChild(clip);\n\t\t\t\t\t}\n\t\t\t\t\tif (matrix)\n\t\t\t\t\t\tgroup.transform(matrix);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\tfunction getAttribute(node, name, styles) {\n\t\t\tvar attr = node.attributes[name],\n\t\t\t\tvalue = attr && attr.value;\n\t\t\tif (!value) {\n\t\t\t\tvar style = Base.camelize(name);\n\t\t\t\tvalue = node.style[style];\n\t\t\t\tif (!value && styles.node[style] !== styles.parent[style])\n\t\t\t\t\tvalue = styles.node[style];\n\t\t\t}\n\t\t\treturn !value ? undefined\n\t\t\t\t\t: value === 'none' ? null\n\t\t\t\t\t: value;\n\t\t}\n\t\n\t\tfunction applyAttributes(item, node, isRoot) {\n\t\t\tvar parent = node.parentNode,\n\t\t\t\tstyles = {\n\t\t\t\t\tnode: DomElement.getStyles(node) || {},\n\t\t\t\t\tparent: !isRoot && !/^defs$/i.test(parent.tagName)\n\t\t\t\t\t\t\t&& DomElement.getStyles(parent) || {}\n\t\t\t\t};\n\t\t\tBase.each(attributes, function(apply, name) {\n\t\t\t\tvar value = getAttribute(node, name, styles);\n\t\t\t\titem = value !== undefined && apply(item, value, name, node, styles)\n\t\t\t\t\t\t|| item;\n\t\t\t});\n\t\t\treturn item;\n\t\t}\n\t\n\t\tfunction getDefinition(value) {\n\t\t\tvar match = value && value.match(/\\((?:[\"'#]*)([^\"')]+)/),\n\t\t\t\tname = match && match[1],\n\t\t\t\tres = name && definitions[window\n\t\t\t\t\t\t? name.replace(window.location.href.split('#')[0] + '#', '')\n\t\t\t\t\t\t: name];\n\t\t\tif (res && res._scaleToBounds) {\n\t\t\t\tres = res.clone();\n\t\t\t\tres._scaleToBounds = true;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\n\t\tfunction importNode(node, options, isRoot) {\n\t\t\tvar type = node.nodeName.toLowerCase(),\n\t\t\t\tisElement = type !== '#document',\n\t\t\t\tbody = document.body,\n\t\t\t\tcontainer,\n\t\t\t\tparent,\n\t\t\t\tnext;\n\t\t\tif (isRoot && isElement) {\n\t\t\t\trootSize = getSize(node, null, null, true)\n\t\t\t\t\t\t|| paper.getView().getSize();\n\t\t\t\tcontainer = SvgElement.create('svg', {\n\t\t\t\t\tstyle: 'stroke-width: 1px; stroke-miterlimit: 10'\n\t\t\t\t});\n\t\t\t\tparent = node.parentNode;\n\t\t\t\tnext = node.nextSibling;\n\t\t\t\tcontainer.appendChild(node);\n\t\t\t\tbody.appendChild(container);\n\t\t\t}\n\t\t\tvar settings = paper.settings,\n\t\t\t\tapplyMatrix = settings.applyMatrix,\n\t\t\t\tinsertItems = settings.insertItems;\n\t\t\tsettings.applyMatrix = false;\n\t\t\tsettings.insertItems = false;\n\t\t\tvar importer = importers[type],\n\t\t\t\titem = importer && importer(node, type, options, isRoot) || null;\n\t\t\tsettings.insertItems = insertItems;\n\t\t\tsettings.applyMatrix = applyMatrix;\n\t\t\tif (item) {\n\t\t\t\tif (isElement && !(item instanceof Group))\n\t\t\t\t\titem = applyAttributes(item, node, isRoot);\n\t\t\t\tvar onImport = options.onImport,\n\t\t\t\t\tdata = isElement && node.getAttribute('data-paper-data');\n\t\t\t\tif (onImport)\n\t\t\t\t\titem = onImport(node, item, options) || item;\n\t\t\t\tif (options.expandShapes && item instanceof Shape) {\n\t\t\t\t\titem.remove();\n\t\t\t\t\titem = item.toPath();\n\t\t\t\t}\n\t\t\t\tif (data)\n\t\t\t\t\titem._data = JSON.parse(data);\n\t\t\t}\n\t\t\tif (container) {\n\t\t\t\tbody.removeChild(container);\n\t\t\t\tif (parent) {\n\t\t\t\t\tif (next) {\n\t\t\t\t\t\tparent.insertBefore(node, next);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparent.appendChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isRoot) {\n\t\t\t\tdefinitions = {};\n\t\t\t\tif (item && Base.pick(options.applyMatrix, applyMatrix))\n\t\t\t\t\titem.matrix.apply(true, true);\n\t\t\t}\n\t\t\treturn item;\n\t\t}\n\t\n\t\tfunction importSVG(source, options, owner) {\n\t\t\tif (!source)\n\t\t\t\treturn null;\n\t\t\toptions = typeof options === 'function' ? { onLoad: options }\n\t\t\t\t\t: options || {};\n\t\t\tvar scope = paper,\n\t\t\t\titem = null;\n\t\n\t\t\tfunction onLoad(svg) {\n\t\t\t\ttry {\n\t\t\t\t\tvar node = typeof svg === 'object' ? svg : new self.DOMParser()\n\t\t\t\t\t\t\t.parseFromString(svg, 'image/svg+xml');\n\t\t\t\t\tif (!node.nodeName) {\n\t\t\t\t\t\tnode = null;\n\t\t\t\t\t\tthrow new Error('Unsupported SVG source: ' + source);\n\t\t\t\t\t}\n\t\t\t\t\tpaper = scope;\n\t\t\t\t\titem = importNode(node, options, true);\n\t\t\t\t\tif (!options || options.insert !== false) {\n\t\t\t\t\t\towner._insertItem(undefined, item);\n\t\t\t\t\t}\n\t\t\t\t\tvar onLoad = options.onLoad;\n\t\t\t\t\tif (onLoad)\n\t\t\t\t\t\tonLoad(item, svg);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tonError(e);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction onError(message, status) {\n\t\t\t\tvar onError = options.onError;\n\t\t\t\tif (onError) {\n\t\t\t\t\tonError(message, status);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(message);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (typeof source === 'string' && !/^.*</.test(source)) {\n\t\t\t\tvar node = document.getElementById(source);\n\t\t\t\tif (node) {\n\t\t\t\t\tonLoad(node);\n\t\t\t\t} else {\n\t\t\t\t\tHttp.request({\n\t\t\t\t\t\turl: source,\n\t\t\t\t\t\tasync: true,\n\t\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\t\tonError: onError\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (typeof File !== 'undefined' && source instanceof File) {\n\t\t\t\tvar reader = new FileReader();\n\t\t\t\treader.onload = function() {\n\t\t\t\t\tonLoad(reader.result);\n\t\t\t\t};\n\t\t\t\treader.onerror = function() {\n\t\t\t\t\tonError(reader.error);\n\t\t\t\t};\n\t\t\t\treturn reader.readAsText(source);\n\t\t\t} else {\n\t\t\t\tonLoad(source);\n\t\t\t}\n\t\n\t\t\treturn item;\n\t\t}\n\t\n\t\tItem.inject({\n\t\t\timportSVG: function(node, options) {\n\t\t\t\treturn importSVG(node, options, this);\n\t\t\t}\n\t\t});\n\t\n\t\tProject.inject({\n\t\t\timportSVG: function(node, options) {\n\t\t\t\tthis.activate();\n\t\t\t\treturn importSVG(node, options, this);\n\t\t\t}\n\t\t});\n\t};\n\t\n\tpaper = new (PaperScope.inject(Base.exports, {\n\t\tenumerable: true,\n\t\tBase: Base,\n\t\tNumerical: Numerical,\n\t\tKey: Key,\n\t\tDomEvent: DomEvent,\n\t\tDomElement: DomElement,\n\t\tdocument: document,\n\t\twindow: window,\n\t\tSymbol: SymbolDefinition,\n\t\tPlacedSymbol: SymbolItem\n\t}))();\n\t\n\tif (paper.agent.node)\n\t\t__webpack_require__(38)(paper);\n\t\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (paper), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module === 'object' && module) {\n\t\tmodule.exports = paper;\n\t}\n\t\n\treturn paper;\n\t}.call(this, typeof self === 'object' ? self : null);\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t/* (ignored) */\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\t/* (ignored) */\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar opentype = __webpack_require__(2),\n\t\tpaper = __webpack_require__(36),\n\t\tGlyph = __webpack_require__(40),\n\t\tassign = __webpack_require__(42).assign;\n\t\n\tfunction mergeFont(url, name, user, arrayBuffer, merged, cb) {\n\t\tfetch(\n\t\t\t[\n\t\t\t\turl,\n\t\t\t\tname.family,\n\t\t\t\tname.style,\n\t\t\t\tuser,\n\t\t\t\tname.template || 'unknown'\n\t\t\t].join('/') +\n\t\t\t(merged ? '/overlap' : ''), {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/otf' },\n\t\t\t\tbody: arrayBuffer\n\t\t})\n\t\t.then(function( response ) {\n\t\t\treturn response.arrayBuffer();\n\t\t})\n\t\t.then(cb);\n\t}\n\t\n\tfunction Font( args ) {\n\t\tpaper.Group.prototype.constructor.apply( this );\n\t\n\t\targs = assign({\n\t\t\tfamilyName: 'Default familyName',\n\t\t\tstyleName: 'Regular',\n\t\t\tascender: 1,\n\t\t\tdescender: -1,\n\t\t\tunitsPerEm: 1024\n\t\t}, args);\n\t\n\t\tthis.fontinfo = this.ot = new opentype.Font( args );\n\t\n\t\tthis.glyphMap = {};\n\t\tthis.charMap = {};\n\t\tthis.altMap = {};\n\t\tthis._subset = false;\n\t\tthis.fontMap = {};\n\t\n\t\tthis.addGlyph(new Glyph({\n\t\t\tname: '.notdef',\n\t\t\tunicode: 0,\n\t\t\tadvanceWidth: 650\n\t\t}));\n\t\n\t\tif ( args && args.glyphs ) {\n\t\t\tthis.addGlyphs( args.glyphs );\n\t\t}\n\t\n\t\tif ( typeof window === 'object' && window.document && !document.fonts ) {\n\t\t\tdocument.head.appendChild(\n\t\t\t\tthis.styleElement = document.createElement('style')\n\t\t\t);\n\t\t\t// let's find the corresponding CSSStyleSheet\n\t\t\t// (would be much easier with Array#find)\n\t\t\tthis.styleSheet = document.styleSheets[\n\t\t\t\t[].map.call(document.styleSheets, function(ss) {\n\t\t\t\t\treturn ss.ownerNode;\n\t\t\t\t}).indexOf(this.styleElement)\n\t\t\t];\n\t\t}\n\t}\n\t\n\tFont.prototype = Object.create(paper.Group.prototype);\n\tFont.prototype.constructor = Font;\n\t\n\t// proxy .glyphs to .children\n\t// TODO: handle unicode updates\n\tObject.defineProperty(\n\t\tFont.prototype,\n\t\t'glyphs',\n\t\tObject.getOwnPropertyDescriptor( paper.Item.prototype, 'children' )\n\t);\n\t\n\t// TODO: proper proxying of ...Glyph[s] methods to ...Child[ren] methods\n\t// see Glyph.js\n\tFont.prototype.addGlyph = function( glyph ) {\n\t\tthis.addChild( glyph );\n\t\tthis.glyphMap[glyph.name] = glyph;\n\t\n\t\tif ( glyph.ot.unicode === undefined ) {\n\t\t\treturn glyph;\n\t\t}\n\t\n\t\t// build the default cmap\n\t\t// if multiple glyphs share the same unicode, use the glyph where unicode\n\t\t// and name are equal\n\t\tif ( !this.charMap[glyph.ot.unicode] ||\n\t\t\t\t( glyph.name.length === 1 &&\n\t\t\t\t\tglyph.name.charCodeAt(0) === glyph.ot.unicode ) ) {\n\t\n\t\t\tthis.charMap[glyph.ot.unicode] = glyph;\n\t\t}\n\t\n\t\t// build the alternates map\n\t\tif ( !this.altMap[glyph.ot.unicode] ) {\n\t\t\tthis.altMap[glyph.ot.unicode] = [];\n\t\t}\n\t\tthis.altMap[glyph.ot.unicode].push( glyph );\n\t\n\t\t// invalidate glyph subset cache\n\t\t// TODO: switch to immutable.js to avoid this maddness\n\t\tthis._lastSubset = undefined;\n\t\n\t\treturn glyph;\n\t};\n\t\n\tFont.prototype.addGlyphs = function( glyphs ) {\n\t\treturn glyphs.forEach(function( glyph ) {\n\t\t\tthis.addGlyph(glyph);\n\t\n\t\t}, this);\n\t};\n\t\n\tObject.defineProperty( Font.prototype, 'subset', {\n\t\tget: function() {\n\t\t\tif ( !this._subset ) {\n\t\t\t\tthis._subset = this.normalizeSubset( false );\n\t\t\t}\n\t\t\treturn this._subset;\n\t\t},\n\t\tset: function( set ) {\n\t\t\tthis._subset = this.normalizeSubset( set );\n\t\t}\n\t});\n\t\n\tFont.prototype.normalizeSubset = function( _set ) {\n\t\tvar set;\n\t\n\t\t// two cases where _set isn't an array\n\t\t// false set = all glyphs in the charMap\n\t\tif ( _set === false ) {\n\t\t\tset = Object.keys( this.charMap ).map(function( unicode ) {\n\t\t\t\treturn this.charMap[unicode];\n\t\t\t}.bind(this));\n\t\n\t\t// convert string to array of chars\n\t\t} else if ( typeof _set === 'string' ) {\n\t\t\tset = _set.split('').map(function(e) {\n\t\t\t\treturn e.charCodeAt(0);\n\t\t\t});\n\t\n\t\t} else {\n\t\t\tset = _set;\n\t\t}\n\t\n\t\t// convert array of number to array of glyphs\n\t\tif ( Array.isArray( set ) && typeof set[0] === 'number' ) {\n\t\t\tset = set.map(function( unicode ) {\n\t\t\t\treturn this.charMap[ unicode ];\n\t\t\t}.bind(this));\n\t\t}\n\t\n\t\t// always include .undef\n\t\tif ( set.indexOf( this.glyphMap['.notdef'] ) === -1 ) {\n\t\t\tset.unshift( this.glyphMap['.notdef'] );\n\t\t}\n\t\n\t\t// when encountering diacritics, include their base-glyph in the subset\n\t\tset.forEach(function( glyph ) {\n\t\t\tif ( glyph && glyph.base !== undefined ) {\n\t\t\t\tvar base = this.charMap[ glyph.base ];\n\t\t\t\tif ( set.indexOf( base ) === -1 ) {\n\t\t\t\t\tset.unshift( base );\n\t\t\t\t}\n\t\t\t}\n\t\t}, this);\n\t\n\t\t// remove undefined glyphs, dedupe the set and move diacritics at the end\n\t\treturn set.filter(function(e, i, arr) {\n\t\t\treturn e && arr.lastIndexOf(e) === i;\n\t\t});\n\t};\n\t\n\tFont.prototype.getGlyphSubset = function( _set ) {\n\t\treturn _set !== undefined ? this.normalizeSubset( _set ) : this.subset;\n\t};\n\t\n\tFont.prototype.setAlternateFor = function( unicode, glyphName ) {\n\t\tthis.charMap[ unicode ] = this.glyphMap[ glyphName ];\n\t};\n\t\n\tFont.prototype.interpolate = function( font0, font1, coef, set ) {\n\t\tthis.getGlyphSubset( set ).map(function( glyph ) {\n\t\t\tglyph.interpolate(\n\t\t\t\tfont0.glyphMap[glyph.name],\n\t\t\t\tfont1.glyphMap[glyph.name],\n\t\t\t\tcoef\n\t\t\t);\n\t\t});\n\t\n\t\t// TODO: evaluate if taking subsetting into account makes kerning\n\t\t// interpolation faster or slower.\n\t\tif ( this.ot.kerningPairs ) {\n\t\t\tfor ( var i in this.ot.kerningPairs ) {\n\t\t\t\tthis.ot.kerningPairs[i] =\n\t\t\t\t\tfont0.ot.kerningPairs[i] +\n\t\t\t\t\t( font1.ot.kerningPairs[i] - font0.ot.kerningPairs[i] ) * coef;\n\t\t\t}\n\t\t}\n\t\n\t\tthis.ot.ascender =\n\t\t\tfont0.ot.ascender + ( font1.ot.ascender - font0.ot.ascender ) * coef;\n\t\tthis.ot.descender =\n\t\t\tfont0.ot.descender + ( font1.ot.descender - font0.ot.descender ) * coef;\n\t\n\t\treturn this;\n\t};\n\t\n\tFont.prototype.updateSVGData = function( set ) {\n\t\tthis.getGlyphSubset( set ).map(function( glyph ) {\n\t\t\treturn glyph.updateSVGData();\n\t\t});\n\t\n\t\treturn this;\n\t};\n\t\n\tFont.prototype.updateOTCommands = function( set, shouldMerge ) {\n\t\treturn this.updateOT({\n\t\t\tset: set,\n\t\t\tshouldUpdateCommands: true,\n\t\t\tshouldMerge: shouldMerge\n\t\t});\n\t};\n\t\n\tFont.prototype.updateOT = function( args ) {\n\t\tif ( args && args.shouldUpdateCommands ) {\n\t\t\t// the following is required so that the globalMatrix of glyphs\n\t\t\t// is taken into account on each update. I assume this is done in the\n\t\t\t// main thread when calling view.update();\n\t\t\tthis._project._updateVersion++;\n\t\t}\n\t\n\t\tthis.ot.glyphs.glyphs = (\n\t\t\tthis.getGlyphSubset( args && args.set ).reduce(function(o, glyph, i) {\n\t\t\t\tif ( args && args.shouldUpdateCommands ) {\n\t\t\t\t\to[i] = args.shouldMerge ?\n\t\t\t\t\t\tglyph.combineOTCommands( null ) :\n\t\t\t\t\t\tglyph.updateOTCommands( null );\n\t\t\t\t} else {\n\t\t\t\t\to[i] = glyph.ot;\n\t\t\t\t}\n\t\n\t\t\t\treturn o;\n\t\t\t}, {})\n\t\t);\n\t\tthis.ot.glyphs.length = Object.keys(this.ot.glyphs.glyphs).length;\n\t\treturn this;\n\t};\n\t\n\tFont.prototype.toArrayBuffer = function() {\n\t\t// rewrite the postScriptName to remove invalid characters\n\t\t// TODO: this should be fixed in opentype.js\n\t\tthis.ot.names.postScriptName.en = (\n\t\t\tthis.ot.names.postScriptName.en.replace(/[^A-z]/g, '_')\n\t\t);\n\t\n\t\treturn this.ot.toArrayBuffer();\n\t}\n\t\n\tFont.prototype.importOT = function( otFont ) {\n\t\tthis.ot = otFont;\n\t\n\t\tfor ( var i = 0; i < otFont.glyphs.length; ++i ) {\n\t\t\tvar otGlyph = otFont.glyphs.get(i);\n\t\t\tvar glyph = new Glyph({\n\t\t\t\t\tname: otGlyph.name,\n\t\t\t\t\tunicode: otGlyph.unicode\n\t\t\t\t});\n\t\n\t\t\tthis.addGlyph( glyph );\n\t\t\tglyph.importOT( otGlyph );\n\t\t}\n\t\n\t\treturn this;\n\t};\n\t\n\tif ( typeof window === 'object' && window.document ) {\n\t\n\t\tvar _URL = window.URL || window.webkitURL;\n\t\tFont.prototype.addToFonts = document.fonts ?\n\t\t\t// CSS font loading, lightning fast\n\t\t\tfunction( buffer, enFamilyName, noMerge) {\n\t\t\t\t//cancelling in browser merge\n\t\t\t\tclearTimeout(this.mergeTimeout);\n\t\n\t\t\t\tif ( !enFamilyName ) {\n\t\t\t\t\tenFamilyName = this.ot.getEnglishName('fontFamily');\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.fontMap[ enFamilyName ] ) {\n\t\t\t\t\tdocument.fonts.delete( this.fontMap[ enFamilyName ] );\n\t\t\t\t}\n\t\n\t\t\t\tvar fontface = this.fontMap[ enFamilyName ] = (\n\t\t\t\t\tnew window.FontFace(\n\t\t\t\t\t\tenFamilyName,\n\t\t\t\t\t\tbuffer || this.toArrayBuffer()\n\t\t\t\t\t)\n\t\t\t\t);\n\t\n\t\t\t\tif ( fontface.status === 'error' ) {\n\t\t\t\t\tthrow new Error('Fontface is invalid and cannot be displayed');\n\t\t\t\t}\n\t\n\t\t\t\tdocument.fonts.add( fontface );\n\t\n\t\t\t\t//we merge font that haven't been merge\n\t\t\t\tif ( !noMerge ) {\n\t\t\t\t\tvar timeoutRef = this.mergeTimeout = setTimeout(function() {\n\t\t\t\t\tmergeFont(\n\t\t\t\t\t\t'https://merge.prototypo.io',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: 'forbrowserdisplay',\n\t\t\t\t\t\t\ttemplate: 'noidea',\n\t\t\t\t\t\t\tfamily: 'forbrowserdisplay'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'plumin',\n\t\t\t\t\t\tbuffer,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tfunction(mergedBuffer) {\n\t\t\t\t\t\t\tif (timeoutRef === this.mergeTimeout) {\n\t\t\t\t\t\t\t\tthis.addToFonts(mergedBuffer, enFamilyName, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t);\n\t\t\t\t\t}.bind(this), 300);\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\t\t} :\n\t\t\tfunction( buffer, enFamilyName ) {\n\t\t\t\tif ( !enFamilyName ) {\n\t\t\t\t\tenFamilyName = this.ot.getEnglishName('fontFamily');\n\t\t\t\t}\n\t\n\t\t\t\tvar url = _URL.createObjectURL(\n\t\t\t\t\t\tnew Blob(\n\t\t\t\t\t\t\t[ new DataView( buffer || this.toArrayBuffer() ) ],\n\t\t\t\t\t\t\t{ type: 'font/opentype' }\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\n\t\t\t\tif ( this.fontObjectURL ) {\n\t\t\t\t\t_URL.revokeObjectURL( this.fontObjectURL );\n\t\t\t\t\tthis.styleSheet.deleteRule(0);\n\t\t\t\t}\n\t\n\t\t\t\tthis.styleSheet.insertRule(\n\t\t\t\t\t'@font-face { font-family: \"' + enFamilyName + '\";' +\n\t\t\t\t\t'src: url(' + url + '); }',\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\tthis.fontObjectURL = url;\n\t\n\t\t\t\treturn this;\n\t\t\t};\n\t\n\t\tvar a = document.createElement('a');\n\t\n\t\tvar triggerDownload = function( font, arrayBuffer, filename ) {\n\t\t\tvar reader = new FileReader();\n\t\t\tvar enFamilyName = filename || font.ot.getEnglishName('fontFamily');\n\t\n\t\t\treader.onloadend = function() {\n\t\t\t\ta.download = enFamilyName + '.otf';\n\t\t\t\ta.href = reader.result;\n\t\t\t\ta.dispatchEvent(new MouseEvent('click'));\n\t\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\ta.href = '#';\n\t\t\t\t\t_URL.revokeObjectURL( reader.result );\n\t\t\t\t}, 100);\n\t\t\t};\n\t\n\t\t\treader.readAsDataURL(new Blob(\n\t\t\t\t[ new DataView( arrayBuffer || font.toArrayBuffer() ) ],\n\t\t\t\t{ type: 'font/opentype' }\n\t\t\t));\n\t\t};\n\t\n\t\tFont.prototype.download = function( arrayBuffer, name, user, merged ) {\n\t\t\tif ( !merged ) {\n\t\t\t\ttriggerDownload(\n\t\t\t\t\tthis,\n\t\t\t\t\tarrayBuffer,\n\t\t\t\t\tname && ( name.family + ' ' + name.style ) );\n\t\t\t}\n\t\t\t// TODO: replace that with client-side font merging\n\t\t\tif (name && user) {\n\t\t\t\tmergeFont(\n\t\t\t\t\t'https://merge.prototypo.io',\n\t\t\t\t\tname,\n\t\t\t\t\tuser,\n\t\t\t\t\tarrayBuffer,\n\t\t\t\t\tmerged,\n\t\t\t\t\tfunction(bufferToDownload) {\n\t\t\t\t\t\tif ( merged ) {\n\t\t\t\t\t\t\ttriggerDownload( this, bufferToDownload );\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind(this)\n\t\t\t\t);\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\t};\n\t\n\t}\n\t\n\tmodule.exports = Font;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar opentype = __webpack_require__(2),\n\t\tpaper = __webpack_require__(36),\n\t\tOutline = __webpack_require__(41);\n\t\n\tfunction Glyph( args ) {\n\t\tpaper.Group.prototype.constructor.apply( this );\n\t\n\t\tif ( args && typeof args.unicode === 'string' ) {\n\t\t\targs.unicode = args.unicode.charCodeAt(0);\n\t\t}\n\t\n\t\tthis.ot = new opentype.Glyph( args );\n\t\tthis.ot.path = new opentype.Path();\n\t\n\t\tthis.name = args.name;\n\t\t// workaround opentype 'unicode === 0' bug\n\t\tthis.ot.unicode = args.unicode;\n\t\n\t\tthis.addChild( new Outline() );\n\t\t// the second child will hold all components\n\t\tthis.addChild( new paper.Group() );\n\t\t// Should all anchors and parentAnchors also leave in child groups?\n\t\tthis.anchors = ( args && args.anchors ) || [];\n\t\tthis.parentAnchors = ( args && args.parentAnchors ) || [];\n\t\n\t\t// each individual glyph must be explicitely made visible\n\t\tthis.visible = false;\n\t\t// default colors required to display the glyph in a canvas\n\t\tthis.fillColor = new paper.Color(0, 0, 0);\n\t\t// stroke won't be displayed unless strokeWidth is set to 1\n\t\tthis.strokeColor = new paper.Color(0, 0, 0);\n\t\tthis.strokeScaling = false;\n\t}\n\t\n\tGlyph.prototype = Object.create(paper.Group.prototype);\n\tGlyph.prototype.constructor = Glyph;\n\t\n\t// Todo: handle unicode updates\n\tObject.defineProperty(Glyph.prototype, 'unicode', {\n\t\tset: function( code ) {\n\t\t\tthis.ot.unicode = typeof code === 'string' ?\n\t\t\t\tcode.charCodeAt(0) :\n\t\t\t\tcode;\n\t\t},\n\t\tget: function() {\n\t\t\treturn this.ot.unicode;\n\t\t}\n\t});\n\t\n\tObject.defineProperty(Glyph.prototype, 'base', {\n\t\tset: function( code ) {\n\t\t\tthis._base = typeof code === 'string' ?\n\t\t\t\tcode.charCodeAt(0) :\n\t\t\t\tcode;\n\t\t},\n\t\tget: function() {\n\t\t\treturn this._base;\n\t\t}\n\t});\n\t\n\t// alias .advanceWidth to .ot.advanceWidth\n\tObject.defineProperty(Glyph.prototype, 'advanceWidth', {\n\t\tset: function( value ) {\n\t\t\tthis.ot.advanceWidth = value;\n\t\t},\n\t\tget: function() {\n\t\t\treturn this.ot.advanceWidth;\n\t\t}\n\t});\n\t\n\t// proxy .contours to .children[0]\n\tObject.defineProperty( Glyph.prototype, 'contours', {\n\t\tget: function() {\n\t\t\treturn this.children[0].children;\n\t\t}\n\t});\n\t\n\t// proxy .components to .children[1]\n\tObject.defineProperty( Glyph.prototype, 'components', {\n\t\tget: function() {\n\t\t\treturn this.children[1].children;\n\t\t}\n\t});\n\t\n\t// proxy ...Contour[s] methods to children[0]...Child[ren] methods\n\t// and proxy ...Component[s] methods to children[1]...Child[ren] methods\n\tObject.getOwnPropertyNames( paper.Item.prototype ).forEach(function(name) {\n\t\tvar proto = this;\n\t\n\t\t// exclude getters and non-methods\n\t\tif ( Object.getOwnPropertyDescriptor(proto, name).get ||\n\t\t\t\ttypeof proto[name] !== 'function' ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( name.indexOf('Children') !== -1 ) {\n\t\t\tproto[name.replace('Children', 'Contours')] = function() {\n\t\t\t\tproto[name].apply( this.children[0], arguments );\n\t\t\t};\n\t\n\t\t\tproto[name.replace('Children', 'Components')] = function() {\n\t\t\t\tproto[name].apply( this.children[1], arguments );\n\t\t\t};\n\t\n\t\t} else if ( name.indexOf('Child') !== -1 ) {\n\t\t\tproto[name.replace('Child', 'Contour')] = function() {\n\t\t\t\tproto[name].apply( this.children[0], arguments );\n\t\t\t};\n\t\n\t\t\tproto[name.replace('Child', 'Component')] = function() {\n\t\t\t\tproto[name].apply( this.children[1], arguments );\n\t\t\t};\n\t\t}\n\t\n\t}, paper.Item.prototype);\n\t\n\tGlyph.prototype.addAnchor = function( item ) {\n\t\tthis.anchors.push( item );\n\t\treturn item;\n\t};\n\t\n\tGlyph.prototype.addAnchors = function( anchors ) {\n\t\treturn anchors.forEach(function(anchor) {\n\t\t\tthis.addAnchor(anchor);\n\t\t}, this);\n\t};\n\t\n\tGlyph.prototype.addParentAnchor = function( item ) {\n\t\tthis.parentAnchors.push( item );\n\t\treturn item;\n\t};\n\t\n\tGlyph.prototype.addUnicode = function( code ) {\n\t\tthis.ot.addUnicode( code );\n\t\n\t\treturn this;\n\t};\n\t\n\tGlyph.prototype.interpolate = function( glyph0, glyph1, coef ) {\n\t\t// If we added an interpolate method to Group, we'd be able to just\n\t\t// interpolate all this.children directly.\n\t\t// instead we interpolate the outline first\n\t\tthis.children[0].interpolate(\n\t\t\tglyph0.children[0], glyph1.children[0], coef\n\t\t);\n\t\t// and then the components\n\t\tthis.children[1].children.forEach(function(component, j) {\n\t\t\tcomponent.interpolate(\n\t\t\t\tglyph0.children[1].children[j], glyph1.children[1].children[j], coef\n\t\t\t);\n\t\t});\n\t\n\t\tthis.ot.advanceWidth =\n\t\t\tglyph0.ot.advanceWidth +\n\t\t\t( glyph1.ot.advanceWidth - glyph0.ot.advanceWidth ) * coef;\n\t\tthis.ot.leftSideBearing =\n\t\t\tglyph0.ot.leftSideBearing +\n\t\t\t( glyph1.ot.leftSideBearing - glyph0.ot.leftSideBearing ) * coef;\n\t\tthis.ot.xMax =\n\t\t\tglyph0.ot.xMax + ( glyph1.ot.xMax - glyph0.ot.xMax ) * coef;\n\t\tthis.ot.xMin =\n\t\t\tglyph0.ot.xMin + ( glyph1.ot.xMin - glyph0.ot.xMin ) * coef;\n\t\tthis.ot.yMax =\n\t\t\tglyph0.ot.yMax + ( glyph1.ot.yMax - glyph0.ot.yMax ) * coef;\n\t\tthis.ot.yMin =\n\t\t\tglyph0.ot.yMin + ( glyph1.ot.yMin - glyph0.ot.yMin ) * coef;\n\t\n\t\treturn this;\n\t};\n\t\n\tGlyph.prototype.updateSVGData = function( path ) {\n\t\tif ( !path ) {\n\t\t\tthis.svgData = [];\n\t\t\tpath = this.svgData;\n\t\t}\n\t\n\t\tthis.children[0].updateSVGData( path );\n\t\n\t\tthis.children[1].children.forEach(function( component ) {\n\t\t\tcomponent.updateSVGData( path );\n\t\t});\n\t\n\t\treturn this.svgData;\n\t};\n\t\n\tGlyph.prototype.updateOTCommands = function( path ) {\n\t\tif ( !path ) {\n\t\t\tthis.ot.path.commands = [];\n\t\t\tpath = this.ot.path;\n\t\t}\n\t\n\t\tthis.children[0].updateOTCommands( path );\n\t\n\t\tthis.children[1].children.forEach(function( component ) {\n\t\t\tcomponent.updateOTCommands( path );\n\t\t});\n\t\n\t\treturn this.ot;\n\t};\n\t\n\tGlyph.prototype.combineOTCommands = function( path ) {\n\t\tif ( !path ) {\n\t\t\tthis.ot.path.commands = [];\n\t\t\tpath = this.ot.path;\n\t\t}\n\t\n\t\tvar combined = this.combineTo( new Outline() );\n\t\n\t\tif ( combined ) {\n\t\t\t// prototypo.js will make all contours clockwise without this\n\t\t\tcombined.isPrepared = true;\n\t\t\tcombined.updateOTCommands( path );\n\t\t}\n\t\n\t\treturn this.ot;\n\t};\n\t\n\tGlyph.prototype.combineTo = function( outline ) {\n\t\tif ( !outline ) {\n\t\t\toutline = new Outline();\n\t\t}\n\t\n\t\toutline = this.children[0].combineTo( outline );\n\t\n\t\treturn this.children[1].children.reduce(function( outline, component ) {\n\t\t\t// and then combine it to the rest of the glyph\n\t\t\treturn component.combineTo( outline );\n\t\t}, outline);\n\t};\n\t\n\tGlyph.prototype.importOT = function( otGlyph ) {\n\t\tvar current;\n\t\tthis.ot = otGlyph;\n\t\n\t\tif ( !otGlyph.path || !otGlyph.path.commands ) {\n\t\t\treturn this;\n\t\t}\n\t\n\t\tthis.ot.path.commands.forEach(function(command) {\n\t\t\tswitch ( command.type ) {\n\t\t\t\tcase 'M':\n\t\t\t\t\tcurrent = new paper.Path();\n\t\t\t\t\tthis.children[0].addChild( current );\n\t\n\t\t\t\t\tcurrent.moveTo( command );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'L':\n\t\t\t\t\tcurrent.lineTo( command );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'C':\n\t\t\t\t\tcurrent.cubicCurveTo(\n\t\t\t\t\t\t[ command.x1, command.y1 ],\n\t\t\t\t\t\t[ command.x2, command.y2 ],\n\t\t\t\t\t\tcommand\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Q':\n\t\t\t\t\tcurrent.quadraticCurveTo(\n\t\t\t\t\t\t[ command.x1, command.y1 ],\n\t\t\t\t\t\tcommand\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Z':\n\t\t\t\t\t// When the glyph has no contour,\n\t\t\t\t\t// they contain a single Z command in\n\t\t\t\t\t// opentype.js.\n\t\t\t\t\t// TODO: see how we should handle that\n\t\t\t\t\tif ( current ) {\n\t\t\t\t\t\tcurrent.closePath();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}.bind(this));\n\t\n\t\treturn this;\n\t};\n\t\n\tmodule.exports = Glyph;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar paper = __webpack_require__(36);\n\t\n\tvar Outline = paper.CompoundPath;\n\t\n\t// function Outline() {\n\t// \tpaper.CompoundPath.prototype.constructor.apply( this, arguments );\n\t// }\n\t//\n\t// // inehrit CompoundPath\n\t// Outline.prototype = Object.create(paper.CompoundPath.prototype);\n\t// Outline.prototype.constructor = Outline;\n\t\n\t// Fix two problems with CompoundPath#insertChildren:\n\t// - it arbitrarily changes the direction of paths\n\t// - it seems that it doesn't handle CompoundPath arguments\n\tOutline.prototype.insertChildren = function(index, items, _preserve) {\n\t\tif ( Array.isArray( items ) ) {\n\t\t\t// flatten items to handle CompoundPath children\n\t\t\titems = [].concat.apply([], items.map(function(item) {\n\t\t\t\treturn item instanceof paper.Path ? item : item.children;\n\t\t\t}));\n\t\t}\n\t\n\t\treturn paper.Item.prototype.insertChildren.call(\n\t\t\tthis, index, items, _preserve, paper.Path\n\t\t);\n\t};\n\t\n\tOutline.fromPath = function( path ) {\n\t\tvar result = new Outline();\n\t\treturn path._clone( result, false );\n\t};\n\t\n\tOutline.prototype.interpolate = function( outline0, outline1, coef ) {\n\t\tfor (var i = 0, l = this.children.length; i < l; i++) {\n\t\t\t// The number of children should be the same everywhere,\n\t\t\t// but we're going to try our best anyway\n\t\t\tif ( !outline0.children[i] || !outline1.children[i] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\n\t\t\tthis.children[i].interpolate(\n\t\t\t\toutline0.children[i],\n\t\t\t\toutline1.children[i],\n\t\t\t\tcoef\n\t\t\t);\n\t\t}\n\t\n\t\treturn this;\n\t};\n\t\n\tOutline.prototype.updateSVGData = function( path ) {\n\t\tif ( !path ) {\n\t\t\tthis.svgData = [];\n\t\t\tpath = this.svgData;\n\t\t}\n\t\n\t\tthis.children.forEach(function( contour ) {\n\t\t\tcontour.updateSVGData( path );\n\t\t}, this);\n\t\n\t\treturn this.svgData;\n\t};\n\t\n\tOutline.prototype.updateOTCommands = function( path ) {\n\t\tif ( !path ) {\n\t\t\tthis.ot.path.commands = [];\n\t\t\tpath = this.ot.path;\n\t\t}\n\t\n\t\tthis.children.forEach(function( contour ) {\n\t\t\tcontour.updateOTCommands( path );\n\t\t}.bind(this));\n\t\n\t\treturn this.ot;\n\t};\n\t\n\tOutline.prototype.combineTo = function( outline ) {\n\t\treturn this.children.reduce(function( reducing, path ) {\n\t\t\t// ignore empty and open paths\n\t\t\tif ( path.curves.length === 0 || !path.closed ) {\n\t\t\t\treturn reducing;\n\t\t\t}\n\t\n\t\t\tvar tmp = ( reducing == undefined  ?\n\t\t\t\t// when the initial value doesn't exist, use the first path\n\t\t\t\t// (clone it otherwise it's removed from this.children)\n\t\t\t\tpath.clone( false ) :\n\t\t\t\treducing[\n\t\t\t\t\tpath.clockwise === !(path.exportReversed) ? 'unite' : 'subtract'\n\t\t\t\t]( path )\n\t\t\t);\n\t\n\t\t\treturn ( tmp.constructor === paper.Path ?\n\t\t\t\tnew paper.CompoundPath({ children: [ tmp ] }) :\n\t\t\t\ttmp\n\t\t\t);\n\t\n\t\t}, outline);\n\t};\n\t\n\tmodule.exports = Outline;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Code refactored from Mozilla Developer Network:\n\t * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t */\n\t\n\t'use strict';\n\t\n\tfunction assign(target, firstSource) {\n\t  if (target === undefined || target === null) {\n\t    throw new TypeError('Cannot convert first argument to object');\n\t  }\n\t\n\t  var to = Object(target);\n\t  for (var i = 1; i < arguments.length; i++) {\n\t    var nextSource = arguments[i];\n\t    if (nextSource === undefined || nextSource === null) {\n\t      continue;\n\t    }\n\t\n\t    var keysArray = Object.keys(Object(nextSource));\n\t    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n\t      var nextKey = keysArray[nextIndex];\n\t      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\t      if (desc !== undefined && desc.enumerable) {\n\t        to[nextKey] = nextSource[nextKey];\n\t      }\n\t    }\n\t  }\n\t  return to;\n\t}\n\t\n\tfunction polyfill() {\n\t  if (!Object.assign) {\n\t    Object.defineProperty(Object, 'assign', {\n\t      enumerable: false,\n\t      configurable: true,\n\t      writable: true,\n\t      value: assign\n\t    });\n\t  }\n\t}\n\t\n\tmodule.exports = {\n\t  assign: assign,\n\t  polyfill: polyfill\n\t};\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* Extend the Path prototype to add OpenType conversion\n\t * and alias *segments methods and properties to *nodes\n\t */\n\tvar paper = __webpack_require__(36);\n\t\n\tvar proto = paper.PaperScope.prototype.Path.prototype;\n\t\n\t// alias *Segments methods to *Nodes equivalents\n\t[ 'add', 'insert', 'remove' ].forEach(function(name) {\n\t\tproto[name + 'Nodes'] =\n\t\t\tproto[name + 'Segments'];\n\t});\n\t\n\t// alias .segments to .nodes\n\tObject.defineProperties(proto, {\n\t\tnodes: Object.getOwnPropertyDescriptor( proto, 'segments' ),\n\t\tfirstNode: Object.getOwnPropertyDescriptor( proto, 'firstSegment' ),\n\t\tlastNode: Object.getOwnPropertyDescriptor( proto, 'lastSegment' )\n\t});\n\t\n\tproto._updateData = function( data, pushSimple, pushBezier ) {\n\t\tif ( this.visible === false || this.curves.length === 0) {\n\t\t\treturn data;\n\t\t}\n\t\n\t\t// prototypo needs to be able to change the direction of the updated data.\n\t\tvar reverse = this.exportReversed,\n\t\t\tcurves = this.curves,\n\t\t\tlength = curves.length,\n\t\t\tmatrix = this.globalMatrix,\n\t\t\tstart =\n\t\t\t\tcurves[ reverse ? length - 1 : 0 ][ 'point' + ( reverse ? 2 : 1 ) ]\n\t\t\t\t\t.transform( matrix );\n\t\n\t\tpushSimple(\n\t\t\t'M',\n\t\t\tMath.round( start.x ) || 0,\n\t\t\tMath.round( start.y ) || 0\n\t\t);\n\t\n\t\tfor ( var i = -1, l = curves.length; ++i < l; ) {\n\t\t\tvar curve = curves[ reverse ? l - 1 - i : i ],\n\t\t\t\tend = curve['point' + ( reverse ? 1 : 2 ) ].transform( matrix );\n\t\n\t\t\tif ( curve.isStraight() ) {\n\t\t\t\tpushSimple(\n\t\t\t\t\t'L',\n\t\t\t\t\tMath.round( end.x ) || 0,\n\t\t\t\t\tMath.round( end.y ) || 0\n\t\t\t\t);\n\t\n\t\t\t} else {\n\t\t\t\tvar ctrl1 = new paper.Point(\n\t\t\t\t\t\tcurve.point1.x + curve.handle1.x,\n\t\t\t\t\t\tcurve.point1.y + curve.handle1.y\n\t\t\t\t\t).transform( matrix ),\n\t\t\t\t\tctrl2 = new paper.Point(\n\t\t\t\t\t\tcurve.point2.x + curve.handle2.x,\n\t\t\t\t\t\tcurve.point2.y + curve.handle2.y\n\t\t\t\t\t).transform( matrix );\n\t\n\t\t\t\tif ( reverse ) {\n\t\t\t\t\tpushBezier(\n\t\t\t\t\t\t'C',\n\t\t\t\t\t\tMath.round( ctrl2.x ) || 0,\n\t\t\t\t\t\tMath.round( ctrl2.y ) || 0,\n\t\t\t\t\t\tMath.round( ctrl1.x ) || 0,\n\t\t\t\t\t\tMath.round( ctrl1.y ) || 0,\n\t\t\t\t\t\tMath.round( end.x ) || 0,\n\t\t\t\t\t\tMath.round( end.y ) || 0\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tpushBezier(\n\t\t\t\t\t\t'C',\n\t\t\t\t\t\tMath.round( ctrl1.x ) || 0,\n\t\t\t\t\t\tMath.round( ctrl1.y ) || 0,\n\t\t\t\t\t\tMath.round( ctrl2.x ) || 0,\n\t\t\t\t\t\tMath.round( ctrl2.y ) || 0,\n\t\t\t\t\t\tMath.round( end.x ) || 0,\n\t\t\t\t\t\tMath.round( end.y ) || 0\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif ( this.closed ) {\n\t\t\tpushSimple('Z');\n\t\t}\n\t\n\t\treturn data;\n\t};\n\t\n\tproto.updateOTCommands = function( data ) {\n\t\treturn this._updateData(\n\t\t\tdata,\n\t\t\tfunction pushSimple() {\n\t\t\t\tdata.commands.push({\n\t\t\t\t\ttype: arguments[0],\n\t\t\t\t\tx: arguments[1],\n\t\t\t\t\ty: arguments[2]\n\t\t\t\t});\n\t\t\t},\n\t\t\tfunction pushBezier() {\n\t\t\t\tdata.commands.push({\n\t\t\t\t\ttype: arguments[0],\n\t\t\t\t\tx1: arguments[1],\n\t\t\t\t\ty1: arguments[2],\n\t\t\t\t\tx2: arguments[3],\n\t\t\t\t\ty2: arguments[4],\n\t\t\t\t\tx: arguments[5],\n\t\t\t\t\ty: arguments[6]\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t};\n\t\n\tproto.updateSVGData = function( data ) {\n\t\treturn this._updateData(\n\t\t\tdata,\n\t\t\tfunction pushSimple() {\n\t\t\t\tdata.push.apply( data, arguments );\n\t\t\t},\n\t\t\tfunction pushBezier() {\n\t\t\t\tdata.push.apply( data, arguments );\n\t\t\t}\n\t\t);\n\t};\n\t\n\tmodule.exports = paper.Path;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar paper = __webpack_require__(36);\n\t\n\tObject.defineProperty( paper.Segment.prototype, 'x', {\n\t\tget: function() {\n\t\t\treturn this.point.x;\n\t\t},\n\t\tset: function( value ) {\n\t\t\tthis.point.x = value;\n\t\t}\n\t});\n\t\n\tObject.defineProperty( paper.Segment.prototype, 'y', {\n\t\tget: function() {\n\t\t\treturn this.point.y;\n\t\t},\n\t\tset: function( value ) {\n\t\t\tthis.point.y = value;\n\t\t}\n\t});\n\t\n\tmodule.exports = paper.Segment;\n\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=plumin.js.map\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43).Buffer))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar listCacheClear = __webpack_require__(54),\n    listCacheDelete = __webpack_require__(55),\n    listCacheGet = __webpack_require__(56),\n    listCacheHas = __webpack_require__(57),\n    listCacheSet = __webpack_require__(58);\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar eq = __webpack_require__(26);\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar root = __webpack_require__(0);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getNative = __webpack_require__(2);\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isKeyable = __webpack_require__(78);\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGetTag = __webpack_require__(3),\n    isObjectLike = __webpack_require__(4);\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isSymbol = __webpack_require__(12);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = assign;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getNative = __webpack_require__(2),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar mapCacheClear = __webpack_require__(70),\n    mapCacheDelete = __webpack_require__(77),\n    mapCacheGet = __webpack_require__(79),\n    mapCacheHas = __webpack_require__(80),\n    mapCacheSet = __webpack_require__(81);\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayLikeKeys = __webpack_require__(99),\n    baseKeys = __webpack_require__(106),\n    isArrayLike = __webpack_require__(36);\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isArray = __webpack_require__(1),\n    isSymbol = __webpack_require__(12);\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), __webpack_require__(16)(module)))\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar plumin = __webpack_require__(5),\n    DepTree = __webpack_require__(47),\n    cloneDeep = __webpack_require__(22),\n    assign = __webpack_require__(15),\n    updateUtils = __webpack_require__(48);\n\nvar paper = plumin.paper,\n    Utils = updateUtils,\n    _ = {\n\tcloneDeep: cloneDeep,\n\tassign: assign\n};\n\n// convert the glyph source from the ufo object model to the paper object model\n// this is the inverse operation done by jsufonify\nUtils.ufoToPaper = function (src) {\n\tif (src.parameter) {\n\t\tsrc.parameters = src.parameter;\n\t\tdelete src.parameter;\n\t}\n\n\tif (src.anchor) {\n\t\tsrc.anchors = src.anchor;\n\t\tdelete src.anchor;\n\t}\n\n\tif (src.outline && src.outline.contour) {\n\t\tsrc.contours = src.outline.contour;\n\t\tdelete src.outline.contour;\n\t}\n\n\tif (src.contours) {\n\t\tsrc.contours.forEach(function (contour) {\n\t\t\tif (contour.point) {\n\t\t\t\tcontour.nodes = contour.point;\n\t\t\t\tdelete contour.point;\n\t\t\t}\n\t\t});\n\t}\n\n\tif (src.outline && src.outline.component) {\n\t\tsrc.components = src.outline.component;\n\n\t\tsrc.components.forEach(function (component) {\n\t\t\tif (component.anchor) {\n\t\t\t\tcomponent.parentAnchors = component.anchor;\n\t\t\t\tdelete component.anchor;\n\t\t\t}\n\n\t\t\tif (component.parameter) {\n\t\t\t\tcomponent.parentParameters = component.parameter;\n\t\t\t\tdelete component.parameter;\n\t\t\t}\n\t\t});\n\n\t\tdelete src.outline.component;\n\t}\n\n\tdelete src.outline;\n\n\tif (src.lib && src.lib.transforms) {\n\t\tsrc.transforms = src.lib.transforms;\n\t\tdelete src.lib.transforms;\n\t}\n\n\tif (src.lib && src.lib.transformOrigin) {\n\t\tsrc.transformOrigin = src.lib.transformOrigin;\n\t\tdelete src.lib.transformOrigin;\n\t}\n\n\tif (src.lib && src.lib.parameters) {\n\t\tsrc.parameters = src.lib.parameters;\n\t\tdelete src.lib.parameters;\n\t}\n\n\tif (src.lib && src.lib.solvingOrder) {\n\t\tsrc.solvingOrder = src.lib.solvingOrder;\n\t\tdelete src.lib.solvingOrder;\n\t}\n\n\treturn src;\n};\n\nUtils.fontFromSrc = function (src) {\n\t// TODO: this, block is only here for backward compat\n\t// and should be removed at some point in the future\n\tif (!src.fontinfo) {\n\t\tsrc.fontinfo = src.info;\n\t}\n\n\tvar font = new paper.Font(_.assign({}, src.fontinfo, {\n\t\t// The font needs to be initialized with valid ascender/descender values\n\t\tascender: 1,\n\t\tdescender: -1\n\t}));\n\n\tfont.src = Utils.ufoToPaper(src);\n\n\tvar filteredSrc = _.assign({}, src);\n\n\tdelete filteredSrc.controls;\n\tdelete filteredSrc.presets;\n\tdelete filteredSrc.glyphs;\n\n\tUtils.createUpdaters(filteredSrc, 'font_' + src.fontinfo.familyName);\n\n\tfont.parameters = {};\n\tUtils.mergeStatic(font.parameters, font.src.parameters);\n\n\t// solvingOrder might be already available (if this is a subcomponent,\n\t// or precomputed in a worker)\n\tfont.solvingOrder = font.src.solvingOrder;\n\n\tif (!font.solvingOrder) {\n\t\tfont.solvingOrder = filteredSrc.solvingOrder = Utils.solveDependencyTree(font, filteredSrc);\n\t}\n\n\treturn font;\n};\n\n// create Glyph instance and all its child items: anchors, contours\n// and components\n// var wmm = typeof WeakMap === 'function' && new WeakMap();\nUtils.glyphFromSrc = function (src, fontSrc, naive, embed) {\n\tvar glyph = new paper.Glyph({\n\t\tname: src.name,\n\t\tunicode: src.unicode\n\t});\n\n\t// Clone glyph src to allow altering it without impacting components srcs.\n\tglyph.src = _.cloneDeep(src);\n\t// turn ._operation strings to ._updaters functions\n\t// TODO: restore sourceURL pragma for debugging.\n\t// this should impact the way results are memoized\n\tUtils.createUpdaters(glyph.src /* , 'glyphs/glyph_' + name*/);\n\tUtils.mergeStatic(glyph, glyph.src);\n\n\t// this will be used to hold local parameters that will be merged with\n\t// the font parameters\n\tglyph.parameters = {};\n\tUtils.mergeStatic(glyph.parameters, glyph.src.parameters);\n\n\t// solvingOrder might be already available (if this is a subcomponent,\n\t// or precomputed in a worker)\n\tglyph.solvingOrder = glyph.src.solvingOrder;\n\n\t(glyph.src.anchors || []).forEach(function (anchorSrc) {\n\t\tvar anchor = new paper.Node();\n\n\t\tanchor.src = anchorSrc;\n\t\tUtils.mergeStatic(anchor, anchorSrc);\n\n\t\tglyph.addAnchor(anchor);\n\t});\n\n\t(glyph.src.contours || []).forEach(function (contourSrc, contourIdx) {\n\t\tvar contour = new paper.Path();\n\n\t\tcontour.src = contourSrc;\n\t\tUtils.mergeStatic(contour, contourSrc);\n\n\t\tglyph.addContour(contour);\n\n\t\t// TODO: handle oncurve/offcurve points\n\t\tcontourSrc.nodes.forEach(function (nodeSrc, nodeIdx) {\n\t\t\tvar node = new paper.Node();\n\n\t\t\tnode.src = nodeSrc;\n\t\t\tUtils.mergeStatic(node, nodeSrc);\n\t\t\tnode.contourIdx = contourIdx;\n\t\t\tnode.nodeIdx = nodeIdx;\n\n\t\t\tcontour.add(node);\n\t\t});\n\t});\n\n\tif (!glyph.src.components) {\n\t\treturn glyph;\n\t}\n\n\tglyph.componentLists = {};\n\n\t// components can only be embedded once all glyphs have been generated\n\t// from source\n\tglyph.embedComponents = function () {\n\t\tglyph.src.components.forEach(function (componentSrc) {\n\t\t\tif (Array.isArray(componentSrc.base)) {\n\t\t\t\tglyph.componentLists[componentSrc.id] = componentSrc.base;\n\t\t\t\tUtils.selectGlyphComponent(glyph, componentSrc, componentSrc.base[0], fontSrc, naive, componentSrc.id);\n\t\t\t} else {\n\t\t\t\tUtils.selectGlyphComponent(glyph, componentSrc, componentSrc.base, fontSrc, naive);\n\t\t\t}\n\t\t});\n\n\t\tdelete glyph.embedComponents;\n\t};\n\n\tif (embed) {\n\t\tglyph.embedComponents();\n\t}\n\n\treturn glyph;\n};\n\nUtils.selectGlyphComponent = function (glyph, componentSrc, componentName, fontSrc, naive, id, index) {\n\tvar component = Utils.glyphFromSrc(fontSrc.glyphs[componentName], fontSrc, naive,\n\t// components' subcomponents can be embedded immediatly\n\ttrue);\n\n\tcomponent.parentParameters = {};\n\tUtils.mergeStatic(component.parentParameters, componentSrc.parentParameters);\n\n\tnaive.annotator(component);\n\tcomponent.componentId = id;\n\tcomponent.chosen = componentName;\n\tcomponent.multiple = Array.isArray(componentSrc.base);\n\tif (index === undefined) {\n\t\tglyph.addComponent(component);\n\t} else {\n\t\tif (glyph.components[index].optionPoint) {\n\t\t\tglyph.components[index].optionPoint.remove();\n\t\t}\n\t\tglyph.components[index].replaceWith(component);\n\t}\n\n\t(componentSrc.parentAnchors || []).forEach(function (anchorSrc) {\n\t\tvar anchor = new paper.Node();\n\n\t\tanchor.src = anchorSrc;\n\t\tUtils.mergeStatic(anchor, anchorSrc);\n\n\t\tcomponent.addParentAnchor(anchor);\n\t});\n};\n\n// build a full cursor from arguments\n// adds 'contours' and 'nodes' automagically when arguments start with a number\nUtils.cursor = function () {\n\tvar cursor = [];\n\n\tfor (var i = -1; ++i < arguments.length;) {\n\t\tif (i === 0 && typeof arguments[0] === 'number') {\n\t\t\tcursor.push('contours');\n\t\t}\n\t\tif (i === 1 && typeof arguments[0] === 'number') {\n\t\t\tcursor.push('nodes');\n\t\t}\n\t\tcursor.push(arguments[i]);\n\t}\n\n\treturn cursor.join('.');\n};\n\nUtils.propFromCursor = function (cursor, context, length) {\n\tif (length === undefined) {\n\t\tlength = cursor.length;\n\t}\n\n\tfor (var i = -1; ++i < length;) {\n\t\tcontext = context[cursor[i]];\n\t}\n\n\treturn context;\n};\n\nUtils.mergeStatic = function (obj, src) {\n\tfor (var i in src) {\n\t\tif (_typeof(src[i]) !== 'object') {\n\t\t\tobj[i] = src[i];\n\n\t\t\t// props that have empty dependencies and params are static\n\t\t} else if (src[i]._dependencies && src[i]._dependencies.length === 0 && (!src[i]._parameters || src[i]._parameters.length === 0) && src[i]._updaters) {\n\t\t\tobj[i] = src[i]._updaters[0].apply(obj, [null, null, null, null, Utils]);\n\n\t\t\tdelete src[i];\n\t\t}\n\t}\n};\n\nUtils.createUpdaters = function (leaf, path) {\n\tif (leaf.constructor === Object && leaf._operation) {\n\t\tleaf._updaters = [Utils.createUpdater(leaf, path)];\n\t} else if (leaf.constructor === Object) {\n\t\tfor (var i in leaf) {\n\t\t\tUtils.createUpdaters(leaf[i], path + '.' + i);\n\t\t}\n\t} else if (leaf.constructor === Array) {\n\t\tleaf.forEach(function (child, j) {\n\t\t\tUtils.createUpdaters(child, path + '.' + j);\n\t\t});\n\t}\n};\n\nUtils.updaterCache = {};\nUtils.createUpdater = function (leaf /* , path*/) {\n\tvar sOperation = leaf._operation.toString(),\n\t    cacheKey = (leaf.parameters || []).join() + '#' + sOperation;\n\n\tif (cacheKey in Utils.updaterCache) {\n\t\treturn Utils.updaterCache[cacheKey];\n\t}\n\n\tUtils.updaterCache[cacheKey] = Function.apply(undefined, _toConsumableArray(['propName', 'contours', 'anchors', 'parentAnchors', 'Utils'].concat(leaf._parameters || []).concat((typeof leaf._operation === 'string' && leaf._operation.indexOf('return ') === -1 ? 'return ' : '') +\n\t// The operation might be wrapped in a function (e.g. multi-\n\t// line code for debugging purpose). In this case, return\n\t// must be explicit\n\tsOperation\n\t// [\\s\\S] need to be used instead of . because\n\t// javascript doesn't have a dotall flag (s)\n\t.replace(/^function\\s*\\(\\)\\s*\\{([\\s\\S]*?)\\}$/, '$1').trim() /* +\n                                                             // add sourceURL pragma to help debugging\n                                                             // TODO: restore sourceURL pragma if it proves necessary\n                                                             '\\n\\n//# sourceURL=' + path*/\n\t)));\n\n\treturn Utils.updaterCache[cacheKey];\n};\n\nUtils.solveDependencyTree = function (leaf, src) {\n\tvar depTree = Utils.dependencyTree(src || leaf.src, null),\n\t    order = depTree.resolve().map(function (cursor) {\n\t\treturn { cursor: cursor.split('.') };\n\t}),\n\t    simplified = Utils.simplifyResolutionOrder(leaf, order);\n\n\treturn simplified;\n};\n\nUtils.dependencyTree = function (parentSrc, cursor, depTree) {\n\tif (!depTree) {\n\t\tdepTree = new DepTree();\n\t}\n\n\tObject.keys(parentSrc).forEach(function (i) {\n\t\t// don't inspect local parameters, private properties and non-object\n\t\tif (i === 'parameters' || i.indexOf('_') === 0 || _typeof(parentSrc[i]) !== 'object') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar leafSrc = parentSrc[i],\n\t\t    currCursor = cursor ? cursor + '.' + i : i;\n\n\t\tif (leafSrc._updaters && leafSrc._updaters.length || leafSrc._dependencies && leafSrc._dependencies.length) {\n\t\t\tdepTree.add(currCursor, leafSrc._dependencies.filter(function (dep) {\n\t\t\t\treturn (\n\t\t\t\t\t// parentAnchors are always here when you need them\n\t\t\t\t\t!/^parentAnchors/.test(dep)\n\t\t\t\t);\n\t\t\t}));\n\t\t}\n\n\t\tif (!leafSrc._operation) {\n\t\t\tUtils.dependencyTree(leafSrc, currCursor, depTree);\n\t\t}\n\t});\n\n\treturn depTree;\n};\n\n// Simplify resolution order by removing cursors that don't point to objects\n// with updater functions\nUtils.simplifyResolutionOrder = function (leaf, depTree) {\n\treturn depTree.filter(function (cursor) {\n\t\tvar src = Utils.propFromCursor(cursor.cursor, leaf.src);\n\n\t\treturn src && src._updaters;\n\t});\n};\n\nvar rdeg = /deg$/;\n\nUtils.transformsToMatrix = function (transforms, origin) {\n\tvar prev = new Float32Array(6),\n\t    curr = new Float32Array(6),\n\t    rslt = new Float32Array([1, 0, 0, 1, 0, 0]);\n\n\tif (origin && Array.isArray(origin)) {\n\t\ttransforms.unshift(['translate', origin[0], origin[1]]);\n\t\ttransforms.push(['translate', -origin[0], -origin[1]]);\n\t} else if (origin) {\n\t\ttransforms.unshift(['translate', origin.x, origin.y]);\n\t\ttransforms.push(['translate', -origin.x, -origin.y]);\n\t}\n\n\ttransforms.forEach(function (transform) {\n\t\tcurr[0] = curr[3] = 1;\n\t\tcurr[1] = curr[2] = curr[4] = curr[5] = 0;\n\n\t\t// convert degrees to radian\n\t\tfor (var i = 1; i < transform.length; i++) {\n\t\t\tif (transform[i] && typeof transform[i] === 'string' && rdeg.test(transform[i])) {\n\t\t\t\ttransform[i] = parseFloat(transform[i]) * (Math.PI * 2 / 360);\n\t\t\t}\n\t\t}\n\n\t\tswitch (transform[0]) {\n\t\t\tcase 'translateX':\n\t\t\t\tcurr[4] = transform[1];\n\t\t\t\tbreak;\n\n\t\t\tcase 'translateY':\n\t\t\t\tcurr[5] = transform[1];\n\t\t\t\tbreak;\n\n\t\t\tcase 'translate':\n\t\t\t\tcurr[4] = transform[1];\n\t\t\t\tcurr[5] = transform[2] || 0;\n\t\t\t\tbreak;\n\n\t\t\tcase 'rotate':\n\t\t\t\tcurr[0] = Math.cos(transform[1]);\n\t\t\t\tcurr[1] = Math.sin(transform[1]);\n\t\t\t\tcurr[2] = -curr[1];\n\t\t\t\tcurr[3] = curr[0];\n\t\t\t\tbreak;\n\n\t\t\tcase 'scaleX':\n\t\t\t\tcurr[0] = transform[1];\n\t\t\t\tbreak;\n\n\t\t\tcase 'scaleY':\n\t\t\t\tcurr[3] = transform[1];\n\t\t\t\tbreak;\n\n\t\t\tcase 'scale':\n\t\t\t\tcurr[0] = transform[1];\n\t\t\t\tcurr[3] = transform.length > 2 ? transform[2] : transform[1];\n\t\t\t\tbreak;\n\n\t\t\tcase 'skewX':\n\t\t\t\t// stop parsing transform when encountering skewX(90)\n\t\t\t\t// see http://stackoverflow.com/questions/21094958/how-to-deal-with-infinity-in-a-2d-matrix\n\t\t\t\ttransform[1] %= 2 * Math.PI;\n\t\t\t\tif (transform[1] === Math.PI / 2 || transform[1] === -Math.PI / 2) {\n\t\t\t\t\treturn rslt;\n\t\t\t\t}\n\t\t\t\tcurr[2] = Math.tan(transform[1]);\n\t\t\t\tbreak;\n\n\t\t\tcase 'skewY':\n\t\t\t\ttransform[1] %= 2 * Math.PI;\n\t\t\t\tif (transform[1] === Math.PI / 2 || transform[1] === -Math.PI / 2) {\n\t\t\t\t\treturn rslt;\n\t\t\t\t}\n\t\t\t\tcurr[1] = Math.tan(transform[1]);\n\t\t\t\tbreak;\n\n\t\t\tcase 'matrix':\n\t\t\t\tcurr[0] = transform[1];\n\t\t\t\tcurr[1] = transform[2];\n\t\t\t\tcurr[2] = transform[3];\n\t\t\t\tcurr[3] = transform[4];\n\t\t\t\tcurr[4] = transform[5];\n\t\t\t\tcurr[5] = transform[6];\n\t\t\t\tbreak;\n\t\t}\n\n\t\tprev[0] = rslt[0];\n\t\tprev[1] = rslt[1];\n\t\tprev[2] = rslt[2];\n\t\tprev[3] = rslt[3];\n\t\tprev[4] = rslt[4];\n\t\tprev[5] = rslt[5];\n\n\t\trslt[0] = prev[0] * curr[0] + prev[2] * curr[1];\n\t\trslt[1] = prev[1] * curr[0] + prev[3] * curr[1];\n\t\trslt[2] = (prev[0] * curr[2] || 0) + prev[2] * curr[3];\n\t\trslt[3] = (prev[1] * curr[2] || 0) + prev[3] * curr[3];\n\t\trslt[4] = prev[0] * curr[4] + prev[2] * curr[5] + prev[4];\n\t\trslt[5] = prev[1] * curr[4] + prev[3] * curr[5] + prev[5];\n\t});\n\n\treturn new paper.Matrix(rslt[0], rslt[1], rslt[2], rslt[3], rslt[4], rslt[5]);\n};\n\nUtils.updateParameters = function (leaf, params) {\n\tvar paramsToUpdate = leaf.src && leaf.src.parameters || [];\n\n\tif (leaf.parent && leaf.parent.src) {\n\t\tparamsToUpdate = _.assign([], leaf.parent.src.parameters, paramsToUpdate);\n\t}\n\n\tObject.keys(leaf.src && paramsToUpdate || []).forEach(function (name) {\n\t\tvar src = paramsToUpdate[name];\n\n\t\tparams[name] = src._updaters ? src._updaters[0].apply(null, [name, [], [], leaf.parentAnchors, Utils].concat((src._parameters || []).map(function (_name) {\n\t\t\treturn params[_name];\n\t\t}))) : src;\n\t});\n};\n\nUtils.updateIndividualParameters = function (leaf, params) {\n\tObject.keys(leaf.src && leaf.src.parameters || []).forEach(function (name) {\n\t\tvar src = leaf.src.parameters[name];\n\n\t\tif (params.indiv_group_param) {\n\t\t\tObject.keys(params.indiv_group_param).forEach(function (groupName) {\n\t\t\t\tvar needed = false;\n\t\t\t\tvar group = params.indiv_group_param[groupName];\n\n\t\t\t\tfunction handleGroup(_name) {\n\t\t\t\t\treturn group[_name + '_rel'] ? group[_name + '_rel'].state === 'relative' ? group[_name + '_rel'].value * params[_name] : group[_name + '_rel'].value + params[_name] : params[_name];\n\t\t\t\t}\n\n\t\t\t\tif (src._parameters) {\n\t\t\t\t\tsrc._parameters.forEach(function (parameter) {\n\t\t\t\t\t\tneeded = needed || group[parameter + '_rel'];\n\t\t\t\t\t});\n\n\t\t\t\t\tif (needed) {\n\t\t\t\t\t\tgroup[name] = src._updaters ? src._updaters[0].apply(null, [name, [], [], leaf.parentAnchors, Utils].concat((src._parameters || []).map(handleGroup))) : src;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n\nUtils.updateProperties = function (leaf, params, erroredPreviously) {\n\tif (!leaf.solvingOrder) {\n\t\treturn;\n\t}\n\tvar errored = void 0;\n\n\t// don't use forEach here as we might add items to the array during the loop\n\tfor (var i = 0; i < leaf.solvingOrder.length; i++) {\n\t\tvar _cursor = leaf.solvingOrder[i],\n\t\t    cursor = _cursor.cursor,\n\t\t    propName = cursor[cursor.length - 1],\n\t\t    src = _cursor.src || (_cursor.src = Utils.propFromCursor(cursor, leaf.src)),\n\t\t    obj = _cursor.obj || (_cursor.obj = Utils.propFromCursor(cursor, leaf, cursor.length - 1)),\n\n\t\t// TODO: one day we could allow multiple _updaters\n\t\tresult;\n\n\t\tif (src && src._updaters) {\n\t\t\ttry {\n\t\t\t\tresult = src._updaters[0].apply(obj, [propName, leaf.contours, leaf.anchors, leaf.parentAnchors, Utils].concat((src._parameters || []).map(function (_name) {\n\t\t\t\t\tif (!(_name in params)) {\n\t\t\t\t\t\t/* #if dev */\n\t\t\t\t\t\t/* eslint-disable no-console */\n\t\t\t\t\t\tconsole.warn('undefined parameter', _name, 'used in property', cursor.join('.'), 'from component', leaf.name);\n\t\t\t\t\t\t/* eslint-enable no-console */\n\t\t\t\t\t\t/* #end */\n\t\t\t\t\t}\n\t\t\t\t\treturn params[_name];\n\t\t\t\t})));\n\n\t\t\t\tif (typeof result === 'number' && isNaN(result)) {\n\t\t\t\t\t/* #if dev */\n\t\t\t\t\t/* eslint-disable no-console */\n\t\t\t\t\tconsole.warn('NaN returned by property', cursor.join('.'), 'from component', leaf.name);\n\t\t\t\t\t/* eslint-enable no-console */\n\t\t\t\t\t/* #end */\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t/* #if dev */\n\t\t\t\t/* eslint-disable no-console */\n\t\t\t\tconsole.warn('Could not update property', cursor.join('.'), 'from component', leaf.name, e);\n\t\t\t\t/* eslint-enable no-console */\n\t\t\t\t/* #end */\n\n\t\t\t\t// add the failing properties at the end of the solvingOrder\n\t\t\t\tleaf.solvingOrder.push(_cursor);\n\t\t\t\terrored = true;\n\t\t\t}\n\t\t}\n\n\t\t// Assume that updaters returning undefined have their own\n\t\t// assignment logic\n\t\tif (result !== undefined) {\n\t\t\tif (params.manualChanges && params.manualChanges.cursors) {\n\t\t\t\tvar cursorName = cursor.join('.');\n\t\t\t\tvar changes = params.manualChanges.cursors[cursorName];\n\n\t\t\t\tif (typeof changes === 'number') {\n\t\t\t\t\tif (typeof result === 'string') {\n\t\t\t\t\t\tresult = parseFloat(result) + changes / Math.PI * 180 + 'deg';\n\t\t\t\t\t} else if (typeof result === 'number') {\n\t\t\t\t\t\tresult += changes;\n\t\t\t\t\t}\n\t\t\t\t} else if ((typeof changes === 'undefined' ? 'undefined' : _typeof(changes)) === 'object') {\n\t\t\t\t\tObject.keys(changes).forEach(function (key) {\n\t\t\t\t\t\tif (result.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tif (key !== 'width') {\n\t\t\t\t\t\t\t\tif (typeof result[key] === 'string') {\n\t\t\t\t\t\t\t\t\tresult[key] = parseFloat(result[key]) + changes[key] / Math.PI * 180 + 'deg';\n\t\t\t\t\t\t\t\t} else if (typeof result[key] === 'number') {\n\t\t\t\t\t\t\t\t\tresult[key] += changes[key];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult[key] *= 1 + changes[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdelete params.manualChanges.cursors[cursorName];\n\t\t\t}\n\t\t\tobj[propName] = result;\n\t\t}\n\t}\n\n\tvar cursorKeys = params.manualChanges && params.manualChanges.cursors ? Object.keys(params.manualChanges.cursors) : [];\n\n\tif (cursorKeys.length > 0) {\n\t\tfor (i = 0; i < cursorKeys.length; i++) {\n\t\t\tcursor = cursorKeys[i].split('.');\n\t\t\tvar tmpObj = Utils.propFromCursor(cursor, leaf, cursor.length - 1);\n\t\t\tvar tmpSrc;\n\n\t\t\tif (tmpObj.oldUpdaters && tmpObj.oldUpdaters[cursor[cursor.length - 1]]) {\n\t\t\t\ttmpSrc = tmpObj.oldUpdaters[cursor[cursor.length - 1]];\n\t\t\t} else {\n\t\t\t\ttmpSrc = {\n\t\t\t\t\t_updaters: [Utils.createUpdater({\n\t\t\t\t\t\t_operation: JSON.stringify(tmpObj[cursor[cursor.length - 1]] || 0)\n\t\t\t\t\t})]\n\t\t\t\t};\n\t\t\t\ttmpObj.oldUpdaters = tmpObj.oldUpdaters || {};\n\t\t\t\ttmpObj.oldUpdaters[cursor[cursor.length - 1]] = tmpSrc;\n\t\t\t}\n\t\t\tvar newCursor = {\n\t\t\t\tcursor: cursor,\n\t\t\t\tobj: tmpObj,\n\t\t\t\tsrc: tmpSrc,\n\t\t\t\tmanual: true\n\t\t\t};\n\n\t\t\tleaf.solvingOrder.unshift(newCursor);\n\t\t\tparams.manualChanges.dirty--;\n\t\t}\n\t\terrored = true;\n\t\terroredPreviously = false;\n\t}\n\n\t// If one update errored, we're going to try once more, hoping things will\n\t// get resolved on the second pass.\n\tif (errored && !erroredPreviously) {\n\t\tUtils.updateProperties(leaf, params, true);\n\n\t\t// any error on the second try will cause it to throw\n\t} else if (errored && erroredPreviously) {\n\t\tthrow 'Too much update errors, giving up.';\n\t}\n};\n\n// The ascender and descender properties must be set to their maximum\n// values accross the individualized params groups\nUtils.updateXscenderProperties = function (font, params) {\n\tif (params.indiv_group_param) {\n\t\tvar xscenderProperties = ['ascender', 'descender', 'cap-height', 'descendent-height'];\n\n\t\txscenderProperties.forEach(function (name) {\n\t\t\tvar src = font.src.fontinfo[name];\n\n\t\t\tObject.keys(params.indiv_group_param).forEach(function (groupName) {\n\t\t\t\tvar group = params.indiv_group_param[groupName];\n\n\t\t\t\tvar sign = font.ot[name] > 0 ? 1 : -1;\n\n\t\t\t\tfont.ot[name] = sign * Math.max(Math.abs(font.ot[name]), Math.abs(src._updaters[0].apply(font.ot, [name, null, null, null, Utils].concat((src._parameters || []).map(function (_name) {\n\t\t\t\t\treturn group[_name] || params[_name];\n\t\t\t\t})))));\n\t\t\t});\n\t\t});\n\t}\n};\n\nmodule.exports = Utils;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseMatches = __webpack_require__(52),\n    baseMatchesProperty = __webpack_require__(116),\n    identity = __webpack_require__(127),\n    isArray = __webpack_require__(1),\n    property = __webpack_require__(128);\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ListCache = __webpack_require__(6),\n    stackClear = __webpack_require__(59),\n    stackDelete = __webpack_require__(60),\n    stackGet = __webpack_require__(61),\n    stackHas = __webpack_require__(62),\n    stackSet = __webpack_require__(63);\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGetTag = __webpack_require__(3),\n    isObject = __webpack_require__(9);\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsEqualDeep = __webpack_require__(82),\n    isObjectLike = __webpack_require__(4);\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar SetCache = __webpack_require__(83),\n    arraySome = __webpack_require__(86),\n    cacheHas = __webpack_require__(87);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsArguments = __webpack_require__(101),\n    isObjectLike = __webpack_require__(4);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(0),\n    stubFalse = __webpack_require__(102);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)(module)))\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsTypedArray = __webpack_require__(103),\n    baseUnary = __webpack_require__(104),\n    nodeUtil = __webpack_require__(105);\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isFunction = __webpack_require__(27),\n    isLength = __webpack_require__(20);\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(9);\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports) {\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar castPath = __webpack_require__(40),\n    toKey = __webpack_require__(13);\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isArray = __webpack_require__(1),\n    isKey = __webpack_require__(21),\n    stringToPath = __webpack_require__(118),\n    toString = __webpack_require__(121);\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _prototypo = __webpack_require__(42);\n\nvar _prototypo2 = _interopRequireDefault(_prototypo);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ports = [];\nvar exportPorts = [];\nvar font = void 0;\nvar originSubset = {};\nvar currValues = void 0;\nvar currName = void 0;\nvar currSubset = [];\nvar arrayBufferMap = {};\nvar worker = self;\nvar fontsMap = {};\n\nfunction translateSubset() {\n\tif (!currSubset.length) {\n\t\treturn;\n\t}\n\n\tfont.subset = currSubset.map(function (glyph) {\n\t\treturn font.charMap[glyph.ot.unicode];\n\t}).filter(Boolean);\n\n\tcurrSubset = font.subset;\n};\n\nfunction subset(eData) {\n\tvar set = eData.data,\n\t    add = eData.add,\n\t    origin = eData.origin || 'native';\n\n\tvar prevGlyphs = currSubset.map(function (glyph) {\n\t\treturn glyph.name;\n\t});\n\n\tif (add) {\n\t\toriginSubset[origin] = set + originSubset[origin];\n\t} else {\n\t\toriginSubset[origin] = set;\n\t}\n\n\tif (origin) {\n\t\tvar currentStringSubset = Object.keys(originSubset).map(function (key) {\n\t\t\treturn originSubset[key];\n\t\t}).join('');\n\n\t\tfont.subset = currentStringSubset + set;\n\t} else {\n\t\tfont.subset = set;\n\t}\n\tcurrSubset = font.subset;\n\n\tif (!currValues) {\n\t\treturn true;\n\t}\n\n\t// search for glyphs *added* to the subset\n\tcurrSubset.filter(function (glyph) {\n\t\treturn prevGlyphs.indexOf(glyph.name) === -1;\n\t}\n\n\t// update those glyphs\n\t).forEach(function (glyph) {\n\t\tglyph.update(currValues);\n\t\tglyph.updateOTCommands();\n\t});\n\n\t// Recreate the correct font.ot.glyphs.glyphs object, without\n\t// touching the ot commands\n\tfont.updateOT({ set: undefined });\n\treturn font.toArrayBuffer();\n}\n\nvar handlers = {};\n\n_prototypo2.default.paper.setup({\n\twidth: 1024,\n\theight: 1024\n});\n\n// mini router\nself.addEventListener('message', function (e) {\n\tvar result = void 0;\n\n\tif (e.data.type && e.data.type in handlers) {\n\t\tresult = handlers[e.data.type](e.data);\n\n\t\tif (result === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tarrayBufferMap[currName] = result;\n\n\t\tself.postMessage(result);\n\t}\n});\n\nhandlers.font = function (eData) {\n\tvar fontSource = eData.data,\n\t    templateName = eData.name,\n\t    name = eData.db;\n\n\t// reset currValues to avoid using old values stored in the shared worker\n\tcurrValues = undefined;\n\n\t// TODO: this should be done using a memoizing table of limited size\n\tcurrName = name;\n\t/* if ( templateName in fontsMap ) {\n font = fontsMap[templateName];\n font.resetComponents();\n translateSubset();\n \treturn {\n \tsolvingOrders: null,\n \thandler: 'font',\n };\n }*/\n\n\tvar fontObj = JSON.parse(fontSource);\n\n\tfont = _prototypo2.default.parametricFont(fontObj);\n\tfontsMap[templateName] = font;\n\n\ttranslateSubset();\n\n\tvar solvingOrders = {};\n\n\tObject.keys(font.glyphMap).forEach(function (key) {\n\t\tsolvingOrders[key] = font.glyphMap[key].solvingOrder;\n\t});\n\n\treturn {\n\t\tsolvingOrders: solvingOrders,\n\t\thandler: 'font'\n\t};\n};\n\nhandlers.update = function (eData) {\n\tvar params = eData.data;\n\n\tcurrValues = params;\n\tfont.update(currValues);\n\tfont.updateOTCommands();\n\tvar result = font.toArrayBuffer();\n\n\treturn result;\n};\n\nhandlers.getGlyphsProperties = function (eData) {\n\tvar result = null;\n\n\tif (eData.data) {\n\t\tvar names = font.subset.map(function (glyph) {\n\t\t\treturn glyph.name;\n\t\t});\n\t\tvar properties = eData.data.properties;\n\n\t\tresult = {};\n\n\t\tfont.glyphs.forEach(function (glyph) {\n\t\t\tif (names.indexOf(glyph.name) !== -1) {\n\t\t\t\tif (!result[glyph.unicode]) {\n\t\t\t\t\tresult[glyph.unicode] = {};\n\t\t\t\t}\n\n\t\t\t\tif (typeof properties === 'string') {\n\t\t\t\t\tresult[glyph.unicode][properties] = glyph[properties];\n\t\t\t\t} else if (Array.isArray(properties)) {\n\t\t\t\t\tproperties.forEach(function (property) {\n\t\t\t\t\t\tresult[glyph.unicode][property] = glyph[property];\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn {\n\t\ttype: 'props',\n\t\tresult: result\n\t};\n};\n\nhandlers.soloAlternate = function (params) {\n\tfont.setAlternatesFor(params.unicode, params.glyphName);\n\n\tif (!currValues) {\n\t\treturn true;\n\t}\n\n\tfont.subset = font.subset.map(function (glyph) {\n\t\treturn String.fromCharCode(glyph.unicode);\n\t}).join('');\n\n\tvar altGlyph = font.glyphMap[params.glyphName];\n\n\tfont.subset.forEach(function (glyph) {\n\t\tif (altGlyph.src.relatedGlyphs && altGlyph.src.relatedGlyphs.indexOf(glyph.name) !== -1 || glyph.name === altGlyph.name) {\n\t\t\tglyph.update(currValues);\n\t\t}\n\t});\n\taltGlyph.updateOTCommands();\n\n\t// Recreate the correct font.ot.glyphs.glyphs object, without\n\t// touching the ot commands\n\tfont.updateOT({ set: undefined });\n\treturn font.toArrayBuffer();\n};\n\nhandlers.alternate = function (eData) {\n\tvar params = eData.data;\n\n\tif (params.altList) {\n\t\tObject.keys(params.altList).forEach(function (unicode) {\n\t\t\thandlers.soloAlternate({\n\t\t\t\tunicode: unicode,\n\t\t\t\tglyphName: params.altList[unicode]\n\t\t\t});\n\t\t});\n\t} else {\n\t\thandlers.soloAlternate(params);\n\t}\n};\n\nhandlers.subset = subset;\n\nfunction fillOs2Values(fontOt, values) {\n\tvar weightChooser = [{ test: 20, value: 'THIN' }, { test: 40, value: 'EXTRA_LIGHT' }, { test: 60, value: 'LIGHT' }, { test: 90, value: 'NORMAL' }, { test: 110, value: 'MEDIUM' }, { test: 130, value: 'SEMI_BOLD' }, { test: 150, value: 'BOLD' }, { test: 170, value: 'EXTRA_BOLD' }, { test: 190, value: 'BLACK' }];\n\n\tvar widthChooser = [{ test: 0.5, value: 'ULTRA_CONDENSED' }, { test: 0.625, value: 'EXTRA_CONDENSED' }, { test: 0.75, value: 'CONDENSED' }, { test: 0.875, value: 'SEMI_CONDENSED' }, { test: 1, value: 'MEDIUM' }, { test: 1.125, value: 'SEMI_EXPANDED' }, { test: 1.25, value: 'EXPANDED' }, { test: 1.50, value: 'EXTRA_EXPANDED' }, { test: 2, value: 'ULTRA_CONDENSED' }];\n\n\tweightChooser.forEach(function (weightObj) {\n\t\tif (values.thickness > weightObj.test) {\n\t\t\tfontOt.tables.os2.weightClass = fontOt.usWeightClasses[weightObj.value];\n\t\t}\n\t});\n\n\twidthChooser.forEach(function (widthObj) {\n\t\tif (values.width > widthObj.test) {\n\t\t\tfontOt.tables.os2.widthClass = fontOt.usWidthClasses[widthObj.value];\n\t\t}\n\t});\n\n\tvar fsSel = 0;\n\n\tif (values.slant > 0) {\n\t\tfsSel |= fontOt.fsSelectionValues.ITALIC;\n\t}\n\n\tif (fontOt.tables.os2.weightClass > fontOt.usWeightClasses.NORMAL) {\n\t\tfsSel |= fontOt.fsSelectionValues.BOLD;\n\t}\n\n\tif (fsSel === 0) {\n\t\tfsSel = fontOt.fsSelectionValues.REGULAR;\n\t}\n\n\tfontOt.tables.os2.fsSelection = fsSel;\n}\n\nhandlers.otfFont = function (eData) {\n\tvar data = eData.data;\n\t// force-update of the whole font, ignoring the current subset\n\tvar allChars = font.getGlyphSubset(false);\n\tvar fontValues = data && data.values || currValues;\n\n\tfont.update(fontValues, allChars);\n\n\tfont.updateOTCommands(allChars, data && data.merged || false);\n\n\tvar family = font.ot.names.fontFamily.en;\n\tvar style = font.ot.names.fontSubfamily.en;\n\tvar fullName = font.ot.names.fullName.en;\n\tvar names = font.ot.names;\n\n\t// TODO: understand why we need to save the familyName and\n\t// and set them back into the font.ot for it to be able to\n\t// export multiple font\n\tvar variantName = (data && data.style ? data.style.toLowerCase() : 'regular').replace(/^./, function (a) {\n\t\treturn a.toUpperCase();\n\t});\n\n\tnames.fontFamily.en = data && data.family || 'Prototypo';\n\tnames.fontSubfamily.en = variantName;\n\tnames.preferredFamily = names.fontFamily;\n\tnames.preferredSubfamily = names.fontSubFamily;\n\tnames.postScriptName.en = names.fontFamily.en + '-' + names.fontSubfamily.en;\n\tnames.uniqueID = { en: 'Prototypo: ' + names.fontFamily.en + ' ' + names.fontSubfamily.en + ':2016' };\n\tnames.fullName.en = names.fontFamily.en + ' ' + names.fontSubfamily.en;\n\tnames.version.en = 'Version 1.0';\n\tfillOs2Values(font.ot, fontValues);\n\n\tvar result = font.toArrayBuffer();\n\n\tnames.fontFamily.en = family;\n\tnames.fontSubfamily.en = style;\n\tnames.fullName.en = fullName;\n\n\treturn result;\n};\n\nhandlers.changeCursorsToManual = function (eData) {\n\tvar cursors = eData.cursors;\n\tvar glyphUnicode = eData.glyphUnicode;\n\n\tfont.changeCursorsToManual(glyphUnicode, cursors);\n};\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar plumin = __webpack_require__(5),\n    assign = __webpack_require__(15),\n    cloneDeep = __webpack_require__(22),\n    Utils = __webpack_require__(23),\n    naive = __webpack_require__(49),\n    find = __webpack_require__(50);\n\nvar paper = plumin.paper,\n    psProto = paper.PaperScope.prototype,\n    _ = { assign: assign, find: find };\n\nfunction parametricFont(src) {\n\tvar font = Utils.fontFromSrc(src);\n\n\tObject.keys(src.glyphs).forEach(function (name) {\n\t\tvar glyphSrc = src.glyphs[name];\n\n\t\tUtils.ufoToPaper(glyphSrc);\n\n\t\tvar glyph = Utils.glyphFromSrc(glyphSrc, src, naive);\n\n\t\tfont.addGlyph(glyph);\n\n\t\t// Create additional paths for skeletons and set ._dependencies\n\t\t// appropriately\n\t\tnaive.annotator(glyph);\n\n\t\t// solvingOrder might be already available (if this is a subcomponent,\n\t\t// or precomputed in a worker)\n\t\tif (!glyph.solvingOrder) {\n\t\t\tglyph.solvingOrder = glyphSrc.solvingOrder = Utils.solveDependencyTree(glyph);\n\t\t}\n\t});\n\n\t// all glyphs are ready, embed components now\n\tfont.glyphs.forEach(function (_glyph) {\n\t\tif (_glyph.embedComponents) {\n\t\t\t_glyph.embedComponents();\n\t\t}\n\t});\n\n\treturn font;\n}\n\nplumin.parametricFont = parametricFont;\nplumin.Utils = Utils;\nplumin.Utils.naive = naive;\n\npsProto.Font.prototype.update = function (params, set) {\n\tvar font = this;\n\tvar subset = this.getGlyphSubset(set);\n\n\tif (params.altList) {\n\t\tObject.keys(params.altList).forEach(function (unicode) {\n\t\t\tvar charMap = font.charMap;\n\n\t\t\tif (charMap[unicode] && charMap[unicode].name !== params.altList[unicode]) {\n\t\t\t\tvar oldGlyph = charMap[unicode];\n\n\t\t\t\tfont.setAlternateFor(unicode, params.altList[unicode]);\n\n\t\t\t\tvar index = subset.indexOf(oldGlyph);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tsubset[index] = charMap[unicode];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tUtils.updateParameters(font, params);\n\n\t// Additionally, we must update the params of indiv group\n\tUtils.updateIndividualParameters(font, params);\n\n\tUtils.updateProperties(font, params);\n\n\tUtils.updateXscenderProperties(font, params);\n\n\tsubset.map(function (glyph) {\n\t\treturn glyph.update(params);\n\t}, this);\n\n\t// We no longer support font transforms. Transforms should happen at the\n\t// glyph level, where they can be individualized.\n\n\treturn this;\n};\n\npsProto.Font.prototype.resetComponents = function () {\n\tvar _this = this;\n\n\tthis.glyphs.forEach(function (glyph) {\n\t\tglyph.resetComponents(_this.src);\n\t});\n};\n\npsProto.Path.prototype._drawOld = psProto.Path.prototype._draw;\npsProto.Path.prototype._draw = function (ctx, param, viewMatrix, strokeMatrix) {\n\tif (this.applyMatrix) {\n\t\tvar realViewMatrix = new psProto.Matrix(this.view.zoom / window.devicePixelRatio, viewMatrix.b / window.devicePixelRatio, viewMatrix.c / window.devicePixelRatio, this.view.zoom / window.devicePixelRatio, (-this.view.center.x + this.view.bounds.width / 2) * this.view.zoom / window.devicePixelRatio, (-this.view.center.y + this.view.bounds.height / 2) * this.view.zoom / window.devicePixelRatio);\n\n\t\trealViewMatrix.a *= this.parent.globalMatrix.a;\n\t\trealViewMatrix.d *= this.parent.globalMatrix.d;\n\t\trealViewMatrix.tx += this.parent.globalMatrix.tx * this.view.zoom / window.devicePixelRatio;\n\t\trealViewMatrix.ty += this.parent.globalMatrix.ty * this.view.zoom / window.devicePixelRatio;\n\t\tthis._drawOld(ctx, param, realViewMatrix, realViewMatrix);\n\t} else {\n\t\tthis._drawOld(ctx, param, realViewMatrix, strokeMatrix);\n\t}\n};\n\npsProto.CompoundPath.prototype._drawOld = psProto.CompoundPath.prototype._draw;\npsProto.CompoundPath.prototype._draw = function (ctx, param, viewMatrix) {\n\tvar realViewMatrix = new psProto.Matrix(this.view.zoom / window.devicePixelRatio, viewMatrix.b / window.devicePixelRatio, viewMatrix.c / window.devicePixelRatio, this.view.zoom / window.devicePixelRatio, (-this.view.center.x + this.view.bounds.width / 2) * this.view.zoom / window.devicePixelRatio, (-this.view.center.y + this.view.bounds.height / 2) * this.view.zoom / window.devicePixelRatio);\n\n\trealViewMatrix.a *= this.parent.globalMatrix.a;\n\trealViewMatrix.d *= this.parent.globalMatrix.d;\n\trealViewMatrix.tx += this.parent.globalMatrix.tx * this.view.zoom / window.devicePixelRatio;\n\trealViewMatrix.ty += this.parent.globalMatrix.ty * this.view.zoom / window.devicePixelRatio;\n\tthis._drawOld(ctx, param, realViewMatrix, realViewMatrix);\n};\n\npsProto.Font.prototype.changeCursorsToManual = function (glyphUnicode, cursors) {\n\tvar font = this;\n\n\t// TODO manage alternates\n\tfont.altMap[glyphUnicode][0].changeCursorsToManual(cursors);\n};\n\npsProto.Font.prototype.setAlternatesFor = function (unicode, glyphName) {\n\tvar font = this;\n\tvar glyph = font.charMap[unicode].src;\n\tvar nextGlyph = font.children[glyphName].src;\n\tvar result = [];\n\n\t(glyph.relatedGlyphs || []).forEach(function (name) {\n\t\tvar relatedGlyph = font.children[name].src;\n\t\tvar alternateName = relatedGlyph.name.replace(relatedGlyph.base || relatedGlyph.name, nextGlyph.base || nextGlyph.name);\n\n\t\tif (font.children[alternateName]) {\n\t\t\t// checking alternate's existence\n\t\t\tfont.setAlternateFor(relatedGlyph.unicode, alternateName);\n\t\t\tresult.push({\n\t\t\t\tglyph: relatedGlyph.unicode,\n\t\t\t\tname: alternateName\n\t\t\t});\n\t\t}\n\t});\n\n\tfont.setAlternateFor(unicode, glyphName);\n\tresult.push({\n\t\tglyph: unicode,\n\t\tname: glyphName\n\t});\n\n\treturn result;\n};\n\n/* Update the shape of the glyph, according to formula and parameters\n * 0. before running, nodes have already been created by ParametricFont\n *   (including expanded ones thanks to naive.expandSkeletons). And static\n *   properties have been copied over to those nodes\n * 1. We use the solving order to calculate all node properties\n * 2. transform contours\n * 3. Update components and transform them\n */\npsProto.Glyph.prototype.update = function (_params) {\n\tvar _this2 = this;\n\n\tvar glyph = this,\n\t    font = glyph.parent,\n\t    matrix = void 0,\n\t    subset = font.subset,\n\t    params = void 0;\n\n\tif (_params) {\n\t\tthis.oldParams = _params;\n\t} else if (this.oldParams) {\n\t\t_params = this.oldParams;\n\t} else {\n\t\treturn;\n\t}\n\n\tif (_params.altList && font.charMap && subset) {\n\t\tvar unicode = _.find(Object.keys(_params.altList), function (o) {\n\t\t\treturn parseInt(o) === _this2.ot.unicode;\n\t\t});\n\n\t\tif (unicode && this.name !== _params.altList[unicode].name) {\n\t\t\tvar charMap = font.charMap;\n\n\t\t\tif (charMap[unicode] && charMap[unicode].name !== _params.altList[unicode]) {\n\t\t\t\tvar index = subset.indexOf(charMap[unicode]);\n\n\t\t\t\tfont.setAlternateFor(unicode, _params.altList[unicode]);\n\n\t\t\t\tsubset[index] = charMap[unicode];\n\t\t\t\tcharMap[unicode].update(_params, subset);\n\t\t\t\treturn charMap[unicode];\n\t\t\t}\n\t\t}\n\t}\n\n\t// 0. calculate local parameters\n\tif (_params.indiv_glyphs && Object.keys(_params.indiv_glyphs).indexOf('' + glyph.ot.unicode) !== -1) {\n\t\tvar indivParam = {};\n\n\t\tObject.keys(_params).forEach(function (param) {\n\t\t\tif (typeof _params[param] === 'number') {\n\t\t\t\tvar groups = _params.indiv_group_param[_params.indiv_glyphs[glyph.ot.unicode]],\n\t\t\t\t    multiplier = groups[param + '_rel'] || {\n\t\t\t\t\tstate: 'relative',\n\t\t\t\t\tvalue: 1\n\t\t\t\t};\n\n\t\t\t\tindivParam[param] = groups[param] || (multiplier.state === 'relative' ? multiplier.value * _params[param] : multiplier.value + _params[param]);\n\t\t\t}\n\t\t});\n\n\t\tparams = _.assign({}, _params, indivParam, glyph.parentParameters);\n\t} else {\n\t\tparams = _.assign({}, _params, glyph.parentParameters);\n\t}\n\n\tUtils.updateParameters(glyph, params);\n\n\t// original values backup\n\tglyph.baseSpacingLeft = params.spacingLeft;\n\tglyph.baseSpacingRight = params.spacingRight;\n\n\t// if we have special properties to compute\n\tif (params.glyphSpecialProps && params.glyphSpecialProps[glyph.ot.unicode]) {\n\t\tvar propsToUpdate = params.glyphSpecialProps[glyph.ot.unicode];\n\n\t\tObject.keys(propsToUpdate).forEach(function (property) {\n\t\t\tparams[property] = params[property] + propsToUpdate[property];\n\t\t});\n\t}\n\n\tglyph.spacingLeft = params.spacingLeft;\n\tglyph.spacingRight = params.spacingRight;\n\n\t// parentParameters always overwrite glyph parameters. Use aliases\n\t// (e.g. _width) to let glyph have the final word\n\t_.assign(params, glyph.parentParameters);\n\n\tif (params.glyphComponentChoice && params.glyphComponentChoice[glyph.ot.unicode]) {\n\t\tvar componentsChoices = params.glyphComponentChoice[glyph.ot.unicode];\n\n\t\tObject.keys(componentsChoices).forEach(function (key) {\n\t\t\tvar componentFilter = glyph.components.filter(function (comp) {\n\t\t\t\treturn comp.componentId === key;\n\t\t\t});\n\n\t\t\tif (componentFilter.length > 0) {\n\t\t\t\tvar component = componentFilter[0];\n\n\t\t\t\tif (component.chosen !== componentsChoices[key]) {\n\t\t\t\t\tglyph.changeComponent(key, componentsChoices[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// 1. calculate node properties\n\n\tif (_params.manualChanges) {\n\t\tparams.manualChanges = cloneDeep(_params.manualChanges[glyph.name]);\n\t}\n\tUtils.updateProperties(glyph, params);\n\n\t// 2. transform contours\n\tthis.contours.forEach(function (contour) {\n\t\t// a. transform the nodes\n\t\tcontour.nodes.forEach(function (node) {\n\t\t\tif (node.transforms) {\n\t\t\t\tmatrix = Utils.transformsToMatrix(node.transforms.slice(0), node.transformOrigin);\n\n\t\t\t\tif (contour.skeleton !== true) {\n\t\t\t\t\tnode.transform(matrix);\n\n\t\t\t\t\t// when dealing with a skeleton, modify only the matrix of\n\t\t\t\t\t// expanded items\n\t\t\t\t} else {\n\t\t\t\t\tnode.expandedTo.forEach(function (_node) {\n\t\t\t\t\t\t_node.transform(matrix);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// b. transform the contour\n\t\t// prepare and update outlines and expanded contours, but not\n\t\t// skeletons\n\t\tif (contour.transforms) {\n\t\t\tmatrix = Utils.transformsToMatrix(contour.transforms.slice(0), contour.transformOrigin);\n\n\t\t\tif (contour.skeleton !== true) {\n\t\t\t\t// We don't want to apply the transforms immediatly on contours,\n\t\t\t\t// otherwise the transformation will add-up on each update.\n\t\t\t\tcontour.applyMatrix = false;\n\t\t\t\tcontour.matrix = matrix;\n\n\t\t\t\t// when dealing with a skeleton, modify only the matrix of\n\t\t\t\t// expanded items\n\t\t\t} else {\n\t\t\t\tcontour.expandedTo.forEach(function (_contour) {\n\t\t\t\t\t_contour.applyMatrix = false;\n\t\t\t\t\t_contour.matrix = matrix;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, this);\n\n\t// 3. update components and transform components\n\tif (this.components.length && font) {\n\t\t// subcomponents have the parent component as their parent\n\t\t// so search for the font\n\t\twhile (!('glyphs' in font)) {\n\t\t\tfont = font.parent;\n\t\t}\n\n\t\tthis.components.forEach(function (component) {\n\t\t\tcomponent.update(params);\n\n\t\t\tif (component.transforms) {\n\t\t\t\tmatrix = Utils.transformsToMatrix(component.transforms.slice(0), component.transformOrigin);\n\n\t\t\t\tcomponent.applyMatrix = false;\n\t\t\t\tcomponent.matrix = matrix;\n\t\t\t}\n\t\t}, this);\n\t}\n\n\t// 4. transform whole glyph\n\tif (glyph.transforms) {\n\t\tmatrix = Utils.transformsToMatrix(glyph.transforms.slice(0), glyph.transformOrigin);\n\n\t\tglyph.applyMatrix = false;\n\t\tglyph.matrix = matrix;\n\t}\n\n\tglyph.glyphWidth = glyph.bounds.width;\n\n\treturn this;\n};\n\npsProto.Glyph.prototype.resetComponents = function () {\n\tvar _this3 = this;\n\n\tif (this.src) {\n\t\tthis.src.components.forEach(function (componentSrc) {\n\t\t\tif (Array.isArray(componentSrc.base)) {\n\t\t\t\t_this3.changeComponent(componentSrc.id, componentSrc.base[0]);\n\t\t\t}\n\t\t});\n\t}\n};\n\npsProto.Glyph.prototype.changeComponent = function (componentId, componentName) {\n\tvar glyph = this;\n\t// We remove the old components\n\tvar componentToDelete = glyph.components.filter(function (comp) {\n\t\treturn comp.componentId === componentId;\n\t})[0];\n\t// And remove its handle from the view\n\n\tcomponentToDelete.contours.forEach(function (contour) {\n\t\tcontour.fullySelected = false;\n\t});\n\t// And add the correct components\n\tvar componentSrc = glyph.src.components.filter(function (comp) {\n\t\treturn comp.id === componentId;\n\t})[0];\n\n\tglyph.solvingOrder = undefined;\n\tglyph.src.solvingOrder = undefined;\n\tUtils.selectGlyphComponent(glyph, componentSrc, componentName, glyph.parent.src, Utils.naive, componentId, glyph.components.indexOf(componentToDelete));\n\tglyph.solvingOrder = glyph.src.solvingOrder = Utils.solveDependencyTree(glyph);\n\tglyph.update();\n};\n\n// Before updating SVG or OpenType data, we must determine paths exports\n// directions. Basically, everything needs to be clockwise.\n// this method needs to be called only after the first update, otherwise the\n// directions won't be known\npsProto.Outline.prototype.prepareDataUpdate = function () {\n\tif (this.isPrepared) {\n\t\treturn;\n\t}\n\n\tthis.children.forEach(function (contour) {\n\t\t// expanded contours are handled from their skeleton\n\t\tif (contour.expandedFrom || contour.exportReversed) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (contour.skeleton !== true) {\n\t\t\tcontour.exportReversed = !contour.isClockwise();\n\t\t} else if (!contour.expandedTo[1]) {\n\t\t\tcontour.expandedTo[0].exportReversed = !contour.expandedTo[0].isClockwise();\n\t\t} else {\n\t\t\tvar isClockwise = contour.isClockwise();\n\n\t\t\tcontour.expandedTo[0].exportReversed = !isClockwise;\n\t\t\tcontour.expandedTo[1].exportReversed = !isClockwise;\n\t\t}\n\t});\n\n\tthis.isPrepared = true;\n};\n\n// for the following plumin methods, the outline must be prepared beforehand\n// to be usable in prototypo.js\n['updateSVGData', 'updateOTCommands', 'combineTo'].forEach(function (name) {\n\tvar method = paper.PaperScope.prototype.Outline.prototype[name];\n\n\tpsProto.Outline.prototype[name] = function () {\n\t\tif (!this.isPrepared) {\n\t\t\tthis.prepareDataUpdate();\n\t\t\tthis.isPrepared = true;\n\t\t}\n\n\t\treturn method.apply(this, arguments);\n\t};\n});\n\nplumin.cloneDeep = cloneDeep;\n\nmodule.exports = plumin;\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(44)\nvar ieee754 = __webpack_require__(45)\nvar isArray = __webpack_require__(46)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nclass DepTree {\n  constructor() {\n    this.nodes = {};\n  }\n\n  add(node, dependants) {\n    if (!dependants) {\n      dependants = [];\n    } else if (!(dependants instanceof Array)) {\n      dependants = [dependants];\n    }\n    this.nodes[node] = dependants;\n  }\n\n  resolveNode(node, resolved, processing) {\n    resolved = resolved || [];\n    processing = processing || {};\n    const deps = this.nodes[node] || [];\n\n    processing[node] = true;\n\n    deps.forEach((dep) => {\n      if (resolved.indexOf(dep) !== -1) {\n        return;\n      }\n      if (processing[dep]) {\n        throw new Error(`Circular dependency: ${dep}`);\n      }\n      this.resolveNode(dep, resolved, processing);\n    });\n    if (resolved.indexOf(node) === -1) {\n      processing[node] = false;\n      resolved.push(node);\n    }\n    return resolved;\n  }\n\n  resolve() {\n    const resolved = [];\n    for (const node in this.nodes) {\n      this.resolveNode(node, resolved);\n    }\n    return resolved;\n  }\n}\n\nmodule.exports = DepTree;\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar plumin = __webpack_require__(5),\n    paper = plumin.paper;\n\nvar Utils = {};\n\n/* eslint-disable */\n// The following function should be useless, thanks to paper\nUtils.lineLineIntersection = function (p1, p2, p3, p4) {\n\tvar x1 = p1.x,\n\t    y1 = p1.y,\n\t    x2 = p2.x,\n\t    y2 = p2.y,\n\t    x3 = p3.x,\n\t    y3 = p3.y,\n\t    x4 = p4.x,\n\t    y4 = p4.y,\n\t    d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\tif (d === 0) {\n\t\treturn null;\n\t}\n\n\treturn new Float32Array([((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) / d, ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) / d]);\n};\n\n// Find the intersection of two rays.\n// A ray is defined by a point and an angle.\nUtils.rayRayIntersection = function (p1, a1, p2, a2) {\n\t// line equations\n\tvar a = Math.tan(a1),\n\t    b = Math.tan(a2),\n\t    c = p1.y - a * p1.x,\n\t    d = p2.y - b * p2.x,\n\t    x,\n\t    y;\n\n\t// When searching for lines intersection,\n\t// angles can be normalized to 0 < a < PI\n\t// This will be helpful in detecting special cases below.\n\ta1 = a1 % Math.PI;\n\tif (a1 < 0) {\n\t\ta1 += Math.PI;\n\t}\n\ta2 = a2 % Math.PI;\n\tif (a2 < 0) {\n\t\ta2 += Math.PI;\n\t}\n\n\t// no intersection\n\tif (a1 === a2) {\n\t\treturn null;\n\t}\n\n\t//We want to round a1, a2 and PI to avoid problems with approximation\n\ta1 = a1.toFixed(6);\n\ta2 = a2.toFixed(6);\n\tvar piOver2 = (Math.PI / 2).toFixed(6);\n\n\t// Optimize frequent and easy special cases.\n\t// Without optimization, results would be incorrect when cos(a) === 0\n\tif (a1 === 0) {\n\t\ty = p1.y;\n\t} else if (a1 === piOver2) {\n\t\tx = p1.x;\n\t}\n\tif (a2 === 0) {\n\t\ty = p2.y;\n\t} else if (a2 === piOver2) {\n\t\tx = p2.x;\n\t}\n\n\t// easiest case\n\tif (x !== undefined && y !== undefined) {\n\t\treturn new Float32Array([x, y]);\n\t}\n\n\t// other cases that can be optimized\n\tif (a1 === 0) {\n\t\treturn new Float32Array([(y - d) / b, y]);\n\t}\n\tif (a1 === piOver2) {\n\t\treturn new Float32Array([x, b * x + d]);\n\t}\n\tif (a2 === 0) {\n\t\treturn new Float32Array([(y - c) / a, y]);\n\t}\n\tif (a2 === piOver2) {\n\t\treturn new Float32Array([x, a * x + c]);\n\t}\n\n\t// intersection from two line equations\n\t// algo: http://en.wikipedia.org/wiki/Line–line_intersection#Given_the_equations_of_the_lines\n\treturn new Float32Array([x = (d - c) / (a - b),\n\t// this should work equally well with ax+c or bx+d\n\ta * x + c]);\n};\n\n// return the angle between two points\nUtils.lineAngle = function (p0, p1) {\n\treturn Math.atan2(p1.y - p0.y, p1.x - p0.x);\n};\n\nUtils.onLine = function (params) {\n\tif (params.on[0].x === params.on[1].x && params.on[0].y === params.on[1].y) {\n\t\treturn 'x' in params ? params.on[0].y : params.on[0].x;\n\t}\n\n\tvar origin = params.on[0],\n\t    vector = [params.on[1].x - params.on[0].x, params.on[1].y - params.on[0].y];\n\n\treturn 'x' in params ? (params.x - origin.x) / vector[0] * vector[1] + origin.y : (params.y - origin.y) / vector[1] * vector[0] + origin.x;\n};\n\nUtils.pointOnCurve = function (pointHandleOut, pointHandleIn, distanceFromOut, inverseOrientation, linePrecision) {\n\tlinePrecision = linePrecision || 3;\n\tvar length = 0;\n\tvar previousPoint;\n\n\tvar points;\n\tif (!inverseOrientation) {\n\t\tpoints = [pointHandleOut.point, pointHandleOut.point.add(pointHandleOut.handleOut), pointHandleIn.point.add(pointHandleIn.handleIn), pointHandleIn.point];\n\t} else {\n\t\tpoints = [pointHandleIn.point, pointHandleIn.point.add(pointHandleIn.handleIn), pointHandleOut.point.add(pointHandleOut.handleOut), pointHandleOut.point];\n\t}\n\n\tfor (var i = 0; i < linePrecision; i++) {\n\t\tvar point = Utils.getPointOnCurve(points, i / (linePrecision - 1));\n\n\t\tif (previousPoint) {\n\t\t\tlength += Utils.distance(previousPoint.x, previousPoint.y, point.x, point.y);\n\t\t}\n\n\t\tpreviousPoint = point;\n\t}\n\n\tvar t = length === 0 ? 0 : distanceFromOut / length;\n\n\tt = Math.max(0.001, Math.min(1, t));\n\n\treturn Utils.getPointOnCurve(points, t);\n};\n\nUtils.getPointOnCurve = function (points, t) {\n\tvar inverseT = 1 - t;\n\tvar a = inverseT * inverseT * inverseT;\n\tvar b = inverseT * inverseT * t * 3;\n\tvar c = inverseT * t * t * 3;\n\tvar d = t * t * t;\n\n\treturn {\n\t\tx: a * points[0].x + b * points[1].x + c * points[2].x + d * points[3].x,\n\t\ty: a * points[0].y + b * points[1].y + c * points[2].y + d * points[3].y,\n\t\tnormal: Utils.lineAngle({\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t}, {\n\t\t\tx: (points[1].x - points[0].x) * inverseT * inverseT + 2 * (points[2].x - points[1].x) * t * inverseT + (points[3].x - points[2].x) * t * t,\n\t\t\ty: (points[1].y - points[0].y) * inverseT * inverseT + 2 * (points[2].y - points[1].y) * t * inverseT + (points[3].y - points[2].y) * t * t\n\t\t})\n\t};\n};\n\nUtils.split = function (points, t, base) {\n\tt = t || 1;\n\tvar result = points;\n\twhile (points.length > 1) {\n\t\tvar newPoints = [];\n\t\tfor (var i = 1; i < points.length; i++) {\n\t\t\tnewPoints.push(points[i - 1].multiply(1 - t).add(points[i].multiply(t)));\n\t\t}\n\n\t\tresult = result.concat(newPoints);\n\t\tpoints = newPoints;\n\t}\n\n\tif (t === 1) {\n\t\treturn {\n\t\t\tleft: [base[1], base[0]],\n\t\t\tright: [base[1], base[1]]\n\t\t};\n\t}\n\n\tvar splitBezier = {\n\t\tleft: [{\n\t\t\tx: result[0].x,\n\t\t\ty: result[0].y,\n\t\t\tpoint: new paper.Point(result[0].x, result[0].y),\n\t\t\thandleOut: new paper.Point(result[4].x - result[0].x, result[4].y - result[0].y)\n\t\t}, {\n\t\t\tx: result[9].x,\n\t\t\ty: result[9].y,\n\t\t\tpoint: new paper.Point(result[9].x, result[9].y),\n\t\t\thandleIn: new paper.Point(result[7].x - result[9].x, result[7].y - result[9].y),\n\t\t\thandleOut: new paper.Point(result[8].x - result[9].x, result[8].y - result[9].y)\n\t\t}],\n\t\tright: [{\n\t\t\tx: result[9].x,\n\t\t\ty: result[9].y,\n\t\t\tpoint: new paper.Point(result[9].x, result[9].y),\n\t\t\thandleIn: new paper.Point(result[7].x - result[9].x, result[7].y - result[9].y),\n\t\t\thandleOut: new paper.Point(result[8].x - result[9].x, result[8].y - result[9].y)\n\t\t}, {\n\t\t\tx: result[3].x,\n\t\t\ty: result[3].y,\n\t\t\tpoint: new paper.Point(result[3].x, result[3].y),\n\t\t\thandleIn: new paper.Point(result[6].x - result[3].x, result[6].y - result[3].y)\n\t\t}]\n\t};\n\treturn splitBezier;\n};\n\nUtils.distance = function (x1, y1, x2, y2) {\n\treturn Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y1 - y2, 2));\n};\n\nUtils.align = function (points, lineStart, lineEnd) {\n\tvar tx = lineStart.x,\n\t    ty = lineStart.y,\n\t    a = -Math.atan2(lineEnd.y - ty, lineEnd.x - tx),\n\t    d = function d(v) {\n\t\treturn {\n\t\t\tx: (v.x - tx) * Math.cos(a) - (v.y - ty) * Math.sin(a),\n\t\t\ty: (v.x - tx) * Math.sin(a) + (v.y - ty) * Math.cos(a)\n\t\t};\n\t};\n\treturn points.map(d);\n};\n\nfunction crt(v) {\n\treturn v < 0 ? -Math.pow(-v, 1 / 3) : Math.pow(v, 1 / 3);\n}\n\n// see https://github.com/Pomax/bezierjs/blob/gh-pages/lib/utils.js line 313\nUtils.lineCurveIntersection = function (pointHandleOut, pointHandleIn, lineStart, lineEnd) {\n\tlineStart = lineStart || { x: 0, y: 0 };\n\tlineEnd = lineEnd || { x: 1, y: 0 };\n\tvar points = [pointHandleOut.point, pointHandleOut.point.add(pointHandleOut.handleOut), pointHandleIn.point.add(pointHandleIn.handleIn), pointHandleIn.point];\n\tvar p = Utils.align(points, lineStart, lineEnd);\n\tvar reduce = function reduce(t) {\n\t\treturn 0 <= t && t <= 1;\n\t};\n\n\t// see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n\tvar pa = p[0].y;\n\tvar pb = p[1].y;\n\tvar pc = p[2].y;\n\tvar pd = p[3].y;\n\tvar d = -pa + 3 * pb - 3 * pc + pd;\n\tvar a = (3 * pa - 6 * pb + 3 * pc) / d;\n\tvar b = (-3 * pa + 3 * pb) / d;\n\tvar c = pa / d;\n\tvar p3 = (3 * b - a * a) / 3 / 3;\n\tvar q = (2 * a * a * a - 9 * a * b + 27 * c) / 27;\n\tvar q2 = q / 2;\n\tvar discriminant = q2 * q2 + p3 * p3 * p3;\n\tvar u1;\n\tvar v1;\n\tvar x1;\n\tvar x2;\n\tvar x3;\n\n\tvar result;\n\n\tif (discriminant < 0) {\n\t\tvar mp3 = -p3,\n\t\t    mp33 = mp3 * mp3 * mp3,\n\t\t    r = Math.sqrt(mp33),\n\t\t    t = -q / (2 * r),\n\t\t    cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n\t\t    phi = Math.acos(cosphi),\n\t\t    crtr = crt(r),\n\t\t    t1 = 2 * crtr;\n\t\tx1 = t1 * Math.cos(phi / 3) - a / 3;\n\t\tx2 = t1 * Math.cos((phi + Math.PI * 2) / 3) - a / 3;\n\t\tx3 = t1 * Math.cos((phi + 4 * Math.PI) / 3) - a / 3;\n\t\tresult = [x1, x2, x3].filter(reduce);\n\t} else if (discriminant === 0) {\n\t\tu1 = q2 < 0 ? crt(-q2) : -crt(q2);\n\t\tx1 = 2 * u1 - a / 3;\n\t\tx2 = -u1 - a / 3;\n\t\tresult = [x1, x2].filter(reduce);\n\t} else {\n\t\tvar sd = Math.sqrt(discriminant);\n\t\tu1 = crt(-q2 + sd);\n\t\tv1 = crt(q2 + sd);\n\t\tresult = [u1 - v1 - a / 3].filter(reduce);\n\t}\n\n\treturn Utils.split(points, result[0], [pointHandleIn, pointHandleOut]);\n};\n\nUtils.log = function () {\n\t/*eslint-disable no-console */\n\tconsole.log.apply(console, arguments);\n\t/*eslint-enable no-console */\n\treturn arguments[0];\n};\n\nUtils.normalize = function (vector) {\n\tvar x = vector.x;\n\tvar y = vector.y;\n\n\tvar norm = Utils.distance(0, 0, x, y);\n\n\tif (norm === 0) {\n\t\treturn {\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t};\n\t}\n\n\treturn {\n\t\tx: x / norm,\n\t\ty: y / norm\n\t};\n};\n\nUtils.vectorFromPoints = function (a, b) {\n\treturn {\n\t\tx: b.x - a.x,\n\t\ty: b.y - a.y\n\t};\n};\n\nUtils.parseInt = function (int) {\n\treturn parseInt(int);\n};\n\nUtils.makeCurveInsideSerif = function (pAnchors, serifHeight, serifWidth, serifMedian, serifCurve, serifTerminal, thickness, midWidth, serifRotate) {\n\tvar yDir = pAnchors.down ? -1 : 1;\n\tvar xDir = pAnchors.left ? -1 : 1;\n\tvar midStumpOrient = pAnchors.inverseMidStump ? -1 : 1;\n\tvar realThickness = pAnchors.thickness || thickness;\n\n\tvar rotateRad = (serifRotate * pAnchors.rotationAngle || 0) * Math.PI / 180;\n\tvar baseWidth = pAnchors.baseWidth;\n\tvar baseHeight = pAnchors.baseHeight;\n\tvar stumpOpposite = pAnchors.opposite;\n\tvar stumpBase = baseHeight;\n\tvar stumpVector = {\n\t\tx: stumpOpposite.x - stumpBase.x,\n\t\ty: stumpOpposite.y - stumpBase.y\n\t};\n\n\tif (baseHeight.x === stumpOpposite.x && baseHeight.y === stumpOpposite.y) {\n\t\tvar stumpVector = {\n\t\t\tx: -stumpOpposite.x + baseWidth.x,\n\t\t\ty: -stumpOpposite.y + baseWidth.y\n\t\t};\n\t}\n\tvar stumpNorm = Utils.distance(0, 0, stumpVector.x, stumpVector.y);\n\tstumpVector = Utils.normalize(stumpVector);\n\tvar stumpAngle = Utils.lineAngle(baseHeight, stumpOpposite);\n\n\tvar rotationCenter = pAnchors.rotationCenter;\n\tvar topLeft = {\n\t\tx: rotationCenter.x + (baseHeight.x - rotationCenter.x - serifHeight * xDir) * Math.cos(rotateRad) - (baseWidth.y - rotationCenter.y + serifWidth * yDir) * Math.sin(rotateRad),\n\t\ty: rotationCenter.y + (baseWidth.y - rotationCenter.y + serifWidth * yDir) * Math.cos(rotateRad) + (baseHeight.x - rotationCenter.x - serifHeight * xDir) * Math.sin(rotateRad)\n\t};\n\tvar bottomLeft = {\n\t\tx: rotationCenter.x + (baseHeight.x - rotationCenter.x - serifHeight * xDir) * Math.cos(rotateRad) - (baseHeight.y - rotationCenter.y) * Math.sin(rotateRad),\n\t\ty: rotationCenter.y + (baseHeight.y - rotationCenter.y) * Math.cos(rotateRad) + (baseHeight.x - rotationCenter.x - serifHeight * xDir) * Math.sin(rotateRad)\n\n\t\t//We get the intersection with the left edge of the serif and the curve support\n\t\t//this operation is direction dependent\n\t};var splitBase;\n\tif (pAnchors.inverseOrder) {\n\t\tsplitBase = Utils.lineCurveIntersection(pAnchors.curveEnd, pAnchors.baseWidth, { x: topLeft.x, y: topLeft.y }, { x: bottomLeft.x, y: bottomLeft.y });\n\t} else {\n\t\tsplitBase = Utils.lineCurveIntersection(pAnchors.baseWidth, pAnchors.curveEnd, { x: topLeft.x, y: topLeft.y }, { x: bottomLeft.x, y: bottomLeft.y });\n\t}\n\n\t// We chose a serifCenter depending on if the left edge intersect or not with\n\t// the curve support\n\tvar serifCenter;\n\tvar splitCurveEnd;\n\n\tif (!pAnchors.inverseOrder) {\n\t\tif (splitBase.right[0].x !== splitBase.right[1].x || splitBase.right[0].y !== splitBase.right[1].y) {\n\t\t\tserifCenter = splitBase.right[0];\n\t\t\tsplitCurveEnd = splitBase.right[1];\n\t\t} else {\n\t\t\tserifCenter = splitBase.left[0];\n\t\t\tsplitCurveEnd = splitBase.left[1];\n\t\t}\n\t} else {\n\t\tif (splitBase.left[0].x !== splitBase.left[1].x || splitBase.left[0].y !== splitBase.left[1].y) {\n\t\t\tserifCenter = splitBase.left[1];\n\t\t\tsplitCurveEnd = splitBase.left[0];\n\t\t} else {\n\t\t\tserifCenter = splitBase.right[1];\n\t\t\tsplitCurveEnd = splitBase.right[0];\n\t\t}\n\t}\n\n\t// The serif direction is the line from the serif center\n\t// to the serif left edge\n\tvar serifDirection = Utils.vectorFromPoints(serifCenter, {\n\t\tx: rotationCenter.x + (baseHeight.x - rotationCenter.x - serifHeight * xDir) * serifMedian * Math.cos(rotateRad) - (baseWidth.y - rotationCenter.y + serifWidth * yDir) * Math.sin(rotateRad),\n\t\ty: rotationCenter.y + (baseWidth.y - rotationCenter.y + serifWidth * yDir) * Math.cos(rotateRad) + (baseHeight.x - rotationCenter.x - serifHeight * xDir) * serifMedian * Math.sin(rotateRad)\n\t});\n\n\tvar serifBasis = Utils.normalize(serifDirection);\n\tvar serifRadDirection = Math.atan2(serifBasis.y, serifBasis.x);\n\n\tvar pointOnCurve;\n\tvar pointOnSerif;\n\tvar pointWithCurve = {};\n\tvar normalToCurve;\n\n\tif (pAnchors.inverseOrder) {\n\t\tpointWithCurve = Utils.pointOnCurve(splitCurveEnd, serifCenter, serifCurve, true, 200);\n\t} else {\n\t\tpointWithCurve = Utils.pointOnCurve(serifCenter, splitCurveEnd, serifCurve, false, 200);\n\t}\n\n\tif (serifCurve > 0) {\n\t\tnormalToCurve = pointWithCurve.normal;\n\t\tpointOnCurve = {\n\t\t\tx: pointWithCurve.x,\n\t\t\ty: pointWithCurve.y,\n\t\t\tdirOut: pointWithCurve.normal,\n\t\t\ttype: 'corner'\n\t\t};\n\t\tvar curveRatio = Math.min(serifCurve / Utils.distance(0, 0, serifDirection.x, serifDirection.y), 0.75);\n\t\tpointOnSerif = {\n\t\t\tx: serifCenter.x + serifDirection.x * curveRatio,\n\t\t\ty: serifCenter.y + serifDirection.y * curveRatio,\n\t\t\tdirIn: serifRadDirection,\n\t\t\tdirOut: serifRadDirection,\n\t\t\ttype: 'corner'\n\t\t};\n\t} else {\n\t\tif (pAnchors.inverseOrder) {\n\t\t\tnormalToCurve = serifCenter.handleIn.angleInRadians;\n\t\t} else {\n\t\t\tnormalToCurve = serifCenter.handleOut.angleInRadians;\n\t\t}\n\t\tpointOnCurve = {\n\t\t\tx: serifCenter.x,\n\t\t\ty: serifCenter.y,\n\t\t\ttype: 'corner'\n\t\t};\n\t\tpointOnSerif = {\n\t\t\tx: serifCenter.x,\n\t\t\ty: serifCenter.y,\n\t\t\ttype: 'corner'\n\t\t};\n\t}\n\tvar leftEdge = {\n\t\tx: serifCenter.x + serifDirection.x,\n\t\ty: serifCenter.y + serifDirection.y,\n\t\tdirIn: serifRadDirection,\n\t\tdirOut: rotateRad\n\t};\n\tvar rightEdge = {\n\t\tx: rotationCenter.x - (baseWidth.y - rotationCenter.y + serifWidth * midWidth * yDir) * Math.sin(rotateRad),\n\t\ty: rotationCenter.y + (baseWidth.y - rotationCenter.y + serifWidth * midWidth * yDir) * Math.cos(rotateRad),\n\t\tdirIn: rotateRad,\n\t\ttypeOut: 'line'\n\t};\n\tvar serifRoot = {\n\t\tx: baseHeight.x,\n\t\ty: baseHeight.y\n\t};\n\n\tvar rootVector = Utils.normalize(Utils.vectorFromPoints(serifRoot, rightEdge));\n\tvar medianVector = Utils.normalize(Utils.vectorFromPoints(pointOnSerif, leftEdge));\n\n\tvar terminalVector = Utils.normalize({\n\t\tx: rootVector.x + medianVector.x,\n\t\ty: rootVector.y + medianVector.y\n\t});\n\n\tvar midPoint = {\n\t\tx: (leftEdge.x + rightEdge.x) / 2 + serifTerminal * serifHeight * terminalVector.x,\n\t\ty: (leftEdge.y + rightEdge.y) / 2 + serifTerminal * serifHeight * terminalVector.y,\n\t\tdirIn: rotateRad,\n\t\tdirOut: rotateRad\n\t};\n\n\tif (serifTerminal !== 0) {\n\t\tleftEdge.dirOut = Math.atan2(medianVector.y, medianVector.x);\n\t\trightEdge.dirIn = Math.atan2(rootVector.y, rootVector.x);\n\t} else if (midWidth !== 1) {\n\t\tvar dirOut = Math.atan2(leftEdge.y - rightEdge.y, leftEdge.x - rightEdge.x);\n\t\tleftEdge.dirOut = dirOut;\n\t\trightEdge.dirIn = dirOut;\n\t\tmidPoint.dirIn = dirOut;\n\t\tmidPoint.dirOut = dirOut;\n\t}\n\n\tvar midStump = {\n\t\tx: serifRoot.x + stumpNorm / 2 * stumpVector.x,\n\t\ty: serifRoot.y + stumpNorm / 2 * stumpVector.y,\n\t\tdirOut: baseWidth.dirIn,\n\t\ttypeIn: 'line',\n\t\ttype: 'corner'\n\t};\n\n\tvar lastPoint = {\n\t\tx: pointOnCurve.x - stumpNorm / 2 * Math.sin(normalToCurve) * yDir * xDir,\n\t\ty: pointOnCurve.y + stumpNorm / 2 * Math.cos(normalToCurve) * yDir * xDir,\n\t\tdirIn: normalToCurve,\n\t\ttypeOut: 'line',\n\t\ttype: 'corner'\n\t};\n\n\tif (serifCurve + serifHeight < 70) {\n\t\tmidStump.tensionOut = 0;\n\t\tlastPoint.tensionIn = 0;\n\t} else {\n\t\tmidStump.tensionOut = 1;\n\t\tlastPoint.tensionIn = 1;\n\t}\n\n\treturn [pointOnCurve, pointOnSerif, leftEdge, midPoint, rightEdge, rotationCenter, serifRoot, midStump, lastPoint];\n};\n/* eslint-enable */\n\nmodule.exports = Utils;\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar plumin = __webpack_require__(5),\n    assign = __webpack_require__(15),\n    Utils = __webpack_require__(23);\n\nvar paper = plumin.paper,\n    naive = {},\n    _ = { assign: assign };\n\nfunction autoExpandableNodeSrc(node, i, j, inSkeleton) {\n\treturn {\n\t\tpoint: { _dependencies: [Utils.cursor(i, j, 'x'), Utils.cursor(i, j, 'y')] },\n\t\tall: { _dependencies: Object.keys(node.src).map(function (key) {\n\t\t\t\treturn Utils.cursor(i, j, key);\n\t\t\t}) },\n\t\t_dependencies: inSkeleton\n\t\t// nodes in skeleton are never fully calculated (we don't calculate\n\t\t// the position of handles because we never draw their contour).\n\t\t// So we don't care about their dependencies.\n\t\t? [] : [Utils.cursor('contours', i, 'all')]\n\t};\n}\n\nfunction autoExpandedNodeSrc(node, i, j, side, isClosed) {\n\treturn {\n\t\tx: { _dependencies: [Utils.cursor(i, j, 'expandedTo', side, 'point')] },\n\t\ty: { _dependencies: [Utils.cursor(i, j, 'expandedTo', side, 'point')] },\n\t\tpoint: {\n\t\t\t_dependencies: [Utils.cursor(i, j, 'x'), Utils.cursor(i, j, 'y'), Utils.cursor(i, j, 'expand')],\n\t\t\t_parameters: ['width'],\n\t\t\t_updaters: [function () {\n\t\t\t\tvar width = arguments[arguments.length - 1];\n\n\t\t\t\tnaive.expandedNodeUpdater(node.expandedTo[side], side === 0, width);\n\t\t\t}]\n\t\t},\n\t\tall: {\n\t\t\t_dependencies: Object.keys(node.src).map(function (key) {\n\t\t\t\treturn Utils.cursor(i, j, key);\n\t\t\t}).concat([Utils.cursor(i, j, 'expandedTo', side, 'point')]),\n\t\t\t_updaters: [function () {\n\t\t\t\tnaive.skeletonCopier(node);\n\t\t\t}]\n\t\t},\n\t\t_dependencies: [Utils.cursor('contours', i, 'expandedTo', isClosed ? side : 0, 'all')]\n\t};\n}\n\nfunction explicitExpandableNodeSrc(node, i, j) {\n\treturn {\n\t\tpoint: { _dependencies: [] },\n\t\tall: { _dependencies: [0, 1].map(function (side) {\n\t\t\t\treturn Utils.cursor(i, j, 'expandedTo', side, 'all');\n\t\t\t}) },\n\t\t_dependencies: []\n\t};\n}\n\nfunction explicitExpandedNodeSrc(node, i, j, side, isClosed) {\n\treturn {\n\t\tpoint: { _dependencies: [Utils.cursor(i, j, 'expandedTo', side, 'x'), Utils.cursor(i, j, 'expandedTo', side, 'y')] },\n\t\tall: { _dependencies: Object.keys(node.src.expandedTo[side]).map(function (key) {\n\t\t\t\treturn Utils.cursor(i, j, 'expandedTo', side, key);\n\t\t\t})\n\t\t},\n\t\t_dependencies: [Utils.cursor('contours', i, 'expandedTo', isClosed ? side : 0, 'all')]\n\t};\n}\n\nfunction expandedContourSrc(contour, i, side) {\n\tvar half = contour.nodes.length / 2;\n\n\treturn {\n\t\tall: {\n\t\t\t_dependencies: contour.nodes.map(function (node, j) {\n\t\t\t\treturn side !== undefined ? Utils.cursor(i, j, 'expandedTo', side, 'all') : Utils.cursor(i, j % half, 'expandedTo', j < half ? 0 : 1, 'all');\n\t\t\t}),\n\t\t\t_parameters: ['curviness'],\n\t\t\t_updaters: [function () {\n\t\t\t\tvar curviness = arguments[arguments.length - 1];\n\n\t\t\t\tnaive.prepareContour(contour);\n\t\t\t\tnaive.updateContour(contour, curviness);\n\t\t\t}]\n\t\t},\n\t\t// nodes: nodesSrc,\n\t\t_dependencies: [Utils.cursor('contours', i, 'expandedTo', side || 0, 'all')]\n\t};\n}\n\nfunction contourSrc(contour, i) {\n\treturn {\n\t\tall: {\n\t\t\t_dependencies: contour.nodes.map(function (node, j) {\n\t\t\t\treturn Utils.cursor(i, j, 'all');\n\t\t\t}),\n\t\t\t_parameters: ['curviness'],\n\t\t\t_updaters: [function () {\n\t\t\t\tvar curviness = arguments[arguments.length - 1];\n\n\t\t\t\tnaive.prepareContour(contour);\n\t\t\t\tnaive.updateContour(contour, curviness);\n\t\t\t}]\n\t\t},\n\t\t_dependencies: contour.nodes.map(function (node, j) {\n\t\t\treturn Utils.cursor(i, j);\n\t\t})\n\t};\n}\n\n// default method to expand skeletons:\n// derives two additional node from every node with an .expand object\nnaive.annotator = function (glyph) {\n\tvar additionalContours = [];\n\n\tglyph.contours.forEach(function (contour, i) {\n\t\tif (contour.skeleton !== true) {\n\t\t\t// annotate nodes+points that aren't in a skeleton\n\t\t\tcontour.nodes.forEach(function (node, j) {\n\t\t\t\t_.assign(node.src, autoExpandableNodeSrc(node, i, j));\n\t\t\t});\n\n\t\t\t_.assign(contour.src, contourSrc(contour, i));\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar leftContour = void 0,\n\t\t    rightContour = void 0,\n\t\t    leftNodes = [],\n\t\t    rightNodes = [],\n\t\t    leftNodesSrc = [],\n\t\t    rightNodesSrc = [],\n\t\t    firstNode = void 0,\n\t\t    lastNode = void 0;\n\n\t\t// skeletons should be hidden\n\t\tcontour.visible = false;\n\n\t\tcontour.nodes.forEach(function (node, j) {\n\t\t\tvar left = new paper.Node(),\n\t\t\t    right = new paper.Node(),\n\t\t\t    leftSrc = void 0,\n\t\t\t    rightSrc = void 0;\n\n\t\t\tleftNodes.push(left);\n\t\t\trightNodes.unshift(right);\n\t\t\tnode.expandedTo = [left, right];\n\t\t\tleft.expandedFrom = right.expandedFrom = node;\n\n\t\t\tif (!node.src.expandedTo) {\n\t\t\t\t// annotate nodes+points that are automatically expanded\n\t\t\t\tleftSrc = autoExpandedNodeSrc(node, i, j, 0, contour.closed);\n\t\t\t\trightSrc = autoExpandedNodeSrc(node, i, j, 1, contour.closed);\n\t\t\t\tnode.src.expandedTo = [leftSrc, rightSrc];\n\t\t\t\t_.assign(node.src, autoExpandableNodeSrc(node, i, j, !!'inSkeleton'));\n\n\t\t\t\t// the expanded node might have been defined explicitely\n\t\t\t} else if (node.src.expandedTo[0] && !node.src.expandedTo[0]._updaters) {\n\t\t\t\tnode.src.expandedTo.forEach(function (src, k) {\n\t\t\t\t\tUtils.mergeStatic(node.expandedTo[k], src);\n\t\t\t\t});\n\n\t\t\t\t// annotate nodes+points that are explicitely expanded\n\t\t\t\tleftSrc = _.assign(node.src.expandedTo[0], explicitExpandedNodeSrc(node, i, j, 0, contour.closed));\n\t\t\t\trightSrc = _.assign(node.src.expandedTo[1], explicitExpandedNodeSrc(node, i, j, 1, contour.closed));\n\n\t\t\t\t_.assign(node.src, explicitExpandableNodeSrc(node, i, j));\n\n\t\t\t\t// A leaf shouldn't appear twice during the recursive\n\t\t\t\t// dependency-tree building. Make the expanded nodes accessible\n\t\t\t\t// from expanded contours, and provide accessors on the\n\t\t\t\t// .expandedFrom node.\n\t\t\t\t// leftNodesSrc.push( leftSrc );\n\t\t\t\t// rightNodesSrc.push( rightSrc );\n\t\t\t}\n\n\t\t\t// if ( leftSrc && rightSrc ) {\n\t\t\t// \tObject.defineProperties( node.src.expandedTo = {}, {\n\t\t\t// \t\t0: { get: function() {\n\t\t\t// \t\t\treturn leftSrc;\n\t\t\t// \t\t}},\n\t\t\t// \t\t1: { get: function() {\n\t\t\t// \t\t\t\treturn rightSrc;\n\t\t\t// \t\t}}\n\t\t\t// \t});\n\t\t\t// }\n\t\t});\n\n\t\tif (!contour.expandedTo && !contour.closed) {\n\t\t\tleftContour = new paper.Path({\n\t\t\t\tclosed: true,\n\t\t\t\tsegments: leftNodes.concat(rightNodes)\n\t\t\t});\n\t\t\tcontour.expandedTo = [leftContour];\n\t\t\tcontour.src.expandedTo = [expandedContourSrc(leftContour, i\n\t\t\t// , 0, leftNodesSrc.concat( rightNodesSrc )\n\t\t\t)];\n\t\t\tleftContour.expandedFrom = contour;\n\t\t\tadditionalContours.push(leftContour);\n\n\t\t\tfirstNode = contour.firstNode;\n\t\t\tlastNode = contour.lastNode;\n\n\t\t\tfirstNode.type = 'corner';\n\t\t\tlastNode.type = 'corner';\n\n\t\t\tfirstNode.expandedTo[0].type = 'corner';\n\t\t\tfirstNode.expandedTo[1].type = 'corner';\n\t\t\tlastNode.expandedTo[0].type = 'corner';\n\t\t\tlastNode.expandedTo[1].type = 'corner';\n\n\t\t\tfirstNode.expandedTo[0].typeIn = 'line';\n\t\t\tfirstNode.expandedTo[1].typeOut = 'line';\n\t\t\tlastNode.expandedTo[0].typeOut = 'line';\n\t\t\tlastNode.expandedTo[1].typeIn = 'line';\n\t\t} else if (!contour.expandedTo && contour.closed) {\n\t\t\tleftContour = new paper.Path({\n\t\t\t\tclosed: true,\n\t\t\t\tsegments: leftNodes\n\t\t\t});\n\t\t\tadditionalContours.push(leftContour);\n\t\t\trightContour = new paper.Path({\n\t\t\t\tclosed: true,\n\t\t\t\tsegments: rightNodes\n\t\t\t});\n\t\t\tadditionalContours.push(rightContour);\n\n\t\t\tcontour.expandedTo = [leftContour, rightContour];\n\t\t\tcontour.src.expandedTo = [expandedContourSrc(leftContour, i, 0, leftNodesSrc), expandedContourSrc(rightContour, i, 1, rightNodesSrc)];\n\t\t\tleftContour.expandedFrom = rightContour.expandedFrom = contour;\n\t\t}\n\t});\n\n\tglyph.addContours(additionalContours);\n};\n\n// Calculate expanded node position\nnaive.expandedNodeUpdater = function (node, isLeft, _width) {\n\tvar origin = node.expandedFrom,\n\t    expand = origin.expand,\n\t    width = expand && expand.width !== undefined ? expand.width : _width,\n\t    coef = expand && expand.distr !== undefined ? isLeft ? expand.distr : 1 - expand.distr : 0.5,\n\t    angle = (isLeft ? Math.PI : 0) + (expand && expand.angle !== undefined ? expand.angle\n\t// We resort to using directions.\n\t// This is wrong, directions are not included in the\n\t// dependencies of the updater and might not be ready yet.\n\t// TODO: Fix this (always require angle to be specified?)\n\t: origin._dirOut !== undefined ? origin._dirOut - Math.PI / 2 : origin._dirIn + Math.PI / 2);\n\n\t// position\n\tnode.point.x = origin.point.x + width * coef * Math.cos(angle);\n\tnode.point.y = origin.point.y + width * coef * Math.sin(angle);\n};\n\n// copy skeleton properties such as types, directions and tensions to expanded\n// nodes\nnaive.skeletonCopier = function (node) {\n\tvar angle = node.expand && node.expand.angle || 0,\n\t    left = node.expandedTo[0],\n\t    right = node.expandedTo[1];\n\n\t// node type\n\tif (node.type !== undefined) {\n\t\tleft.type = right.type = node.type;\n\t}\n\n\t// direction type\n\tif (node.typeIn !== undefined) {\n\t\tleft.typeIn = right.typeOut = node.typeIn;\n\t}\n\tif (node.typeOut !== undefined) {\n\t\tleft.typeOut = right.typeIn = node.typeOut;\n\t}\n\n\t// direction\n\tif (node._dirIn !== undefined) {\n\t\tleft._dirIn = right._dirOut = node._dirIn;\n\n\t\tif (node.type === 'smooth' && !node._dirOut) {\n\t\t\tleft._dirOut = right._dirIn = node._dirIn + Math.PI;\n\t\t}\n\t}\n\tif (node._dirOut !== undefined) {\n\t\tleft._dirOut = right._dirIn = node._dirOut;\n\n\t\tif (node.type === 'smooth' && !node._dirIn) {\n\t\t\tleft._dirIn = right._dirOut = node._dirOut + Math.PI;\n\t\t}\n\t}\n\t// use angle if direction isn't already defined\n\tif (left._dirIn === undefined) {\n\t\t// implies right._dirOut === undefined\n\t\tleft._dirIn = angle - Math.PI / 2;\n\t\tright._dirOut = angle + Math.PI / 2;\n\t}\n\tif (left._dirOut === undefined) {\n\t\t// implies right._dirIn === undefined\n\t\tleft._dirOut = angle + Math.PI / 2;\n\t\tright._dirIn = angle - Math.PI / 2;\n\t}\n\n\t// tension\n\tleft.tensionIn = right.tensionOut = node.tensionIn !== undefined ? node.tensionIn : node.tension !== undefined ? node.tension : 1;\n\tleft.tensionOut = right.tensionIn = node.tensionOut !== undefined ? node.tensionOut : node.tension !== undefined ? node.tension : 1;\n};\n\n// Make sure 'line' types are set on both side of segments\n// and if a smooth node is used in a straight segment, update the directions\n// appropriately this can only be done once the types, directions and position\n// of all nodes have been updated can be renamed #prepareLines if no other\n// operation is added\n// TODO: try doing it at the same time as updateContour (once we have more\n// complex glyphs)\nnaive.prepareContour = function (path) {\n\tpath.nodes.forEach(function (node) {\n\t\tif (node.typeIn === 'line' && node.previous) {\n\t\t\tnode.previous.typeOut = 'line';\n\t\t}\n\n\t\tif (node.typeOut === 'line' && node.next) {\n\t\t\tnode.next.typeIn = 'line';\n\t\t}\n\t});\n\n\tpath.nodes.forEach(function (node) {\n\t\tif (node.typeIn === 'line' && node.type === 'smooth' && node.previous) {\n\t\t\tnode._dirIn = Utils.lineAngle(node.point, node.previous.point);\n\t\t\tnode._dirOut = node._dirIn + Math.PI;\n\t\t}\n\n\t\tif (node.typeOut === 'line' && node.type === 'smooth' && node.next) {\n\t\t\tnode._dirOut = Utils.lineAngle(node.point, node.next.point);\n\t\t\tnode._dirIn = node._dirOut + Math.PI;\n\t\t}\n\t});\n};\n\n// sets the position of control points\n// can be renamed #updateControls if no other operation is added\nnaive.updateContour = function (path, curviness) {\n\tif (curviness === undefined) {\n\t\tcurviness = 2 / 3;\n\t}\n\n\tpath.nodes.forEach(function (node) {\n\t\tvar start = node,\n\t\t    end = void 0,\n\t\t    startCtrl = void 0,\n\t\t    endCtrl = void 0,\n\t\t    startType = void 0,\n\t\t    endType = void 0,\n\t\t    startTension = void 0,\n\t\t    endTension = void 0,\n\t\t    startDir = void 0,\n\t\t    endDir = void 0,\n\t\t    rri = void 0;\n\n\t\tif (!node.next) {\n\t\t\treturn;\n\t\t}\n\n\t\tend = node.next;\n\t\tstartCtrl = start.handleOut;\n\t\tendCtrl = end.handleIn;\n\n\t\tstartType = start.typeOut;\n\t\tendType = end.typeIn;\n\n\t\tif (startType === 'line' || endType === 'line') {\n\t\t\tstartCtrl.x = 0;\n\t\t\tstartCtrl.y = 0;\n\t\t\tendCtrl.x = 0;\n\t\t\tendCtrl.y = 0;\n\n\t\t\treturn;\n\t\t}\n\n\t\tstartTension = start.tensionOut !== undefined ? start.tensionOut : start.tension !== undefined ? start.tension : 1;\n\t\tendTension = end.tensionIn !== undefined ? end.tensionIn : end.tension !== undefined ? end.tension : 1;\n\n\t\tstartDir = start._dirOut !== undefined ? start._dirOut : start.type === 'smooth' ? start._dirIn + Math.PI : 0;\n\t\tendDir = end._dirIn !== undefined ? end._dirIn : end.type === 'smooth' ? end._dirOut - Math.PI : 0;\n\n\t\trri = Utils.rayRayIntersection(start._point, startDir, end._point, endDir);\n\n\t\t// direction of handles is parallel\n\t\tif (rri === null) {\n\t\t\tvar angle = Utils.lineAngle(start._point, end._point),\n\t\t\t    middle = {\n\t\t\t\tx: (end._point.x - start._point.x) / 2 + start._point.x,\n\t\t\t\ty: (end._point.y - start._point.y) / 2 + start._point.y\n\t\t\t},\n\t\t\t    p0 = Utils.rayRayIntersection(start._point, startDir, middle, angle - Math.PI / 2),\n\t\t\t    p1 = Utils.rayRayIntersection(middle, angle + Math.PI / 2, end._point, endDir);\n\n\t\t\tif (p0 === null) {\n\t\t\t\tstartCtrl.x = 0;\n\t\t\t\tstartCtrl.y = 0;\n\t\t\t\tendCtrl.x = 0;\n\t\t\t\tendCtrl.y = 0;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstartCtrl.x = (Math.round(p0[0]) - start._point.x) * curviness * startTension;\n\t\t\tstartCtrl.y = (Math.round(p0[1]) - start._point.y) * curviness * startTension;\n\t\t\tendCtrl.x = (Math.round(p1[0]) - end._point.x) * curviness * endTension;\n\t\t\tendCtrl.y = (Math.round(p1[1]) - end._point.y) * curviness * endTension;\n\n\t\t\treturn;\n\t\t}\n\n\t\tstartCtrl.x = (Math.round(rri[0]) - start.point.x) * curviness * startTension;\n\t\tstartCtrl.y = (Math.round(rri[1]) - start.point.y) * curviness * startTension;\n\t\tendCtrl.x = (Math.round(rri[0]) - end.point.x) * curviness * endTension;\n\t\tendCtrl.y = (Math.round(rri[1]) - end.point.y) * curviness * endTension;\n\t});\n};\n\nvar rdeg = /deg$/;\n\nObject.defineProperties(paper.PaperScope.prototype.Segment.prototype, {\n\texpand: {\n\t\tget: function get() {\n\t\t\treturn this._expand;\n\t\t},\n\t\tset: function set(expand) {\n\t\t\tif (typeof expand.angle === 'string' && rdeg.test(expand.angle)) {\n\t\t\t\texpand.angle = parseFloat(expand.angle) * (Math.PI * 2 / 360);\n\t\t\t}\n\n\t\t\tthis._expand = expand;\n\t\t}\n\t},\n\tdirIn: {\n\t\tget: function get() {\n\t\t\treturn this._dirIn;\n\t\t},\n\t\tset: function set(dir) {\n\t\t\tif (typeof dir === 'string' && rdeg.test(dir)) {\n\t\t\t\tthis._dirIn = parseFloat(dir) * (Math.PI * 2 / 360);\n\t\t\t} else {\n\t\t\t\tthis._dirIn = dir;\n\t\t\t}\n\t\t}\n\t},\n\tdirOut: {\n\t\tget: function get() {\n\t\t\treturn this._dirOut;\n\t\t},\n\t\tset: function set(dir) {\n\t\t\tif (typeof dir === 'string' && rdeg.test(dir)) {\n\t\t\t\tthis._dirOut = parseFloat(dir) * (Math.PI * 2 / 360);\n\t\t\t} else {\n\t\t\t\tthis._dirOut = dir;\n\t\t\t}\n\t\t}\n\t}\n});\n\nmodule.exports = naive;\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar createFind = __webpack_require__(51),\n    findIndex = __webpack_require__(131);\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nmodule.exports = find;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIteratee = __webpack_require__(24),\n    isArrayLike = __webpack_require__(36),\n    keys = __webpack_require__(19);\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nmodule.exports = createFind;\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsMatch = __webpack_require__(53),\n    getMatchData = __webpack_require__(115),\n    matchesStrictComparable = __webpack_require__(38);\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Stack = __webpack_require__(25),\n    baseIsEqual = __webpack_require__(30);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports) {\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar assocIndexOf = __webpack_require__(7);\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar assocIndexOf = __webpack_require__(7);\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar assocIndexOf = __webpack_require__(7);\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar assocIndexOf = __webpack_require__(7);\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ListCache = __webpack_require__(6);\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports) {\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports) {\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ListCache = __webpack_require__(6),\n    Map = __webpack_require__(17),\n    MapCache = __webpack_require__(18);\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isFunction = __webpack_require__(27),\n    isMasked = __webpack_require__(67),\n    isObject = __webpack_require__(9),\n    toSource = __webpack_require__(29);\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Symbol = __webpack_require__(8);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar coreJsData = __webpack_require__(68);\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar root = __webpack_require__(0);\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports) {\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Hash = __webpack_require__(71),\n    ListCache = __webpack_require__(6),\n    Map = __webpack_require__(17);\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar hashClear = __webpack_require__(72),\n    hashDelete = __webpack_require__(73),\n    hashGet = __webpack_require__(74),\n    hashHas = __webpack_require__(75),\n    hashSet = __webpack_require__(76);\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar nativeCreate = __webpack_require__(10);\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports) {\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar nativeCreate = __webpack_require__(10);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar nativeCreate = __webpack_require__(10);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar nativeCreate = __webpack_require__(10);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getMapData = __webpack_require__(11);\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getMapData = __webpack_require__(11);\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getMapData = __webpack_require__(11);\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getMapData = __webpack_require__(11);\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Stack = __webpack_require__(25),\n    equalArrays = __webpack_require__(31),\n    equalByTag = __webpack_require__(88),\n    equalObjects = __webpack_require__(92),\n    getTag = __webpack_require__(110),\n    isArray = __webpack_require__(1),\n    isBuffer = __webpack_require__(33),\n    isTypedArray = __webpack_require__(35);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar MapCache = __webpack_require__(18),\n    setCacheAdd = __webpack_require__(84),\n    setCacheHas = __webpack_require__(85);\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports) {\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports) {\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Symbol = __webpack_require__(8),\n    Uint8Array = __webpack_require__(89),\n    eq = __webpack_require__(26),\n    equalArrays = __webpack_require__(31),\n    mapToArray = __webpack_require__(90),\n    setToArray = __webpack_require__(91);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar root = __webpack_require__(0);\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports) {\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports) {\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getAllKeys = __webpack_require__(93);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGetAllKeys = __webpack_require__(94),\n    getSymbols = __webpack_require__(96),\n    keys = __webpack_require__(19);\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayPush = __webpack_require__(95),\n    isArray = __webpack_require__(1);\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports) {\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayFilter = __webpack_require__(97),\n    stubArray = __webpack_require__(98);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports) {\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports) {\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseTimes = __webpack_require__(100),\n    isArguments = __webpack_require__(32),\n    isArray = __webpack_require__(1),\n    isBuffer = __webpack_require__(33),\n    isIndex = __webpack_require__(34),\n    isTypedArray = __webpack_require__(35);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGetTag = __webpack_require__(3),\n    isObjectLike = __webpack_require__(4);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports) {\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGetTag = __webpack_require__(3),\n    isLength = __webpack_require__(20),\n    isObjectLike = __webpack_require__(4);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(28);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)(module)))\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isPrototype = __webpack_require__(107),\n    nativeKeys = __webpack_require__(108);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar overArg = __webpack_require__(109);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports) {\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar DataView = __webpack_require__(111),\n    Map = __webpack_require__(17),\n    Promise = __webpack_require__(112),\n    Set = __webpack_require__(113),\n    WeakMap = __webpack_require__(114),\n    baseGetTag = __webpack_require__(3),\n    toSource = __webpack_require__(29);\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getNative = __webpack_require__(2),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getNative = __webpack_require__(2),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getNative = __webpack_require__(2),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getNative = __webpack_require__(2),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isStrictComparable = __webpack_require__(37),\n    keys = __webpack_require__(19);\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsEqual = __webpack_require__(30),\n    get = __webpack_require__(117),\n    hasIn = __webpack_require__(124),\n    isKey = __webpack_require__(21),\n    isStrictComparable = __webpack_require__(37),\n    matchesStrictComparable = __webpack_require__(38),\n    toKey = __webpack_require__(13);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGet = __webpack_require__(39);\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar memoizeCapped = __webpack_require__(119);\n\n/** Used to match property names within property paths. */\nvar reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar memoize = __webpack_require__(120);\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n\n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar MapCache = __webpack_require__(18);\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseToString = __webpack_require__(122);\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Symbol = __webpack_require__(8),\n    arrayMap = __webpack_require__(123),\n    isArray = __webpack_require__(1),\n    isSymbol = __webpack_require__(12);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports) {\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseHasIn = __webpack_require__(125),\n    hasPath = __webpack_require__(126);\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n\n\n/***/ }),\n/* 125 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n\n\n/***/ }),\n/* 126 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar castPath = __webpack_require__(40),\n    isArguments = __webpack_require__(32),\n    isArray = __webpack_require__(1),\n    isIndex = __webpack_require__(34),\n    isLength = __webpack_require__(20),\n    toKey = __webpack_require__(13);\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n\n\n/***/ }),\n/* 127 */\n/***/ (function(module, exports) {\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n\n\n/***/ }),\n/* 128 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseProperty = __webpack_require__(129),\n    basePropertyDeep = __webpack_require__(130),\n    isKey = __webpack_require__(21),\n    toKey = __webpack_require__(13);\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n\n\n/***/ }),\n/* 129 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n\n\n/***/ }),\n/* 130 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGet = __webpack_require__(39);\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n\n\n/***/ }),\n/* 131 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseFindIndex = __webpack_require__(132),\n    baseIteratee = __webpack_require__(24),\n    toInteger = __webpack_require__(133);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n\n\n/***/ }),\n/* 132 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n\n\n/***/ }),\n/* 133 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toFinite = __webpack_require__(134);\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n\n\n/***/ }),\n/* 134 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toNumber = __webpack_require__(135);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n\n\n/***/ }),\n/* 135 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(9),\n    isSymbol = __webpack_require__(12);\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n\n\n/***/ })\n/******/ ]);", __webpack_require__.p + "d92ab67e06e530148169.worker.js");
};

/***/ }),
/* 302 */
/***/ (function(module, exports) {

// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string

var URL = window.URL || window.webkitURL;
module.exports = function(content, url) {
  try {
    try {
      var blob;
      try { // BlobBuilder = Deprecated, but widely implemented
        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
        blob = new BlobBuilder();
        blob.append(content);
        blob = blob.getBlob();
      } catch(e) { // The proposed API
        blob = new Blob([content]);
      }
      return new Worker(URL.createObjectURL(blob));
    } catch(e) {
      return new Worker('data:application/javascript,' + encodeURIComponent(content));
    }
  } catch(e) {
    if (!url) {
      throw Error('Inline worker is not supported');
    }
    return new Worker(url);
  }
}


/***/ })
/******/ ]);
});